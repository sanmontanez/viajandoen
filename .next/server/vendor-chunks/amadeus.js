"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/amadeus";
exports.ids = ["vendor-chunks/amadeus"];
exports.modules = {

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus.js":
/*!*********************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _client = _interopRequireDefault(__webpack_require__(/*! ./amadeus/client */ \"(rsc)/./node_modules/amadeus/lib/amadeus/client.js\"));\nvar _pagination = _interopRequireDefault(__webpack_require__(/*! ./amadeus/client/pagination */ \"(rsc)/./node_modules/amadeus/lib/amadeus/client/pagination.js\"));\nvar _reference_data = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/reference_data */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data.js\"));\nvar _shopping = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/shopping */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping.js\"));\nvar _booking = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/booking */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking.js\"));\nvar _travel = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/travel */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel.js\"));\nvar _e_reputation = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/e_reputation */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/e_reputation.js\"));\nvar _media = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/media */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/media.js\"));\nvar _ordering = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/ordering */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering.js\"));\nvar _airport = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/airport */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport.js\"));\nvar _schedule = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/schedule */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/schedule.js\"));\nvar _analytics = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/analytics */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/analytics.js\"));\nvar _location = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/location */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location.js\"));\nvar _airline = _interopRequireDefault(__webpack_require__(/*! ./amadeus/namespaces/airline */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airline.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * The Amadeus client library for accessing the travel APIs.\n *\n * Initialize using your credentials:\n *\n * ```js\n * var Amadeus = require('amadeus');\n * var amadeus = new Amadeus({\n *     clientId:    'YOUR_CLIENT_ID',\n *     clientSecret: 'YOUR_CLIENT_SECRET'\n * });\n * ```\n *\n * Alternatively, initialize the library using\n * the environment variables `AMADEUS_CLIENT_ID`\n * and `AMADEUS_CLIENT_SECRET`\n *\n * ```js\n * var amadeus = new Amadeus();\n * ```\n *\n * @param {Object} params\n * @param {string} params.clientId the API key used to authenticate the API\n * @param {string} params.clientSecret the API secret used to authenticate\n *  the API\n * @param {Object} [params.logger=console] a `console`-compatible logger that\n *  accepts `log`, `error` and `debug` calls.\n * @param {string} [params.logLevel='warn'] the log level for the client,\n *  available options are `debug`, `warn`, and `silent`\n * @param {string} [params.hostname='production'] the name of the server API\n *  calls are made to (`production` or `test`)\n * @param {string} [params.host] the full domain or IP for a server to make the\n *  API clal to. Only use this if you don't want to use the provided servers\n * @param {boolean} [params.ssl=true] wether to use SSL for this API call\n * @param {number} [params.port=443] the port to make the API call to\n * @param {string} [params.customAppId=null] a custom App ID to be passed in\n * the User Agent to the server.\n * @param {string} [params.customAppVersion=null] a custom App Version number to\n * be passed in the User Agent to the server.\n * @param {Object} [params.http=https] an optional Node/HTTP(S)-compatible client\n *  that accepts a 'request()' call with an array of options.\n *\n * @property {Client} client The client for making authenticated HTTP calls\n * @property {number} version The version of this API client\n */\nvar Amadeus = /*#__PURE__*/function () {\n  function Amadeus() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Amadeus);\n    this.client = new _client[\"default\"](params);\n    this.version = this.client.version;\n    this.referenceData = new _reference_data[\"default\"](this.client);\n    this.shopping = new _shopping[\"default\"](this.client);\n    this.booking = new _booking[\"default\"](this.client);\n    this.travel = new _travel[\"default\"](this.client);\n    this.eReputation = new _e_reputation[\"default\"](this.client);\n    this.media = new _media[\"default\"](this.client);\n    this.ordering = new _ordering[\"default\"](this.client);\n    this.airport = new _airport[\"default\"](this.client);\n    this.pagination = new _pagination[\"default\"](this.client);\n    this.schedule = new _schedule[\"default\"](this.client);\n    this.analytics = new _analytics[\"default\"](this.client);\n    this.location = new _location[\"default\"](this.client);\n    this.airline = new _airline[\"default\"](this.client);\n  }\n\n  /**\n   * The previous page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY',\n   *   page: { offset: 2 }\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.previous(response);\n   * }).then(function(previousPage){\n   *   console.log(previousPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n  return _createClass(Amadeus, [{\n    key: \"previous\",\n    value: function previous(response) {\n      return this.pagination.page('previous', response);\n    }\n\n    /**\n     * The next page for the given response. Resolves to null if the page could\n     * not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY'\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.next(response);\n     * }).then(function(nextPage){\n     *   console.log(nextPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n  }, {\n    key: \"next\",\n    value: function next(response) {\n      return this.pagination.page('next', response);\n    }\n\n    /**\n     * The first page for the given response. Resolves to null if the page\n     * could not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY',\n     *   page: { offset: 2 }\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.first(response);\n     * }).then(function(firstPage){\n     *   console.log(firstPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n  }, {\n    key: \"first\",\n    value: function first(response) {\n      return this.pagination.page('first', response);\n    }\n\n    /**\n     * The last page for the given response. Resolves to null if the page\n     * could not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY'\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.last(response);\n     * }).then(function(lastPage){\n     *   console.log(lastPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n  }, {\n    key: \"last\",\n    value: function last(response) {\n      return this.pagination.page('last', response);\n    }\n  }]);\n}();\n/**\n * A handy list of location types, to be used in the locations API:\n *\n * ```js\n * amadeus.referenceData.location.get({\n *   keyword: 'lon',\n *   subType: Amadeus.location.any\n * });\n * ```\n *\n * Currently available are the types `.airport`, `.city`, and `.any`\n */\nAmadeus.location = {\n  airport: 'AIRPORT',\n  city: 'CITY',\n  any: 'AIRPORT,CITY'\n};\n\n/**\n * A handy list of direction types, to be used in the Flight Busiest Period API:\n *\n * ```js\n * amadeus.travel.analytics.airTraffic.busiestPeriod.get({\n *   cityCode: 'par',\n *   perdiod: 2015,\n *   direction: Amadeus.direction.arriving\n * });\n * ```\n *\n * Currently available are the types `.arriving` and `.departing`\n */\n\nAmadeus.direction = {\n  arriving: 'ARRIVING',\n  departing: 'DEPARTING'\n};\nvar _default = exports[\"default\"] = Amadeus;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/client.js":
/*!****************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/client.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _events = _interopRequireDefault(__webpack_require__(/*! events */ \"events\"));\nvar _util = _interopRequireDefault(__webpack_require__(/*! util */ \"util\"));\nvar _access_token = _interopRequireDefault(__webpack_require__(/*! ./client/access_token */ \"(rsc)/./node_modules/amadeus/lib/amadeus/client/access_token.js\"));\nvar _listener = _interopRequireDefault(__webpack_require__(/*! ./client/listener */ \"(rsc)/./node_modules/amadeus/lib/amadeus/client/listener.js\"));\nvar _request = _interopRequireDefault(__webpack_require__(/*! ./client/request */ \"(rsc)/./node_modules/amadeus/lib/amadeus/client/request.js\"));\nvar _validator = _interopRequireDefault(__webpack_require__(/*! ./client/validator */ \"(rsc)/./node_modules/amadeus/lib/amadeus/client/validator.js\"));\nvar _package = _interopRequireDefault(__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/amadeus/package.json\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A convenient wrapper around the API, allowing for generic, authenticated and\n * unauthenticated API calls without having to manage the serialization,\n * desrialization, and authentication.\n *\n * Generally you do not need to use this object directly. Instead it is used\n * indirectly by the various namespaced methods for every API call.\n *\n * For example, the following are the semantically the same.\n *\n * ```js\n * amadeus.client.get('/v1/reference-data/urls/checkin-links', params);\n * amadeus.amadeus.reference_data.urls.checkin_links.get(params);\n * ```\n *\n * @param {Object} options a list of options. See {@link Amadeus} .\n * @property {string} clientId the API key used to authenticate the API\n * @property {string} clientSecret the API secret used to authenticate\n *  the API\n * @property {Object} logger the `console`-compatible logger used to debug calls\n * @property {string} logLevel the log level for the client, available options\n *  are `debug`, `warn`, and `silent`. Defaults to 'silent'\n * @property {string} host the hostname of the server API calls are made to\n * @property {number} port the port the server API calls are made to\n * @property {boolean} ssl wether an SSL request is made to the server\n * @property {string} customAppId the custom App ID to be passed in the User\n *  Agent to the server\n * @property {string} customAppVersion the custom App Version number to be\n *  passed in the User Agent to the server\n * @property {Object} http the Node/HTTP(S)-compatible client used to make\n *  requests\n * @property {number} version The version of this API client\n */\nvar Client = /*#__PURE__*/function () {\n  function Client() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Client);\n    new _validator[\"default\"]().validateAndInitialize(this, options);\n    this.accessToken = new _access_token[\"default\"](this);\n    this.version = _package[\"default\"].version;\n  }\n\n  /**\n   * Make an authenticated GET API call.\n   *\n   * ```js\n   * amadeus.client.get('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the query string parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n  return _createClass(Client, [{\n    key: \"get\",\n    value: function get(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('GET', path, params);\n    }\n\n    /**\n     * Make an authenticated POST API call.\n     *\n     * ```js\n     * amadeus.client.post('/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the POST parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n  }, {\n    key: \"post\",\n    value: function post(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('POST', path, params);\n    }\n\n    /**\n     * Make an authenticated DELETE API call.\n     *\n     * ```js\n     * amadeus.client.delete('/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the query string parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('DELETE', path, params);\n    }\n\n    // PROTECTED\n\n    /**\n     * Make an authenticated API call.\n     *\n     * ```js\n     * amadeus.client.call('GET', '/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the POST parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     * @protected\n     */\n  }, {\n    key: \"request\",\n    value: function request(verb, path) {\n      var _this = this;\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.accessToken.bearerToken(this).then(function (bearerToken) {\n        return _this.unauthenticatedRequest(verb, path, params, bearerToken);\n      });\n    }\n\n    // PRIVATE\n\n    /**\n     * Make any kind of API call, authenticated or not\n     *\n     * Used by the .get, .post methods to make API calls.\n     *\n     * Sets up a new Promise and then excutes the API call, triggering the Promise\n     * to be called when the API call fails or succeeds.\n     *\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} params the parameters to pass in the query or body\n     * @param {string} [bearerToken=null] the BearerToken as generated by the\n     *  AccessToken class\n     * @return {Promise.<Response,ResponseError>} a Promise\n     * @private\n     */\n  }, {\n    key: \"unauthenticatedRequest\",\n    value: function unauthenticatedRequest(verb, path, params) {\n      var bearerToken = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var request = this.buildRequest(verb, path, params, bearerToken);\n      this.log(request);\n      var emitter = new _events[\"default\"]();\n      var promise = this.buildPromise(emitter);\n      this.execute(request, emitter);\n      return promise;\n    }\n\n    /**\n     * Actually executes the API call.\n     *\n     * @param {Request} request the request to execute\n     * @param {EventEmitter} emitter the event emitter to notify of changes\n     * @private\n     */\n  }, {\n    key: \"execute\",\n    value: function execute(request, emitter) {\n      var http_request = this.http.request(request.options());\n      var listener = new _listener[\"default\"](request, emitter, this);\n      http_request.on('response', listener.onResponse.bind(listener));\n      http_request.on('error', listener.onError.bind(listener));\n      http_request.write(request.body());\n      http_request.end();\n    }\n\n    /**\n     * Builds a Request object to be used in the API call\n     *\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} params the parameters to pass in the query or body\n     * @param {string} [bearerToken=null] the BearerToken as generated by the\n     *  AccessToken class\n     * @return {Request}\n     * @private\n     */\n  }, {\n    key: \"buildRequest\",\n    value: function buildRequest(verb, path, params, bearerToken) {\n      return new _request[\"default\"]({\n        host: this.host,\n        verb: verb,\n        path: path,\n        params: params,\n        bearerToken: bearerToken,\n        clientVersion: this.version,\n        languageVersion: process.versions.node,\n        appId: this.customAppId,\n        appVersion: this.customAppVersion,\n        port: this.port,\n        ssl: this.ssl\n      });\n    }\n\n    /**\n     * Builds a Promise to be returned to the API user\n     *\n     * @param  {type} emitter the event emitter to notify of changes\n     * @return {Promise} a promise\n     * @private\n     */\n  }, {\n    key: \"buildPromise\",\n    value: function buildPromise(emitter) {\n      return new Promise(function (resolve, reject) {\n        emitter.on('resolve', function (response) {\n          return resolve(response);\n        });\n        emitter.on('reject', function (error) {\n          return reject(error);\n        });\n      });\n    }\n\n    /**\n     * Logs the request, when in debug mode\n     *\n     * @param  {Request} request the request object to log\n     * @private\n     */\n  }, {\n    key: \"log\",\n    value: function log(request) {\n      /* istanbul ignore next */\n      if (this.debug()) {\n        this.logger.log(_util[\"default\"].inspect(request, false, null));\n      }\n    }\n\n    /**\n     * Determines if this client is in debug mode\n     *\n     * @return {boolean}\n     */\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      return this.logLevel == 'debug';\n    }\n\n    /**\n     * Determines if this client is in warn or debug mode\n     *\n     * @return {boolean}\n     */\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      return this.logLevel == 'warn' || this.debug();\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Client;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCLHFDQUFxQyxtQkFBTyxDQUFDLHNCQUFRO0FBQ3JELG1DQUFtQyxtQkFBTyxDQUFDLGtCQUFNO0FBQ2pELDJDQUEyQyxtQkFBTyxDQUFDLDhGQUF1QjtBQUMxRSx1Q0FBdUMsbUJBQU8sQ0FBQyxzRkFBbUI7QUFDbEUsc0NBQXNDLG1CQUFPLENBQUMsb0ZBQWtCO0FBQ2hFLHdDQUF3QyxtQkFBTyxDQUFDLHdGQUFvQjtBQUNwRSxzQ0FBc0MsbUJBQU8sQ0FBQyxxRUFBb0I7QUFDbEUscUNBQXFDLGlDQUFpQztBQUN0RSxzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRLGdDQUFnQyxlQUFlO0FBQ2xFLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEI7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFNBQVM7QUFDdkIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxjQUFjO0FBQ3ZEO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUSxVQUFVO0FBQy9CLGNBQWMsa0NBQWtDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGNBQWM7QUFDMUQ7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRLFVBQVU7QUFDakMsZ0JBQWdCLGtDQUFrQztBQUNsRDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRLFVBQVU7QUFDakMsZ0JBQWdCLGtDQUFrQztBQUNsRDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGNBQWM7QUFDakU7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUSxVQUFVO0FBQ2pDLGdCQUFnQixrQ0FBa0M7QUFDbEQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGdCQUFnQixrQ0FBa0M7QUFDbEQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEIsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsZUFBZSxrQkFBa0I7QUFDakM7QUFDQSwyQ0FBMkMsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXRyYXZlbC1hZ2VuY3kvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9jbGllbnQuanM/YTFlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9ldmVudHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJldmVudHNcIikpO1xudmFyIF91dGlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwidXRpbFwiKSk7XG52YXIgX2FjY2Vzc190b2tlbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY2xpZW50L2FjY2Vzc190b2tlblwiKSk7XG52YXIgX2xpc3RlbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jbGllbnQvbGlzdGVuZXJcIikpO1xudmFyIF9yZXF1ZXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jbGllbnQvcmVxdWVzdFwiKSk7XG52YXIgX3ZhbGlkYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY2xpZW50L3ZhbGlkYXRvclwiKSk7XG52YXIgX3BhY2thZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9wYWNrYWdlLmpzb25cIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgYXJvdW5kIHRoZSBBUEksIGFsbG93aW5nIGZvciBnZW5lcmljLCBhdXRoZW50aWNhdGVkIGFuZFxuICogdW5hdXRoZW50aWNhdGVkIEFQSSBjYWxscyB3aXRob3V0IGhhdmluZyB0byBtYW5hZ2UgdGhlIHNlcmlhbGl6YXRpb24sXG4gKiBkZXNyaWFsaXphdGlvbiwgYW5kIGF1dGhlbnRpY2F0aW9uLlxuICpcbiAqIEdlbmVyYWxseSB5b3UgZG8gbm90IG5lZWQgdG8gdXNlIHRoaXMgb2JqZWN0IGRpcmVjdGx5LiBJbnN0ZWFkIGl0IGlzIHVzZWRcbiAqIGluZGlyZWN0bHkgYnkgdGhlIHZhcmlvdXMgbmFtZXNwYWNlZCBtZXRob2RzIGZvciBldmVyeSBBUEkgY2FsbC5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyBhcmUgdGhlIHNlbWFudGljYWxseSB0aGUgc2FtZS5cbiAqXG4gKiBgYGBqc1xuICogYW1hZGV1cy5jbGllbnQuZ2V0KCcvdjEvcmVmZXJlbmNlLWRhdGEvdXJscy9jaGVja2luLWxpbmtzJywgcGFyYW1zKTtcbiAqIGFtYWRldXMuYW1hZGV1cy5yZWZlcmVuY2VfZGF0YS51cmxzLmNoZWNraW5fbGlua3MuZ2V0KHBhcmFtcyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhIGxpc3Qgb2Ygb3B0aW9ucy4gU2VlIHtAbGluayBBbWFkZXVzfSAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY2xpZW50SWQgdGhlIEFQSSBrZXkgdXNlZCB0byBhdXRoZW50aWNhdGUgdGhlIEFQSVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNsaWVudFNlY3JldCB0aGUgQVBJIHNlY3JldCB1c2VkIHRvIGF1dGhlbnRpY2F0ZVxuICogIHRoZSBBUElcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBsb2dnZXIgdGhlIGBjb25zb2xlYC1jb21wYXRpYmxlIGxvZ2dlciB1c2VkIHRvIGRlYnVnIGNhbGxzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbG9nTGV2ZWwgdGhlIGxvZyBsZXZlbCBmb3IgdGhlIGNsaWVudCwgYXZhaWxhYmxlIG9wdGlvbnNcbiAqICBhcmUgYGRlYnVnYCwgYHdhcm5gLCBhbmQgYHNpbGVudGAuIERlZmF1bHRzIHRvICdzaWxlbnQnXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaG9zdCB0aGUgaG9zdG5hbWUgb2YgdGhlIHNlcnZlciBBUEkgY2FsbHMgYXJlIG1hZGUgdG9cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwb3J0IHRoZSBwb3J0IHRoZSBzZXJ2ZXIgQVBJIGNhbGxzIGFyZSBtYWRlIHRvXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNzbCB3ZXRoZXIgYW4gU1NMIHJlcXVlc3QgaXMgbWFkZSB0byB0aGUgc2VydmVyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY3VzdG9tQXBwSWQgdGhlIGN1c3RvbSBBcHAgSUQgdG8gYmUgcGFzc2VkIGluIHRoZSBVc2VyXG4gKiAgQWdlbnQgdG8gdGhlIHNlcnZlclxuICogQHByb3BlcnR5IHtzdHJpbmd9IGN1c3RvbUFwcFZlcnNpb24gdGhlIGN1c3RvbSBBcHAgVmVyc2lvbiBudW1iZXIgdG8gYmVcbiAqICBwYXNzZWQgaW4gdGhlIFVzZXIgQWdlbnQgdG8gdGhlIHNlcnZlclxuICogQHByb3BlcnR5IHtPYmplY3R9IGh0dHAgdGhlIE5vZGUvSFRUUChTKS1jb21wYXRpYmxlIGNsaWVudCB1c2VkIHRvIG1ha2VcbiAqICByZXF1ZXN0c1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhpcyBBUEkgY2xpZW50XG4gKi9cbnZhciBDbGllbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDbGllbnQoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGllbnQpO1xuICAgIG5ldyBfdmFsaWRhdG9yW1wiZGVmYXVsdFwiXSgpLnZhbGlkYXRlQW5kSW5pdGlhbGl6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLmFjY2Vzc1Rva2VuID0gbmV3IF9hY2Nlc3NfdG9rZW5bXCJkZWZhdWx0XCJdKHRoaXMpO1xuICAgIHRoaXMudmVyc2lvbiA9IF9wYWNrYWdlW1wiZGVmYXVsdFwiXS52ZXJzaW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgYW4gYXV0aGVudGljYXRlZCBHRVQgQVBJIGNhbGwuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuY2xpZW50LmdldCgnL3YyL2Zvby9iYXInLCB7IHNvbWU6ICdkYXRhJyB9KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIHRoZSBmdWxsIHBhdGggb2YgdGhlIEFQSSBlbmRwb2ludFxuICAgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtcz17fV0gdGhlIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQ2xpZW50LCBbe1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KHBhdGgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnR0VUJywgcGF0aCwgcGFyYW1zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGF1dGhlbnRpY2F0ZWQgUE9TVCBBUEkgY2FsbC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogYW1hZGV1cy5jbGllbnQucG9zdCgnL3YyL2Zvby9iYXInLCB7IHNvbWU6ICdkYXRhJyB9KTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCB0aGUgZnVsbCBwYXRoIG9mIHRoZSBBUEkgZW5kcG9pbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtcz17fV0gdGhlIFBPU1QgcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwb3N0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3QocGF0aCkge1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQT1NUJywgcGF0aCwgcGFyYW1zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGF1dGhlbnRpY2F0ZWQgREVMRVRFIEFQSSBjYWxsLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBhbWFkZXVzLmNsaWVudC5kZWxldGUoJy92Mi9mb28vYmFyJywgeyBzb21lOiAnZGF0YScgfSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggdGhlIGZ1bGwgcGF0aCBvZiB0aGUgQVBJIGVuZHBvaW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXM9e31dIHRoZSBxdWVyeSBzdHJpbmcgcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJkZWxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShwYXRoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0RFTEVURScsIHBhdGgsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgLy8gUFJPVEVDVEVEXG5cbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGF1dGhlbnRpY2F0ZWQgQVBJIGNhbGwuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGFtYWRldXMuY2xpZW50LmNhbGwoJ0dFVCcsICcvdjIvZm9vL2JhcicsIHsgc29tZTogJ2RhdGEnIH0pO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJiIHRoZSBIVFRQIG1ldGhvZCwgZm9yIGV4YW1wbGUgYEdFVGAgb3IgYFBPU1RgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggdGhlIGZ1bGwgcGF0aCBvZiB0aGUgQVBJIGVuZHBvaW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXM9e31dIHRoZSBQT1NUIHBhcmFtZXRlcnNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdCh2ZXJiLCBwYXRoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlbi5iZWFyZXJUb2tlbih0aGlzKS50aGVuKGZ1bmN0aW9uIChiZWFyZXJUb2tlbikge1xuICAgICAgICByZXR1cm4gX3RoaXMudW5hdXRoZW50aWNhdGVkUmVxdWVzdCh2ZXJiLCBwYXRoLCBwYXJhbXMsIGJlYXJlclRva2VuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBSSVZBVEVcblxuICAgIC8qKlxuICAgICAqIE1ha2UgYW55IGtpbmQgb2YgQVBJIGNhbGwsIGF1dGhlbnRpY2F0ZWQgb3Igbm90XG4gICAgICpcbiAgICAgKiBVc2VkIGJ5IHRoZSAuZ2V0LCAucG9zdCBtZXRob2RzIHRvIG1ha2UgQVBJIGNhbGxzLlxuICAgICAqXG4gICAgICogU2V0cyB1cCBhIG5ldyBQcm9taXNlIGFuZCB0aGVuIGV4Y3V0ZXMgdGhlIEFQSSBjYWxsLCB0cmlnZ2VyaW5nIHRoZSBQcm9taXNlXG4gICAgICogdG8gYmUgY2FsbGVkIHdoZW4gdGhlIEFQSSBjYWxsIGZhaWxzIG9yIHN1Y2NlZWRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZlcmIgdGhlIEhUVFAgbWV0aG9kLCBmb3IgZXhhbXBsZSBgR0VUYCBvciBgUE9TVGBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCB0aGUgZnVsbCBwYXRoIG9mIHRoZSBBUEkgZW5kcG9pbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzIHRvIHBhc3MgaW4gdGhlIHF1ZXJ5IG9yIGJvZHlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2JlYXJlclRva2VuPW51bGxdIHRoZSBCZWFyZXJUb2tlbiBhcyBnZW5lcmF0ZWQgYnkgdGhlXG4gICAgICogIEFjY2Vzc1Rva2VuIGNsYXNzXG4gICAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidW5hdXRoZW50aWNhdGVkUmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmF1dGhlbnRpY2F0ZWRSZXF1ZXN0KHZlcmIsIHBhdGgsIHBhcmFtcykge1xuICAgICAgdmFyIGJlYXJlclRva2VuID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuICAgICAgdmFyIHJlcXVlc3QgPSB0aGlzLmJ1aWxkUmVxdWVzdCh2ZXJiLCBwYXRoLCBwYXJhbXMsIGJlYXJlclRva2VuKTtcbiAgICAgIHRoaXMubG9nKHJlcXVlc3QpO1xuICAgICAgdmFyIGVtaXR0ZXIgPSBuZXcgX2V2ZW50c1tcImRlZmF1bHRcIl0oKTtcbiAgICAgIHZhciBwcm9taXNlID0gdGhpcy5idWlsZFByb21pc2UoZW1pdHRlcik7XG4gICAgICB0aGlzLmV4ZWN1dGUocmVxdWVzdCwgZW1pdHRlcik7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY3R1YWxseSBleGVjdXRlcyB0aGUgQVBJIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3R9IHJlcXVlc3QgdGhlIHJlcXVlc3QgdG8gZXhlY3V0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIHRoZSBldmVudCBlbWl0dGVyIHRvIG5vdGlmeSBvZiBjaGFuZ2VzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJleGVjdXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGUocmVxdWVzdCwgZW1pdHRlcikge1xuICAgICAgdmFyIGh0dHBfcmVxdWVzdCA9IHRoaXMuaHR0cC5yZXF1ZXN0KHJlcXVlc3Qub3B0aW9ucygpKTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IG5ldyBfbGlzdGVuZXJbXCJkZWZhdWx0XCJdKHJlcXVlc3QsIGVtaXR0ZXIsIHRoaXMpO1xuICAgICAgaHR0cF9yZXF1ZXN0Lm9uKCdyZXNwb25zZScsIGxpc3RlbmVyLm9uUmVzcG9uc2UuYmluZChsaXN0ZW5lcikpO1xuICAgICAgaHR0cF9yZXF1ZXN0Lm9uKCdlcnJvcicsIGxpc3RlbmVyLm9uRXJyb3IuYmluZChsaXN0ZW5lcikpO1xuICAgICAgaHR0cF9yZXF1ZXN0LndyaXRlKHJlcXVlc3QuYm9keSgpKTtcbiAgICAgIGh0dHBfcmVxdWVzdC5lbmQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZHMgYSBSZXF1ZXN0IG9iamVjdCB0byBiZSB1c2VkIGluIHRoZSBBUEkgY2FsbFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZlcmIgdGhlIEhUVFAgbWV0aG9kLCBmb3IgZXhhbXBsZSBgR0VUYCBvciBgUE9TVGBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCB0aGUgZnVsbCBwYXRoIG9mIHRoZSBBUEkgZW5kcG9pbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzIHRvIHBhc3MgaW4gdGhlIHF1ZXJ5IG9yIGJvZHlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2JlYXJlclRva2VuPW51bGxdIHRoZSBCZWFyZXJUb2tlbiBhcyBnZW5lcmF0ZWQgYnkgdGhlXG4gICAgICogIEFjY2Vzc1Rva2VuIGNsYXNzXG4gICAgICogQHJldHVybiB7UmVxdWVzdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImJ1aWxkUmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFJlcXVlc3QodmVyYiwgcGF0aCwgcGFyYW1zLCBiZWFyZXJUb2tlbikge1xuICAgICAgcmV0dXJuIG5ldyBfcmVxdWVzdFtcImRlZmF1bHRcIl0oe1xuICAgICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICAgIHZlcmI6IHZlcmIsXG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICBiZWFyZXJUb2tlbjogYmVhcmVyVG9rZW4sXG4gICAgICAgIGNsaWVudFZlcnNpb246IHRoaXMudmVyc2lvbixcbiAgICAgICAgbGFuZ3VhZ2VWZXJzaW9uOiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsXG4gICAgICAgIGFwcElkOiB0aGlzLmN1c3RvbUFwcElkLFxuICAgICAgICBhcHBWZXJzaW9uOiB0aGlzLmN1c3RvbUFwcFZlcnNpb24sXG4gICAgICAgIHBvcnQ6IHRoaXMucG9ydCxcbiAgICAgICAgc3NsOiB0aGlzLnNzbFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIGEgUHJvbWlzZSB0byBiZSByZXR1cm5lZCB0byB0aGUgQVBJIHVzZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3R5cGV9IGVtaXR0ZXIgdGhlIGV2ZW50IGVtaXR0ZXIgdG8gbm90aWZ5IG9mIGNoYW5nZXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImJ1aWxkUHJvbWlzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFByb21pc2UoZW1pdHRlcikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZW1pdHRlci5vbigncmVzb2x2ZScsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVtaXR0ZXIub24oJ3JlamVjdCcsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgdGhlIHJlcXVlc3QsIHdoZW4gaW4gZGVidWcgbW9kZVxuICAgICAqXG4gICAgICogQHBhcmFtICB7UmVxdWVzdH0gcmVxdWVzdCB0aGUgcmVxdWVzdCBvYmplY3QgdG8gbG9nXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKHJlcXVlc3QpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBpZiAodGhpcy5kZWJ1ZygpKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhfdXRpbFtcImRlZmF1bHRcIl0uaW5zcGVjdChyZXF1ZXN0LCBmYWxzZSwgbnVsbCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhpcyBjbGllbnQgaXMgaW4gZGVidWcgbW9kZVxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJkZWJ1Z1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvZ0xldmVsID09ICdkZWJ1Zyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGlzIGNsaWVudCBpcyBpbiB3YXJuIG9yIGRlYnVnIG1vZGVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwid2FyblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3YXJuKCkge1xuICAgICAgcmV0dXJuIHRoaXMubG9nTGV2ZWwgPT0gJ3dhcm4nIHx8IHRoaXMuZGVidWcoKTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQ2xpZW50O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZaWFpsYm5Seklpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmZkWFJwYkNJc0lsOWhZMk5sYzNOZmRHOXJaVzRpTENKZmJHbHpkR1Z1WlhJaUxDSmZjbVZ4ZFdWemRDSXNJbDkyWVd4cFpHRjBiM0lpTENKZmNHRmphMkZuWlNJc0ltVWlMQ0pmWDJWelRXOWtkV3hsSWl3aVgzUjVjR1Z2WmlJc0ltOGlMQ0pUZVcxaWIyd2lMQ0pwZEdWeVlYUnZjaUlzSW1OdmJuTjBjblZqZEc5eUlpd2ljSEp2ZEc5MGVYQmxJaXdpWDJOc1lYTnpRMkZzYkVOb1pXTnJJaXdpWVNJc0ltNGlMQ0pVZVhCbFJYSnliM0lpTENKZlpHVm1hVzVsVUhKdmNHVnlkR2xsY3lJc0luSWlMQ0owSWl3aWJHVnVaM1JvSWl3aVpXNTFiV1Z5WVdKc1pTSXNJbU52Ym1acFozVnlZV0pzWlNJc0luZHlhWFJoWW14bElpd2lUMkpxWldOMElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmZkRzlRY205d1pYSjBlVXRsZVNJc0ltdGxlU0lzSWw5amNtVmhkR1ZEYkdGemN5SXNJbWtpTENKZmRHOVFjbWx0YVhScGRtVWlMQ0owYjFCeWFXMXBkR2wyWlNJc0ltTmhiR3dpTENKVGRISnBibWNpTENKT2RXMWlaWElpTENKRGJHbGxiblFpTENKdmNIUnBiMjV6SWl3aVlYSm5kVzFsYm5Seklpd2lkVzVrWldacGJtVmtJaXdpVm1Gc2FXUmhkRzl5SWl3aWRtRnNhV1JoZEdWQmJtUkpibWwwYVdGc2FYcGxJaXdpWVdOalpYTnpWRzlyWlc0aUxDSkJZMk5sYzNOVWIydGxiaUlzSW5abGNuTnBiMjRpTENKd2EyY2lMQ0oyWVd4MVpTSXNJbWRsZENJc0luQmhkR2dpTENKd1lYSmhiWE1pTENKeVpYRjFaWE4wSWl3aWNHOXpkQ0lzSWw5a1pXeGxkR1VpTENKMlpYSmlJaXdpWDNSb2FYTWlMQ0ppWldGeVpYSlViMnRsYmlJc0luUm9aVzRpTENKMWJtRjFkR2hsYm5ScFkyRjBaV1JTWlhGMVpYTjBJaXdpWW5WcGJHUlNaWEYxWlhOMElpd2liRzluSWl3aVpXMXBkSFJsY2lJc0lrVjJaVzUwUlcxcGRIUmxjaUlzSW5CeWIyMXBjMlVpTENKaWRXbHNaRkJ5YjIxcGMyVWlMQ0psZUdWamRYUmxJaXdpYUhSMGNGOXlaWEYxWlhOMElpd2lhSFIwY0NJc0lteHBjM1JsYm1WeUlpd2lUR2x6ZEdWdVpYSWlMQ0p2YmlJc0ltOXVVbVZ6Y0c5dWMyVWlMQ0ppYVc1a0lpd2liMjVGY25KdmNpSXNJbmR5YVhSbElpd2lZbTlrZVNJc0ltVnVaQ0lzSWxKbGNYVmxjM1FpTENKb2IzTjBJaXdpWTJ4cFpXNTBWbVZ5YzJsdmJpSXNJbXhoYm1kMVlXZGxWbVZ5YzJsdmJpSXNJbkJ5YjJObGMzTWlMQ0oyWlhKemFXOXVjeUlzSW01dlpHVWlMQ0poY0hCSlpDSXNJbU4xYzNSdmJVRndjRWxrSWl3aVlYQndWbVZ5YzJsdmJpSXNJbU4xYzNSdmJVRndjRlpsY25OcGIyNGlMQ0p3YjNKMElpd2ljM05zSWl3aVVISnZiV2x6WlNJc0luSmxjMjlzZG1VaUxDSnlaV3BsWTNRaUxDSnlaWE53YjI1elpTSXNJbVZ5Y205eUlpd2laR1ZpZFdjaUxDSnNiMmRuWlhJaUxDSjFkR2xzSWl3aWFXNXpjR1ZqZENJc0lteHZaMHhsZG1Wc0lpd2lkMkZ5YmlJc0lsOWtaV1poZFd4MElpd2laWGh3YjNKMGN5SXNJbTF2WkhWc1pTSXNJbVJsWm1GMWJIUWlYU3dpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdllXMWhaR1YxY3k5amJHbGxiblF1YW5NaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElFVjJaVzUwUlcxcGRIUmxjaUJtY205dElDZGxkbVZ1ZEhNbk8xeHVhVzF3YjNKMElIVjBhV3dnSUNBZ0lDQWdJQ0JtY205dElDZDFkR2xzSnp0Y2JseHVhVzF3YjNKMElFRmpZMlZ6YzFSdmEyVnVJR1p5YjIwZ0p5NHZZMnhwWlc1MEwyRmpZMlZ6YzE5MGIydGxiaWM3WEc1cGJYQnZjblFnVEdsemRHVnVaWElnSUNBZ1puSnZiU0FuTGk5amJHbGxiblF2YkdsemRHVnVaWEluTzF4dWFXMXdiM0owSUZKbGNYVmxjM1FnSUNBZ0lHWnliMjBnSnk0dlkyeHBaVzUwTDNKbGNYVmxjM1FuTzF4dWFXMXdiM0owSUZaaGJHbGtZWFJ2Y2lBZ0lHWnliMjBnSnk0dlkyeHBaVzUwTDNaaGJHbGtZWFJ2Y2ljN1hHNWNibWx0Y0c5eWRDQndhMmNnSUNBZ0lDQWdJQ0JtY205dElDY3VMaTh1TGk5d1lXTnJZV2RsTG1wemIyNG5PMXh1WEc0dktpcGNiaUFxSUVFZ1kyOXVkbVZ1YVdWdWRDQjNjbUZ3Y0dWeUlHRnliM1Z1WkNCMGFHVWdRVkJKTENCaGJHeHZkMmx1WnlCbWIzSWdaMlZ1WlhKcFl5d2dZWFYwYUdWdWRHbGpZWFJsWkNCaGJtUmNiaUFxSUhWdVlYVjBhR1Z1ZEdsallYUmxaQ0JCVUVrZ1kyRnNiSE1nZDJsMGFHOTFkQ0JvWVhacGJtY2dkRzhnYldGdVlXZGxJSFJvWlNCelpYSnBZV3hwZW1GMGFXOXVMRnh1SUNvZ1pHVnpjbWxoYkdsNllYUnBiMjRzSUdGdVpDQmhkWFJvWlc1MGFXTmhkR2x2Ymk1Y2JpQXFYRzRnS2lCSFpXNWxjbUZzYkhrZ2VXOTFJR1J2SUc1dmRDQnVaV1ZrSUhSdklIVnpaU0IwYUdseklHOWlhbVZqZENCa2FYSmxZM1JzZVM0Z1NXNXpkR1ZoWkNCcGRDQnBjeUIxYzJWa1hHNGdLaUJwYm1ScGNtVmpkR3g1SUdKNUlIUm9aU0IyWVhKcGIzVnpJRzVoYldWemNHRmpaV1FnYldWMGFHOWtjeUJtYjNJZ1pYWmxjbmtnUVZCSklHTmhiR3d1WEc0Z0tseHVJQ29nUm05eUlHVjRZVzF3YkdVc0lIUm9aU0JtYjJ4c2IzZHBibWNnWVhKbElIUm9aU0J6WlcxaGJuUnBZMkZzYkhrZ2RHaGxJSE5oYldVdVhHNGdLbHh1SUNvZ1lHQmdhbk5jYmlBcUlHRnRZV1JsZFhNdVkyeHBaVzUwTG1kbGRDZ25MM1l4TDNKbFptVnlaVzVqWlMxa1lYUmhMM1Z5YkhNdlkyaGxZMnRwYmkxc2FXNXJjeWNzSUhCaGNtRnRjeWs3WEc0Z0tpQmhiV0ZrWlhWekxtRnRZV1JsZFhNdWNtVm1aWEpsYm1ObFgyUmhkR0V1ZFhKc2N5NWphR1ZqYTJsdVgyeHBibXR6TG1kbGRDaHdZWEpoYlhNcE8xeHVJQ29nWUdCZ1hHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nWVNCc2FYTjBJRzltSUc5d2RHbHZibk11SUZObFpTQjdRR3hwYm1zZ1FXMWhaR1YxYzMwZ0xseHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUdOc2FXVnVkRWxrSUhSb1pTQkJVRWtnYTJWNUlIVnpaV1FnZEc4Z1lYVjBhR1Z1ZEdsallYUmxJSFJvWlNCQlVFbGNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCamJHbGxiblJUWldOeVpYUWdkR2hsSUVGUVNTQnpaV055WlhRZ2RYTmxaQ0IwYnlCaGRYUm9aVzUwYVdOaGRHVmNiaUFxSUNCMGFHVWdRVkJKWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMDlpYW1WamRIMGdiRzluWjJWeUlIUm9aU0JnWTI5dWMyOXNaV0F0WTI5dGNHRjBhV0pzWlNCc2IyZG5aWElnZFhObFpDQjBieUJrWldKMVp5QmpZV3hzYzF4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJR3h2WjB4bGRtVnNJSFJvWlNCc2IyY2diR1YyWld3Z1ptOXlJSFJvWlNCamJHbGxiblFzSUdGMllXbHNZV0pzWlNCdmNIUnBiMjV6WEc0Z0tpQWdZWEpsSUdCa1pXSjFaMkFzSUdCM1lYSnVZQ3dnWVc1a0lHQnphV3hsYm5SZ0xpQkVaV1poZFd4MGN5QjBieUFuYzJsc1pXNTBKMXh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlHaHZjM1FnZEdobElHaHZjM1J1WVcxbElHOW1JSFJvWlNCelpYSjJaWElnUVZCSklHTmhiR3h6SUdGeVpTQnRZV1JsSUhSdlhHNGdLaUJBY0hKdmNHVnlkSGtnZTI1MWJXSmxjbjBnY0c5eWRDQjBhR1VnY0c5eWRDQjBhR1VnYzJWeWRtVnlJRUZRU1NCallXeHNjeUJoY21VZ2JXRmtaU0IwYjF4dUlDb2dRSEJ5YjNCbGNuUjVJSHRpYjI5c1pXRnVmU0J6YzJ3Z2QyVjBhR1Z5SUdGdUlGTlRUQ0J5WlhGMVpYTjBJR2x6SUcxaFpHVWdkRzhnZEdobElITmxjblpsY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJR04xYzNSdmJVRndjRWxrSUhSb1pTQmpkWE4wYjIwZ1FYQndJRWxFSUhSdklHSmxJSEJoYzNObFpDQnBiaUIwYUdVZ1ZYTmxjbHh1SUNvZ0lFRm5aVzUwSUhSdklIUm9aU0J6WlhKMlpYSmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCamRYTjBiMjFCY0hCV1pYSnphVzl1SUhSb1pTQmpkWE4wYjIwZ1FYQndJRlpsY25OcGIyNGdiblZ0WW1WeUlIUnZJR0psWEc0Z0tpQWdjR0Z6YzJWa0lHbHVJSFJvWlNCVmMyVnlJRUZuWlc1MElIUnZJSFJvWlNCelpYSjJaWEpjYmlBcUlFQndjbTl3WlhKMGVTQjdUMkpxWldOMGZTQm9kSFJ3SUhSb1pTQk9iMlJsTDBoVVZGQW9VeWt0WTI5dGNHRjBhV0pzWlNCamJHbGxiblFnZFhObFpDQjBieUJ0WVd0bFhHNGdLaUFnY21WeGRXVnpkSE5jYmlBcUlFQndjbTl3WlhKMGVTQjdiblZ0WW1WeWZTQjJaWEp6YVc5dUlGUm9aU0IyWlhKemFXOXVJRzltSUhSb2FYTWdRVkJKSUdOc2FXVnVkRnh1SUNvdlhHNWpiR0Z6Y3lCRGJHbGxiblFnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh2Y0hScGIyNXpJRDBnZTMwcElIdGNiaUFnSUNCdVpYY2dWbUZzYVdSaGRHOXlLQ2t1ZG1Gc2FXUmhkR1ZCYm1SSmJtbDBhV0ZzYVhwbEtIUm9hWE1zSUc5d2RHbHZibk1wTzF4dUlDQWdJSFJvYVhNdVlXTmpaWE56Vkc5clpXNGdQU0J1WlhjZ1FXTmpaWE56Vkc5clpXNG9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NTJaWEp6YVc5dUlEMGdjR3RuTG5abGNuTnBiMjQ3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1RXRnJaU0JoYmlCaGRYUm9aVzUwYVdOaGRHVmtJRWRGVkNCQlVFa2dZMkZzYkM1Y2JpQWdJQ3BjYmlBZ0lDb2dZR0JnYW5OY2JpQWdJQ29nWVcxaFpHVjFjeTVqYkdsbGJuUXVaMlYwS0NjdmRqSXZabTl2TDJKaGNpY3NJSHNnYzI5dFpUb2dKMlJoZEdFbklIMHBPMXh1SUNBZ0tpQmdZR0JjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIQmhkR2dnZEdobElHWjFiR3dnY0dGMGFDQnZaaUIwYUdVZ1FWQkpJR1Z1WkhCdmFXNTBYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmNHRnlZVzF6UFh0OVhTQjBhR1VnY1hWbGNua2djM1J5YVc1bklIQmhjbUZ0WlhSbGNuTmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlM0OFVtVnpjRzl1YzJVc1VtVnpjRzl1YzJWRmNuSnZjajU5SUdFZ1VISnZiV2x6WlZ4dUlDQWdLaTljYmlBZ1oyVjBLSEJoZEdnc0lIQmhjbUZ0Y3lBOUlIdDlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WeGRXVnpkQ2duUjBWVUp5d2djR0YwYUN3Z2NHRnlZVzF6S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk5ZV3RsSUdGdUlHRjFkR2hsYm5ScFkyRjBaV1FnVUU5VFZDQkJVRWtnWTJGc2JDNWNiaUFnSUNwY2JpQWdJQ29nWUdCZ2FuTmNiaUFnSUNvZ1lXMWhaR1YxY3k1amJHbGxiblF1Y0c5emRDZ25MM1l5TDJadmJ5OWlZWEluTENCN0lITnZiV1U2SUNka1lYUmhKeUI5S1R0Y2JpQWdJQ29nWUdCZ1hHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J3WVhSb0lIUm9aU0JtZFd4c0lIQmhkR2dnYjJZZ2RHaGxJRUZRU1NCbGJtUndiMmx1ZEZ4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXM0JoY21GdGN6MTdmVjBnZEdobElGQlBVMVFnY0dGeVlXMWxkR1Z5YzF4dUlDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxManhTWlhOd2IyNXpaU3hTWlhOd2IyNXpaVVZ5Y205eVBuMGdZU0JRY205dGFYTmxYRzRnSUNBcUwxeHVJQ0J3YjNOMEtIQmhkR2dzSUhCaGNtRnRjeUE5SUh0OUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ4ZFdWemRDZ25VRTlUVkNjc0lIQmhkR2dzSUhCaGNtRnRjeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1RXRnJaU0JoYmlCaGRYUm9aVzUwYVdOaGRHVmtJRVJGVEVWVVJTQkJVRWtnWTJGc2JDNWNiaUFnSUNwY2JpQWdJQ29nWUdCZ2FuTmNiaUFnSUNvZ1lXMWhaR1YxY3k1amJHbGxiblF1WkdWc1pYUmxLQ2N2ZGpJdlptOXZMMkpoY2ljc0lIc2djMjl0WlRvZ0oyUmhkR0VuSUgwcE8xeHVJQ0FnS2lCZ1lHQmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCaGRHZ2dkR2hsSUdaMWJHd2djR0YwYUNCdlppQjBhR1VnUVZCSklHVnVaSEJ2YVc1MFhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiY0dGeVlXMXpQWHQ5WFNCMGFHVWdjWFZsY25rZ2MzUnlhVzVuSUhCaGNtRnRaWFJsY25OY2JpQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaUzQ4VW1WemNHOXVjMlVzVW1WemNHOXVjMlZGY25KdmNqNTlJR0VnVUhKdmJXbHpaVnh1SUNBZ0tpOWNiaUFnWkdWc1pYUmxLSEJoZEdnc0lIQmhjbUZ0Y3lBOUlIdDlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WeGRXVnpkQ2duUkVWTVJWUkZKeXdnY0dGMGFDd2djR0Z5WVcxektUdGNiaUFnZlZ4dVhHNGdJQzh2SUZCU1QxUkZRMVJGUkZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJOWVd0bElHRnVJR0YxZEdobGJuUnBZMkYwWldRZ1FWQkpJR05oYkd3dVhHNGdJQ0FxWEc0Z0lDQXFJR0JnWUdwelhHNGdJQ0FxSUdGdFlXUmxkWE11WTJ4cFpXNTBMbU5oYkd3b0owZEZWQ2NzSUNjdmRqSXZabTl2TDJKaGNpY3NJSHNnYzI5dFpUb2dKMlJoZEdFbklIMHBPMXh1SUNBZ0tpQmdZR0JjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIWmxjbUlnZEdobElFaFVWRkFnYldWMGFHOWtMQ0JtYjNJZ1pYaGhiWEJzWlNCZ1IwVlVZQ0J2Y2lCZ1VFOVRWR0JjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIQmhkR2dnZEdobElHWjFiR3dnY0dGMGFDQnZaaUIwYUdVZ1FWQkpJR1Z1WkhCdmFXNTBYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmNHRnlZVzF6UFh0OVhTQjBhR1VnVUU5VFZDQndZWEpoYldWMFpYSnpYRzRnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJVdVBGSmxjM0J2Ym5ObExGSmxjM0J2Ym5ObFJYSnliM0krZlNCaElGQnliMjFwYzJWY2JpQWdJQ29nUUhCeWIzUmxZM1JsWkZ4dUlDQWdLaTljYmlBZ2NtVnhkV1Z6ZENoMlpYSmlMQ0J3WVhSb0xDQndZWEpoYlhNZ1BTQjdmU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1GalkyVnpjMVJ2YTJWdUxtSmxZWEpsY2xSdmEyVnVLSFJvYVhNcExuUm9aVzRvS0dKbFlYSmxjbFJ2YTJWdUtTQTlQaUI3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MWJtRjFkR2hsYm5ScFkyRjBaV1JTWlhGMVpYTjBLSFpsY21Jc0lIQmhkR2dzSUhCaGNtRnRjeXdnWW1WaGNtVnlWRzlyWlc0cE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeThnVUZKSlZrRlVSVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk5ZV3RsSUdGdWVTQnJhVzVrSUc5bUlFRlFTU0JqWVd4c0xDQmhkWFJvWlc1MGFXTmhkR1ZrSUc5eUlHNXZkRnh1SUNBZ0tseHVJQ0FnS2lCVmMyVmtJR0o1SUhSb1pTQXVaMlYwTENBdWNHOXpkQ0J0WlhSb2IyUnpJSFJ2SUcxaGEyVWdRVkJKSUdOaGJHeHpMbHh1SUNBZ0tseHVJQ0FnS2lCVFpYUnpJSFZ3SUdFZ2JtVjNJRkJ5YjIxcGMyVWdZVzVrSUhSb1pXNGdaWGhqZFhSbGN5QjBhR1VnUVZCSklHTmhiR3dzSUhSeWFXZG5aWEpwYm1jZ2RHaGxJRkJ5YjIxcGMyVmNiaUFnSUNvZ2RHOGdZbVVnWTJGc2JHVmtJSGRvWlc0Z2RHaGxJRUZRU1NCallXeHNJR1poYVd4eklHOXlJSE4xWTJObFpXUnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZG1WeVlpQjBhR1VnU0ZSVVVDQnRaWFJvYjJRc0lHWnZjaUJsZUdGdGNHeGxJR0JIUlZSZ0lHOXlJR0JRVDFOVVlGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY0dGMGFDQjBhR1VnWm5Wc2JDQndZWFJvSUc5bUlIUm9aU0JCVUVrZ1pXNWtjRzlwYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSEJoY21GdGN5QjBhR1VnY0dGeVlXMWxkR1Z5Y3lCMGJ5QndZWE56SUdsdUlIUm9aU0J4ZFdWeWVTQnZjaUJpYjJSNVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiWW1WaGNtVnlWRzlyWlc0OWJuVnNiRjBnZEdobElFSmxZWEpsY2xSdmEyVnVJR0Z6SUdkbGJtVnlZWFJsWkNCaWVTQjBhR1ZjYmlBZ0lDb2dJRUZqWTJWemMxUnZhMlZ1SUdOc1lYTnpYRzRnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJVdVBGSmxjM0J2Ym5ObExGSmxjM0J2Ym5ObFJYSnliM0krZlNCaElGQnliMjFwYzJWY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUhWdVlYVjBhR1Z1ZEdsallYUmxaRkpsY1hWbGMzUW9kbVZ5WWl3Z2NHRjBhQ3dnY0dGeVlXMXpMQ0JpWldGeVpYSlViMnRsYmlBOUlHNTFiR3dwSUh0Y2JpQWdJQ0JzWlhRZ2NtVnhkV1Z6ZENBOUlIUm9hWE11WW5WcGJHUlNaWEYxWlhOMEtIWmxjbUlzSUhCaGRHZ3NJSEJoY21GdGN5d2dZbVZoY21WeVZHOXJaVzRwTzF4dUlDQWdJSFJvYVhNdWJHOW5LSEpsY1hWbGMzUXBPMXh1SUNBZ0lHeGxkQ0JsYldsMGRHVnlJRDBnYm1WM0lFVjJaVzUwUlcxcGRIUmxjaWdwTzF4dUlDQWdJR3hsZENCd2NtOXRhWE5sSUQwZ2RHaHBjeTVpZFdsc1pGQnliMjFwYzJVb1pXMXBkSFJsY2lrN1hHNWNiaUFnSUNCMGFHbHpMbVY0WldOMWRHVW9jbVZ4ZFdWemRDd2daVzFwZEhSbGNpazdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyMXBjMlU3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FXTjBkV0ZzYkhrZ1pYaGxZM1YwWlhNZ2RHaGxJRUZRU1NCallXeHNMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbGNYVmxjM1I5SUhKbGNYVmxjM1FnZEdobElISmxjWFZsYzNRZ2RHOGdaWGhsWTNWMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTBWMlpXNTBSVzFwZEhSbGNuMGdaVzFwZEhSbGNpQjBhR1VnWlhabGJuUWdaVzFwZEhSbGNpQjBieUJ1YjNScFpua2diMllnWTJoaGJtZGxjMXh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdaWGhsWTNWMFpTaHlaWEYxWlhOMExDQmxiV2wwZEdWeUtTQjdYRzRnSUNBZ2JHVjBJR2gwZEhCZmNtVnhkV1Z6ZENBOUlIUm9hWE11YUhSMGNDNXlaWEYxWlhOMEtISmxjWFZsYzNRdWIzQjBhVzl1Y3lncEtUdGNiaUFnSUNCc1pYUWdiR2x6ZEdWdVpYSWdQU0J1WlhjZ1RHbHpkR1Z1WlhJb2NtVnhkV1Z6ZEN3Z1pXMXBkSFJsY2l3Z2RHaHBjeWs3WEc0Z0lDQWdhSFIwY0Y5eVpYRjFaWE4wTG05dUtDZHlaWE53YjI1elpTY3NJR3hwYzNSbGJtVnlMbTl1VW1WemNHOXVjMlV1WW1sdVpDaHNhWE4wWlc1bGNpa3BPMXh1SUNBZ0lHaDBkSEJmY21WeGRXVnpkQzV2YmlnblpYSnliM0luTENBZ0lDQnNhWE4wWlc1bGNpNXZia1Z5Y205eUxtSnBibVFvYkdsemRHVnVaWElwS1R0Y2JpQWdJQ0JvZEhSd1gzSmxjWFZsYzNRdWQzSnBkR1VvY21WeGRXVnpkQzVpYjJSNUtDa3BPMXh1SUNBZ0lHaDBkSEJmY21WeGRXVnpkQzVsYm1Rb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJDZFdsc1pITWdZU0JTWlhGMVpYTjBJRzlpYW1WamRDQjBieUJpWlNCMWMyVmtJR2x1SUhSb1pTQkJVRWtnWTJGc2JGeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkbVZ5WWlCMGFHVWdTRlJVVUNCdFpYUm9iMlFzSUdadmNpQmxlR0Z0Y0d4bElHQkhSVlJnSUc5eUlHQlFUMU5VWUZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjR0YwYUNCMGFHVWdablZzYkNCd1lYUm9JRzltSUhSb1pTQkJVRWtnWlc1a2NHOXBiblJjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIQmhjbUZ0Y3lCMGFHVWdjR0Z5WVcxbGRHVnljeUIwYnlCd1lYTnpJR2x1SUhSb1pTQnhkV1Z5ZVNCdmNpQmliMlI1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZbVZoY21WeVZHOXJaVzQ5Ym5Wc2JGMGdkR2hsSUVKbFlYSmxjbFJ2YTJWdUlHRnpJR2RsYm1WeVlYUmxaQ0JpZVNCMGFHVmNiaUFnSUNvZ0lFRmpZMlZ6YzFSdmEyVnVJR05zWVhOelhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFKbGNYVmxjM1I5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JpZFdsc1pGSmxjWFZsYzNRb2RtVnlZaXdnY0dGMGFDd2djR0Z5WVcxekxDQmlaV0Z5WlhKVWIydGxiaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVW1WeGRXVnpkQ2g3WEc0Z0lDQWdJQ0JvYjNOME9pQjBhR2x6TG1odmMzUXNYRzRnSUNBZ0lDQjJaWEppT2lCMlpYSmlMRnh1SUNBZ0lDQWdjR0YwYURvZ2NHRjBhQ3hjYmlBZ0lDQWdJSEJoY21GdGN6b2djR0Z5WVcxekxGeHVJQ0FnSUNBZ1ltVmhjbVZ5Vkc5clpXNDZJR0psWVhKbGNsUnZhMlZ1TEZ4dUlDQWdJQ0FnWTJ4cFpXNTBWbVZ5YzJsdmJqb2dkR2hwY3k1MlpYSnphVzl1TEZ4dUlDQWdJQ0FnYkdGdVozVmhaMlZXWlhKemFXOXVPaUJ3Y205alpYTnpMblpsY25OcGIyNXpMbTV2WkdVc1hHNGdJQ0FnSUNCaGNIQkpaRG9nZEdocGN5NWpkWE4wYjIxQmNIQkpaQ3hjYmlBZ0lDQWdJR0Z3Y0ZabGNuTnBiMjQ2SUhSb2FYTXVZM1Z6ZEc5dFFYQndWbVZ5YzJsdmJpeGNiaUFnSUNBZ0lIQnZjblE2SUhSb2FYTXVjRzl5ZEN4Y2JpQWdJQ0FnSUhOemJEb2dkR2hwY3k1emMyeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJDZFdsc1pITWdZU0JRY205dGFYTmxJSFJ2SUdKbElISmxkSFZ5Ym1Wa0lIUnZJSFJvWlNCQlVFa2dkWE5sY2x4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdDBlWEJsZlNCbGJXbDBkR1Z5SUhSb1pTQmxkbVZ1ZENCbGJXbDBkR1Z5SUhSdklHNXZkR2xtZVNCdlppQmphR0Z1WjJWelhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUdFZ2NISnZiV2x6WlZ4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWW5WcGJHUlFjbTl0YVhObEtHVnRhWFIwWlhJcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lDQWdaVzFwZEhSbGNpNXZiaWduY21WemIyeDJaU2NzSUhKbGMzQnZibk5sSUQwK0lISmxjMjlzZG1Vb2NtVnpjRzl1YzJVcEtUdGNiaUFnSUNBZ0lHVnRhWFIwWlhJdWIyNG9KM0psYW1WamRDY3NJR1Z5Y205eUlEMCtJSEpsYW1WamRDaGxjbkp2Y2lrcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVEc5bmN5QjBhR1VnY21WeGRXVnpkQ3dnZDJobGJpQnBiaUJrWldKMVp5QnRiMlJsWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNBZ2UxSmxjWFZsYzNSOUlISmxjWFZsYzNRZ2RHaGxJSEpsY1hWbGMzUWdiMkpxWldOMElIUnZJR3h2WjF4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnYkc5bktISmxjWFZsYzNRcElIdGNiaUFnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTDF4dUlDQWdJR2xtS0hSb2FYTXVaR1ZpZFdjb0tTa2dleUIwYUdsekxteHZaMmRsY2k1c2IyY29kWFJwYkM1cGJuTndaV04wS0hKbGNYVmxjM1FzSUdaaGJITmxMQ0J1ZFd4c0tTazdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRVpYUmxjbTFwYm1WeklHbG1JSFJvYVhNZ1kyeHBaVzUwSUdseklHbHVJR1JsWW5WbklHMXZaR1ZjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5YmlCN1ltOXZiR1ZoYm4xY2JpQWdJQ292WEc0Z0lHUmxZblZuS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxteHZaMHhsZG1Wc0lEMDlJQ2RrWldKMVp5YzdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUkdWMFpYSnRhVzVsY3lCcFppQjBhR2x6SUdOc2FXVnVkQ0JwY3lCcGJpQjNZWEp1SUc5eUlHUmxZblZuSUcxdlpHVmNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3WW05dmJHVmhibjFjYmlBZ0lDb3ZYRzRnSUhkaGNtNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Ykc5blRHVjJaV3dnUFQwZ0ozZGhjbTRuSUh4OElIUm9hWE11WkdWaWRXY29LVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JEYkdsbGJuUTdYRzRpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3p0QlFVRkJMRWxCUVVGQkxFOUJRVUVzUjBGQlFVTXNjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5CTEVsQlFVRkRMRXRCUVVFc1IwRkJRVVlzYzBKQlFVRXNRMEZCUVVNc1QwRkJRVHRCUVVWQkxFbEJRVUZGTEdGQlFVRXNSMEZCUVVnc2MwSkJRVUVzUTBGQlFVTXNUMEZCUVR0QlFVTkJMRWxCUVVGSExGTkJRVUVzUjBGQlFVb3NjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5CTEVsQlFVRkpMRkZCUVVFc1IwRkJRVXdzYzBKQlFVRXNRMEZCUVVNc1QwRkJRVHRCUVVOQkxFbEJRVUZMTEZWQlFVRXNSMEZCUVU0c2MwSkJRVUVzUTBGQlFVTXNUMEZCUVR0QlFVVkJMRWxCUVVGTkxGRkJRVUVzUjBGQlFWQXNjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVUUyUXl4VFFVRkJSQ3gxUWtGQlFWRXNRMEZCUVN4WFFVRkJRU3hEUVVGQkxFbEJRVUZCTEVOQlFVRXNRMEZCUVVNc1ZVRkJRU3hIUVVGQlJDeERRVUZCTEdkQ1FVRkJRU3hEUVVGQk8wRkJRVUVzVTBGQlFVVXNVVUZCUVVNc1EwRkJRU3h6UTBGQlFVUXNUMEZCUVN4M1FrRkJRVVVzVFVGQlFTeDFRa0ZCUVVFc1RVRkJRU3hEUVVGQlF5eFJRVUZCTEdGQlFVRkdMRU5CUVVFc2EwSkJRVUZCTEVOQlFVRXNaMEpCUVVGQkxFTkJRVUVzVjBGQlFVRXNRMEZCUVN4NVFrRkJRVU1zVFVGQlFTeEpRVUZCUkN4RFFVRkJMRU5CUVVGSExGZEJRVUVzUzBGQlFVWXNUVUZCUVN4SlFVRkJSQ3hEUVVGQkxFdEJRVUZETEUxQlFVRXNRMEZCUVVjc1UwRkJRU3h4UWtGQlFVb3NRMEZCUVN4TFFVRkJSQ3hQUVVGQkxFTkJRVUZETEVOQlFVRTdRVUZCUVN4VFFVRkJTeXhuUWtGQlFVTXNRMEZCUVN4RlFVRkJReXhEUVVGQkxGVkJRVUZFTEVOQlFVRXNXVUZCUVVNc1EwRkJRU3hoUVVGQlF5eFRRVUZCTzBGQlFVRXNVMEZCUVVNc2EwSkJRVUZhTEVOQlFVRXNSVUZCUVdFc1EwRkJRU3hoUVVGQlF5eERRVUZCTEUxQlFVRkJMRU5CUVVFc1IwRkJRVVFzUTBGQlFTeERRVUZCUlN4TlFVRkJMRVZCUVVGRUxFTkJRVUVzVlVGQlFWZ3NRMEZCUVN4SFFVRkJWU3hEUVVGQkxFTkJRVUZETEVOQlFVRXNSMEZCUVZnc1EwRkJRU3hEUVVGQllTeFZRVUZCTEVkQlFVRmlMRU5CUVVFc1EwRkJRV0VzVlVGQlFTeFJRVUZCWWl4RFFVRkJMRU5CUVVGakxGbEJRVUVzYTBKQlFVRmtMRU5CUVVFc1MwRkJRVUVzUTBGQlFTeERRVUZCWlN4UlFVRkJMRkZCUVVGRExFMUJRVUVzUTBGQlFVTXNZMEZCUVN4RFFVRkJjRUlzUTBGQlFTeEZRVUZCY1VJc1kwRkJRU3hEUVVGQmJFSXNRMEZCUVN4RFFVRkJiVUlzUjBGQlFTeEhRVUZCYmtJc1EwRkJRVHRCUVVGQkxGTkJRVUZ2UWl4aFFVRkJka0lzUTBGQlFTeEZRVUZCWVN4RFFVRkJMRVZCUVVGRExFTkJRVUVzVjBGQlFVUXNRMEZCUVN4SlFVRkJSQ3hwUWtGQlFTeERRVUZCV2l4RFFVRkJMRU5CUVVGUExGTkJRVUVzUlVGQlFVMHNRMEZCUVN4SFFVRkJReXhEUVVGQkxFbEJRVUZHTEdsQ1FVRkJMRU5CUVVGYUxFTkJRVUVzUlVGQlFXTXNRMEZCUVN4SFFVRkJTeXhOUVVGQkxFTkJRVUZETEdOQlFVRXNRMEZCUVhCQ0xFTkJRVUVzYVVKQlFVRnJRaXhSUVVGQkxGTkJRVUZzUWl4RFFVRkJPMEZCUVVFc1UwRkJRWEZDTEdWQlFVRlFMRU5CUVVFc1VVRkJRVlVzUTBGQlFTeEhRVUZCUXl4WlFVRkJMRU5CUVVGWUxFTkJRVUVzWjBOQlFVRmFMRTlCUVVFc1EwRkJRWE5DTEVOQlFVRXNTVUZCUVVFc1EwRkJRU3hIUVVGQlFTeERRVUZCTzBGQlFVRXNVMEZCUVVNc1lVRkJRVmdzUTBGQlFTeEZRVUZCUkN4RFFVRkJMRzlDUVVGQldDeFBRVUZCTEVOQlFVRlpMRU5CUVVFc1RVRkJRVUVzUTBGQlFTeFRRVUZCUVN4RFFVRkJMRTFCUVVGa0xFTkJRVUVzUjBGQlFXTXNRMEZCUVN4RFFVRkJWaXhOUVVGQkxFTkJRVUZ6UWl4WFFVRkJMR3RDUVVGQk1VSXNRMEZCUVN4UlFVRkJkMElzUTBGQlFTeEhRVUZCZUVJc1EwRkJRU3hEUVVGQk1rSXNTVUZCUVN4RFFVRkJZaXhEUVVGQkxFVkJRVUZFTEVOQlFVRXNaME5CUVVGWUxFOUJRVUVzUTBGQlFYTkNMRU5CUVVFc1ZVRkJRVUVzUTBGQlFTeFpRVUZCWWl4VFFVRkJMSGxGUVVGQlJTeERRVUZCTEVkQlFVRmxMRTFCUVVFc1IwRkJRVU1zVFVGQlFTeEZRVUZCWml4RFFVRkJPMEZCUlRkRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFXaERRU3hKUVdsRFRXZENMRTFCUVUwN1JVRkRWaXhUUVVGQlFTeFBRVUZCTEVWQlFUQkNPMGxCUVVFc1NVRkJaRU1zVDBGQlR5eEhRVUZCUXl4VFFVRkJMRU5CUVVGcVFpeE5RVUZCTEZGQlFVRnBRaXhUUVVGQkxGRkJRVUZETEZOQlFVRXNSMEZCUVVRc1UwRkJRU3hOUVVGSExFTkJRVU1zUTBGQlF6dEpRVUZCZUVJc1pVRkJRU3hQUVVGQmMwSXNUVUZCUVR0SlFVTjBRaXhKUVVGSlNTeHhRa0ZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRME1zY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hGUVVGRlNpeFBRVUZQTEVOQlFVTTdTVUZEY0VRc1NVRkJTU3hEUVVGRFN5eFhRVUZYTEVkQlFVY3NTVUZCU1VNc2QwSkJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEZUVNc1NVRkJTU3hEUVVGRFF5eFBRVUZQTEVkQlFVZERMRzFDUVVGSExFTkJRVU5FTEU5QlFVODdSVUZETlVJN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGVVJTeFBRVUZCWml4WlFVRkJMRU5CUVVGUExFMUJRVUU3U1VGQlFWSXNSMEZCUVR0SlFVRkJhMElzUzBGQlFTeEZRVlZCTEZOQlFVRkRMRWxCUVVsRExFbEJRVWtzUlVGQlpUdE5RVUZCTEVsQlFXSkRMRTFCUVUwc1IwRkJRVmdzVTBGQlFTeERRVUZCYWtJc1RVRkJRU3hSUVVGQmFVSXNVMEZCUVN4UlFVRkJReXhUUVVGQkxFZEJRVUZFTEZOQlFVRXNUVUZCUnl4RFFVRkRMRU5CUVVNN1RVRkRia0lzVDBGQlR5eEpRVUZKTEVOQlFVTlpMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVZHTEVsQlFVa3NSVUZCUlVNc1RVRkJUU3hEUVVGRE8wbEJRekZET3p0SlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCVkVVN1NVRkJRWEpDTEVkQlFVRTdTVUZCUVd0Q0xFdEJRVUVzUlVGVlFTeFRRVUZCU3l4TFFVRkxTQ3hKUVVGSkxFVkJRV1U3VFVGQlFTeEpRVUZpUXl4TlFVRk5MRWRCUVVGWUxGTkJRVUVzUTBGQlFXcENMRTFCUVVFc1VVRkJRV2xDTEZOQlFVRXNVVUZCUVVNc1UwRkJRU3hIUVVGQlJDeFRRVUZCTEUxQlFVY3NRMEZCUXl4RFFVRkRPMDFCUTNCQ0xFOUJRVThzU1VGQlNTeERRVUZEV1N4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRlJpeEpRVUZKTEVWQlFVVkRMRTFCUVUwc1EwRkJRenRKUVVNelF6czdTVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFWUkZPMGxCUVVGeVFpeEhRVUZCTzBsQlFVRnJRaXhMUVVGQkxFVkJWVUVzVTBGQlFVMHNVVUZCVDBvc1NVRkJTU3hGUVVGbE8wMUJRVUVzU1VGQllrTXNUVUZCVFN4SFFVRkJXQ3hUUVVGQkxFTkJRVUZxUWl4TlFVRkJMRkZCUVVGcFFpeFRRVUZCTEZGQlFVRkRMRk5CUVVFc1IwRkJRVVFzVTBGQlFTeE5RVUZITEVOQlFVTXNRMEZCUXp0TlFVTjBRaXhQUVVGUExFbEJRVWtzUTBGQlExa3NUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSVVlzU1VGQlNTeEZRVUZGUXl4TlFVRk5MRU5CUVVNN1NVRkROME03TzBsQlJVRTdPMGxCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJXRVU3U1VGQlFYSkNMRWRCUVVFN1NVRkJRV3RDTEV0QlFVRXNSVUZaUVN4VFFVRkJTU3hSUVVGUlJ5eEpRVUZKTEVWQlFVVk1MRWxCUVVrc1JVRkJaVHROUVVGQkxFbEJRVUZOTEV0QlFVRTdUVUZCUVN4SlFVRmlUQ3hOUVVGTkxFZEJRVUZZTEZOQlFVRXNRMEZCUVdwQ0xFMUJRVUVzVVVGQlFXbENMRk5CUVVFc1VVRkJRVU1zVTBGQlFTeEhRVUZCUkN4VFFVRkJMRTFCUVVjc1EwRkJReXhEUVVGRE8wMUJRemRDTEU5QlFVOHNTVUZCU1N4RFFVRkRTU3hYUVVGWExFTkJRVU5oTEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRME1zU1VGQlNTeERRVUZETEZWQlFVTkVMRmRCUVZjc1JVRkJTenRSUVVNNVJDeFBRVUZQUkN4TFFVRkpMRU5CUVVOSExITkNRVUZ6UWl4RFFVRkRTaXhKUVVGSkxFVkJRVVZNTEVsQlFVa3NSVUZCUlVNc1RVRkJUU3hGUVVGRlRTeFhRVUZYTEVOQlFVTTdUVUZEY2tVc1EwRkJReXhEUVVGRE8wbEJRMG83TzBsQlJVRTdPMGxCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZtUlR0SlFVRkJNMElzUjBGQlFUdEpRVUZCYTBJc1MwRkJRU3hGUVdkQ1FTeFRRVUZCVnl4MVFrRkJkVUpLTEVsQlFVa3NSVUZCUlV3c1NVRkJTU3hGUVVGRlF5eE5RVUZOTEVWQlFYTkNPMDFCUVVFc1NVRkJjRUpOTEZkQlFWY3NSMEZCUVdwQ0xGTkJRVUVzUTBGQlFXcENMRTFCUVVFc1VVRkJRV2xDTEZOQlFVRXNVVUZCUVVNc1UwRkJRU3hIUVVGQlJDeFRRVUZCTEUxQlFVY3NTVUZCU1R0TlFVTXpSQ3hKUVVGSldTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRVU3haUVVGWkxFTkJRVU5NTEVsQlFVa3NSVUZCUlV3c1NVRkJTU3hGUVVGRlF5eE5RVUZOTEVWQlFVVk5MRmRCUVZjc1EwRkJRenROUVVOb1JTeEpRVUZKTEVOQlFVTkpMRWRCUVVjc1EwRkJRMVFzVDBGQlR5eERRVUZETzAxQlEycENMRWxCUVVsVkxFOUJRVThzUjBGQlJ5eEpRVUZKUXl4clFrRkJXU3hEUVVGRExFTkJRVU03VFVGRGFFTXNTVUZCU1VNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlEwTXNXVUZCV1N4RFFVRkRTQ3hQUVVGUExFTkJRVU03VFVGRmVFTXNTVUZCU1N4RFFVRkRTU3hQUVVGUExFTkJRVU5rTEU5QlFVOHNSVUZCUlZVc1QwRkJUeXhEUVVGRE8wMUJRemxDTEU5QlFVOUZMRTlCUVU4N1NVRkRhRUk3TzBsQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGT1JUdEpRVUZCYkVNc1IwRkJRVHRKUVVGQmEwSXNTMEZCUVN4RlFVOUJMRk5CUVVGclFpeFJRVUZSWkN4UFFVRlBMRVZCUVVWVkxFOUJRVThzUlVGQlJUdE5RVU40UWl4SlFVRkpTeXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZEUXl4SlFVRkpMRU5CUVVOb1FpeFBRVUZQTEVOQlFVTkJMRTlCUVU4c1EwRkJRMklzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0TlFVTjJSQ3hKUVVGSk9FSXNVVUZCVVN4SFFVRkhMRWxCUVVsRExHOUNRVUZSTEVOQlFVTnNRaXhQUVVGUExFVkJRVVZWTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNN1RVRkRia1JMTEZsQlFWa3NRMEZCUTBrc1JVRkJSU3hEUVVGRExGVkJRVlVzUlVGQlJVWXNVVUZCVVN4RFFVRkRSeXhWUVVGVkxFTkJRVU5ETEVsQlFVa3NRMEZCUTBvc1VVRkJVU3hEUVVGRExFTkJRVU03VFVGREwwUkdMRmxCUVZrc1EwRkJRMGtzUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUzBZc1VVRkJVU3hEUVVGRFN5eFBRVUZQTEVOQlFVTkVMRWxCUVVrc1EwRkJRMG9zVVVGQlVTeERRVUZETEVOQlFVTTdUVUZETlVSR0xGbEJRVmtzUTBGQlExRXNTMEZCU3l4RFFVRkRka0lzVDBGQlR5eERRVUZEZDBJc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dE5RVU5zUTFRc1dVRkJXU3hEUVVGRFZTeEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTndRanM3U1VGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlZrVTdTVUZCUVM5RExFZEJRVUU3U1VGQlFXdENMRXRCUVVFc1JVRlhRU3hUUVVGQldTeGhRVUZoVEN4SlFVRkpMRVZCUVVWTUxFbEJRVWtzUlVGQlJVTXNUVUZCVFN4RlFVRkZUU3hYUVVGWExFVkJRVVU3VFVGRE5VTXNUMEZCVHl4SlFVRkpjVUlzYlVKQlFVOHNRMEZCUXp0UlFVTnFRa01zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUTBFc1NVRkJTVHRSUVVObWVFSXNTVUZCU1N4RlFVRkZRU3hKUVVGSk8xRkJRMVpNTEVsQlFVa3NSVUZCUlVFc1NVRkJTVHRSUVVOV1F5eE5RVUZOTEVWQlFVVkJMRTFCUVUwN1VVRkRaRTBzVjBGQlZ5eEZRVUZGUVN4WFFVRlhPMUZCUTNoQ2RVSXNZVUZCWVN4RlFVRkZMRWxCUVVrc1EwRkJRMnhETEU5QlFVODdVVUZETTBKdFF5eGxRVUZsTEVWQlFVVkRMRTlCUVU4c1EwRkJRME1zVVVGQlVTeERRVUZEUXl4SlFVRkpPMUZCUTNSRFF5eExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRReXhYUVVGWE8xRkJRM1pDUXl4VlFVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRFF5eG5Ra0ZCWjBJN1VVRkRha05ETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVOQkxFbEJRVWs3VVVGRFprTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJRMEU3VFVGRFdpeERRVUZETEVOQlFVTTdTVUZEU2pzN1NVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVNUZPMGxCUVVFMVJDeEhRVUZCTzBsQlFVRnJRaXhMUVVGQkxFVkJUMEVzVTBGQlFXbENMR0ZCUVdGSUxFOUJRVThzUlVGQlJUdE5RVU53UWl4UFFVRlBMRWxCUVVrMlFpeFBRVUZQTEVOQlFVTXNWVUZCUTBNc1QwRkJUeXhGUVVGRlF5eE5RVUZOTEVWQlFVczdVVUZEZEVNdlFpeFBRVUZQTEVOQlFVTlRMRVZCUVVVc1EwRkJReXhUUVVGVExFVkJRVVVzVlVGQlFYVkNMRkZCUVZFN1ZVRkJRU3hQUVVGSlJpeFBRVUZQTEVOQlFVTkZMRkZCUVZFc1EwRkJRenRSUVVGQkxFVkJRVU03VVVGRGNFUm9ReXhQUVVGUExFTkJRVU5UTEVWQlFVVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1ZVRkJRWGRDTEV0QlFVczdWVUZCUVN4UFFVRkpSaXhOUVVGTkxFTkJRVU5GTEV0QlFVc3NRMEZCUXp0UlFVRkJMRVZCUVVNN1RVRkRPVU1zUTBGQlF5eERRVUZETzBsQlEwbzdPMGxCUjBFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlRFVTdTVUZCUVdwRkxFZEJRVUU3U1VGQlFXdENMRXRCUVVFc1JVRk5RU3hUUVVGQllTeEpRVUZKVkN4UFFVRlBMRVZCUVVVN1RVRkRXRHROUVVOQkxFbEJRVWNzU1VGQlNTeERRVUZETkVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJUdFJRVUZGTEVsQlFVa3NRMEZCUTBNc1RVRkJUU3hEUVVGRGNFTXNSMEZCUnl4RFFVRkRjVU1zWjBKQlFVa3NRMEZCUTBNc1QwRkJUeXhEUVVGREwwTXNUMEZCVHl4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dE5RVUZGTzBsQlF6RkZPenRKUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZLUlR0SlFVRkJkRUlzUjBGQlFUdEpRVUZCYTBJc1MwRkJRU3hGUVV0QkxGTkJRVUZuUkN4TlFVRkJMRVZCUVZFN1RVRkRUaXhQUVVGUExFbEJRVWtzUTBGQlEwa3NVVUZCVVN4SlFVRkpMRTlCUVU4N1NVRkRha003TzBsQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVwRk8wbEJRVUYwUlN4SFFVRkJPMGxCUVVGclFpeExRVUZCTEVWQlMwRXNVMEZCUVhGRUxFdEJRVUVzUlVGQlR6dE5RVU5NTEU5QlFVOHNTVUZCU1N4RFFVRkRSQ3hSUVVGUkxFbEJRVWtzVFVGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUTBvc1MwRkJTeXhEUVVGRExFTkJRVU03U1VGRGFFUTdSVUZCUXp0QlFVRkJPMEZCUVVFc1NVRkJRVTBzVVVGQlFTeEhRVUZCUXl4UFFVRkJMR05CUjFscVJTeE5RVUZOTzBGQlFVRnJSU3hOUVVGQkxFTkJRVUZFTEU5QlFVRXNSMEZCUVVFc1QwRkJRU3hEUVVGQlJTeFBRVUZCSWl3aWFXZHViM0psVEdsemRDSTZXMTE5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/client/access_token.js":
/*!*****************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/client/access_token.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _events = _interopRequireDefault(__webpack_require__(/*! events */ \"events\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// The number of seconds before the token expires, when\n// we will already try to refresh it\nvar TOKEN_BUFFER = 10;\n\n/**\n  * A helper library to create and maintain the OAuth2 AccessTokens between\n  * requests. Keeps track of the expiry time and automatically tries to fetch\n  * a new token if needed.\n  *\n  * @property {string} accessToken the cached current access token (bearer)\n  * @property {number} expiresAt the aproximate time this token expires at\n  * @protected\n  */\nvar AccessToken = /*#__PURE__*/function () {\n  function AccessToken() {\n    _classCallCheck(this, AccessToken);\n    this.accessToken;\n    this.expiresAt;\n  }\n\n  // PROTECTED\n\n  /**\n   * Fetches or returns a cached bearer token. Used by the Client to get a\n   * token before making an API call.\n   *\n   * @param  {Client} client the Amadeus Client to make an API call with\n   * @return {Promise.<Response,ResponseError>} a Promise\n   * @protected\n   */\n  return _createClass(AccessToken, [{\n    key: \"bearerToken\",\n    value: function bearerToken(client) {\n      var emitter = new _events[\"default\"]();\n      var promise = this.promise(emitter);\n      this.emitOrLoadAccessToken(client, emitter);\n      return promise;\n    }\n\n    // PRIVATE\n\n    /**\n     * Builds a promise to be returned to the API user\n     *\n     * @param  {type} emitter the EventEmitter used to notify the Promise of\n     * @return {Promise} a promise\n     * @private\n     */\n  }, {\n    key: \"promise\",\n    value: function promise(emitter) {\n      return new Promise(function (resolve, reject) {\n        emitter.on('resolve', function (response) {\n          return resolve(response);\n        });\n        emitter.on('reject', function (error) {\n          return reject(error);\n        });\n      });\n    }\n\n    /**\n     * Checks if the token needs a refresh, if not emits the cached token,\n     * otherwise tries to load a new access token\n     *\n     * @param  {Client} client the Amadeus Client to make an API call with\n     * @param  {type} emitter the EventEmitter used to emit the token\n     * @private\n     */\n  }, {\n    key: \"emitOrLoadAccessToken\",\n    value: function emitOrLoadAccessToken(client, emitter) {\n      if (this.needsLoadOrRefresh()) {\n        this.loadAccessToken(client, emitter);\n      } else {\n        emitter.emit('resolve', this.accessToken);\n      }\n    }\n\n    /**\n     * Checks if the token needs a refresh or first load\n     *\n     * @return {boolean} wether the token needs a refresh\n     * @private\n     */\n  }, {\n    key: \"needsLoadOrRefresh\",\n    value: function needsLoadOrRefresh() {\n      return !this.accessToken || Date.now() + TOKEN_BUFFER > this.expiresAt;\n    }\n\n    /**\n     * Loads the access token using the client, emits the token when it's loaded\n     *\n     * @param  {Client} client the Amadeus Client to make an API call with\n     * @param  {type} emitter the EventEmitter used to emit the token\n     * @private\n     */\n  }, {\n    key: \"loadAccessToken\",\n    value: function loadAccessToken(client, emitter) {\n      var _this = this;\n      client.unauthenticatedRequest('POST', '/v1/security/oauth2/token', {\n        'grant_type': 'client_credentials',\n        'client_id': client.clientId,\n        'client_secret': client.clientSecret\n      }).then(function (response) {\n        _this.storeAccessToken(response);\n        _this.emitOrLoadAccessToken(client, emitter);\n      })[\"catch\"](function (error) {\n        emitter.emit('reject', error);\n      });\n    }\n\n    /**\n     * Stores a loaded access token, calculating the expiry date\n     *\n     * @param  {Response} response the response object received from the client\n     * @private\n     */\n  }, {\n    key: \"storeAccessToken\",\n    value: function storeAccessToken(response) {\n      this.accessToken = response.result['access_token'];\n      this.expiresAt = Date.now() + response.result['expires_in'] * 1000;\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = AccessToken;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/client/access_token.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/client/errors.js":
/*!***********************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/client/errors.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.UnknownError = exports.ServerError = exports.ResponseError = exports.ParserError = exports.NotFoundError = exports.NetworkError = exports.ClientError = exports.AuthenticationError = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * The error that is passed to the Promise when the API call fails.\n *\n * @param {Response} response the {@link Response} object containing the raw\n *  http response and the {@link Request} instance that made the API call.\n * @property {Response} response the {@link Response} object containing the raw\n *  http response and the {@link Request} instance that made the API call.\n * @property {string} code a unique code for this type of error. Options include\n *  `NetworkError`, `ParserError`, `ResponseError`, `ServerError`,\n *  `AuthenticationError`, `NotFoundError` and `UnknownError`\n *  from the  {@link Response}'s parsed data\n */\nvar ResponseError = exports.ResponseError = /*#__PURE__*/function () {\n  function ResponseError(response) {\n    _classCallCheck(this, ResponseError);\n    this.response = response;\n    this.determineDescription();\n  }\n\n  // PRIVATE\n  return _createClass(ResponseError, [{\n    key: \"determineDescription\",\n    value: function determineDescription() {\n      if (!this.response || !this.response.parsed) {\n        this.description = null;\n        return;\n      }\n      var result = this.response.result;\n      if (result && result.errors) {\n        this.description = result.errors;\n      } else if (result) {\n        this.description = result;\n      }\n      return;\n    }\n  }]);\n}(); // Protected\nvar NetworkError = exports.NetworkError = /*#__PURE__*/function (_ResponseError) {\n  function NetworkError() {\n    var _this;\n    _classCallCheck(this, NetworkError);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, NetworkError, [].concat(args));\n    _this.code = 'NetworkError';\n    return _this;\n  }\n  _inherits(NetworkError, _ResponseError);\n  return _createClass(NetworkError);\n}(ResponseError);\nvar ParserError = exports.ParserError = /*#__PURE__*/function (_ResponseError2) {\n  function ParserError() {\n    var _this2;\n    _classCallCheck(this, ParserError);\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    _this2 = _callSuper(this, ParserError, [].concat(args));\n    _this2.code = 'ParserError';\n    return _this2;\n  }\n  _inherits(ParserError, _ResponseError2);\n  return _createClass(ParserError);\n}(ResponseError);\nvar ServerError = exports.ServerError = /*#__PURE__*/function (_ResponseError3) {\n  function ServerError() {\n    var _this3;\n    _classCallCheck(this, ServerError);\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    _this3 = _callSuper(this, ServerError, [].concat(args));\n    _this3.code = 'ServerError';\n    return _this3;\n  }\n  _inherits(ServerError, _ResponseError3);\n  return _createClass(ServerError);\n}(ResponseError);\nvar ClientError = exports.ClientError = /*#__PURE__*/function (_ResponseError4) {\n  function ClientError() {\n    var _this4;\n    _classCallCheck(this, ClientError);\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    _this4 = _callSuper(this, ClientError, [].concat(args));\n    _this4.code = 'ClientError';\n    return _this4;\n  }\n  _inherits(ClientError, _ResponseError4);\n  return _createClass(ClientError);\n}(ResponseError);\nvar AuthenticationError = exports.AuthenticationError = /*#__PURE__*/function (_ResponseError5) {\n  function AuthenticationError() {\n    var _this5;\n    _classCallCheck(this, AuthenticationError);\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    _this5 = _callSuper(this, AuthenticationError, [].concat(args));\n    _this5.code = 'AuthenticationError';\n    return _this5;\n  }\n  _inherits(AuthenticationError, _ResponseError5);\n  return _createClass(AuthenticationError);\n}(ResponseError);\nvar NotFoundError = exports.NotFoundError = /*#__PURE__*/function (_ResponseError6) {\n  function NotFoundError() {\n    var _this6;\n    _classCallCheck(this, NotFoundError);\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    _this6 = _callSuper(this, NotFoundError, [].concat(args));\n    _this6.code = 'NotFoundError';\n    return _this6;\n  }\n  _inherits(NotFoundError, _ResponseError6);\n  return _createClass(NotFoundError);\n}(ResponseError);\nvar UnknownError = exports.UnknownError = /*#__PURE__*/function (_ResponseError7) {\n  function UnknownError() {\n    var _this7;\n    _classCallCheck(this, UnknownError);\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    _this7 = _callSuper(this, UnknownError, [].concat(args));\n    _this7.code = 'UnknownError';\n    return _this7;\n  }\n  _inherits(UnknownError, _ResponseError7);\n  return _createClass(UnknownError);\n}(ResponseError);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9jbGllbnQvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLG9CQUFvQixHQUFHLG1CQUFtQixHQUFHLHFCQUFxQixHQUFHLG1CQUFtQixHQUFHLHFCQUFxQixHQUFHLG9CQUFvQixHQUFHLG1CQUFtQixHQUFHLDJCQUEyQjtBQUMzTCxzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUywrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3UTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVUsY0FBYyxnQkFBZ0I7QUFDbkQsMkJBQTJCLGVBQWU7QUFDMUMsY0FBYyxVQUFVLGNBQWMsZ0JBQWdCO0FBQ3RELDJCQUEyQixlQUFlO0FBQzFDLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0EsZUFBZSxlQUFlO0FBQzlCO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxJQUFJO0FBQ0wsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsYUFBYTtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLGVBQWU7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxlQUFlO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsZUFBZTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDBCQUEwQiwyQkFBMkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLGVBQWU7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxlQUFlO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsZUFBZTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDJDQUEyQyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdHJhdmVsLWFnZW5jeS8uL25vZGVfbW9kdWxlcy9hbWFkZXVzL2xpYi9hbWFkZXVzL2NsaWVudC9lcnJvcnMuanM/YzA0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVW5rbm93bkVycm9yID0gZXhwb3J0cy5TZXJ2ZXJFcnJvciA9IGV4cG9ydHMuUmVzcG9uc2VFcnJvciA9IGV4cG9ydHMuUGFyc2VyRXJyb3IgPSBleHBvcnRzLk5vdEZvdW5kRXJyb3IgPSBleHBvcnRzLk5ldHdvcmtFcnJvciA9IGV4cG9ydHMuQ2xpZW50RXJyb3IgPSBleHBvcnRzLkF1dGhlbnRpY2F0aW9uRXJyb3IgPSB2b2lkIDA7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogVGhlIGVycm9yIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBQcm9taXNlIHdoZW4gdGhlIEFQSSBjYWxsIGZhaWxzLlxuICpcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc3BvbnNlIHRoZSB7QGxpbmsgUmVzcG9uc2V9IG9iamVjdCBjb250YWluaW5nIHRoZSByYXdcbiAqICBodHRwIHJlc3BvbnNlIGFuZCB0aGUge0BsaW5rIFJlcXVlc3R9IGluc3RhbmNlIHRoYXQgbWFkZSB0aGUgQVBJIGNhbGwuXG4gKiBAcHJvcGVydHkge1Jlc3BvbnNlfSByZXNwb25zZSB0aGUge0BsaW5rIFJlc3BvbnNlfSBvYmplY3QgY29udGFpbmluZyB0aGUgcmF3XG4gKiAgaHR0cCByZXNwb25zZSBhbmQgdGhlIHtAbGluayBSZXF1ZXN0fSBpbnN0YW5jZSB0aGF0IG1hZGUgdGhlIEFQSSBjYWxsLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvZGUgYSB1bmlxdWUgY29kZSBmb3IgdGhpcyB0eXBlIG9mIGVycm9yLiBPcHRpb25zIGluY2x1ZGVcbiAqICBgTmV0d29ya0Vycm9yYCwgYFBhcnNlckVycm9yYCwgYFJlc3BvbnNlRXJyb3JgLCBgU2VydmVyRXJyb3JgLFxuICogIGBBdXRoZW50aWNhdGlvbkVycm9yYCwgYE5vdEZvdW5kRXJyb3JgIGFuZCBgVW5rbm93bkVycm9yYFxuICogIGZyb20gdGhlICB7QGxpbmsgUmVzcG9uc2V9J3MgcGFyc2VkIGRhdGFcbiAqL1xudmFyIFJlc3BvbnNlRXJyb3IgPSBleHBvcnRzLlJlc3BvbnNlRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZXNwb25zZUVycm9yKHJlc3BvbnNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNlRXJyb3IpO1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLmRldGVybWluZURlc2NyaXB0aW9uKCk7XG4gIH1cblxuICAvLyBQUklWQVRFXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoUmVzcG9uc2VFcnJvciwgW3tcbiAgICBrZXk6IFwiZGV0ZXJtaW5lRGVzY3JpcHRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGV0ZXJtaW5lRGVzY3JpcHRpb24oKSB7XG4gICAgICBpZiAoIXRoaXMucmVzcG9uc2UgfHwgIXRoaXMucmVzcG9uc2UucGFyc2VkKSB7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5yZXNwb25zZS5yZXN1bHQ7XG4gICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5lcnJvcnMpIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHJlc3VsdC5lcnJvcnM7XG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdCkge1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfV0pO1xufSgpOyAvLyBQcm90ZWN0ZWRcbnZhciBOZXR3b3JrRXJyb3IgPSBleHBvcnRzLk5ldHdvcmtFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Jlc3BvbnNlRXJyb3IpIHtcbiAgZnVuY3Rpb24gTmV0d29ya0Vycm9yKCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmV0d29ya0Vycm9yKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBOZXR3b3JrRXJyb3IsIFtdLmNvbmNhdChhcmdzKSk7XG4gICAgX3RoaXMuY29kZSA9ICdOZXR3b3JrRXJyb3InO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoTmV0d29ya0Vycm9yLCBfUmVzcG9uc2VFcnJvcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTmV0d29ya0Vycm9yKTtcbn0oUmVzcG9uc2VFcnJvcik7XG52YXIgUGFyc2VyRXJyb3IgPSBleHBvcnRzLlBhcnNlckVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVzcG9uc2VFcnJvcjIpIHtcbiAgZnVuY3Rpb24gUGFyc2VyRXJyb3IoKSB7XG4gICAgdmFyIF90aGlzMjtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFyc2VyRXJyb3IpO1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICBfdGhpczIgPSBfY2FsbFN1cGVyKHRoaXMsIFBhcnNlckVycm9yLCBbXS5jb25jYXQoYXJncykpO1xuICAgIF90aGlzMi5jb2RlID0gJ1BhcnNlckVycm9yJztcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG4gIF9pbmhlcml0cyhQYXJzZXJFcnJvciwgX1Jlc3BvbnNlRXJyb3IyKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhQYXJzZXJFcnJvcik7XG59KFJlc3BvbnNlRXJyb3IpO1xudmFyIFNlcnZlckVycm9yID0gZXhwb3J0cy5TZXJ2ZXJFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Jlc3BvbnNlRXJyb3IzKSB7XG4gIGZ1bmN0aW9uIFNlcnZlckVycm9yKCkge1xuICAgIHZhciBfdGhpczM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlcnZlckVycm9yKTtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG4gICAgX3RoaXMzID0gX2NhbGxTdXBlcih0aGlzLCBTZXJ2ZXJFcnJvciwgW10uY29uY2F0KGFyZ3MpKTtcbiAgICBfdGhpczMuY29kZSA9ICdTZXJ2ZXJFcnJvcic7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuICBfaW5oZXJpdHMoU2VydmVyRXJyb3IsIF9SZXNwb25zZUVycm9yMyk7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoU2VydmVyRXJyb3IpO1xufShSZXNwb25zZUVycm9yKTtcbnZhciBDbGllbnRFcnJvciA9IGV4cG9ydHMuQ2xpZW50RXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZXNwb25zZUVycm9yNCkge1xuICBmdW5jdGlvbiBDbGllbnRFcnJvcigpIHtcbiAgICB2YXIgX3RoaXM0O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGllbnRFcnJvcik7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuICAgIF90aGlzNCA9IF9jYWxsU3VwZXIodGhpcywgQ2xpZW50RXJyb3IsIFtdLmNvbmNhdChhcmdzKSk7XG4gICAgX3RoaXM0LmNvZGUgPSAnQ2xpZW50RXJyb3InO1xuICAgIHJldHVybiBfdGhpczQ7XG4gIH1cbiAgX2luaGVyaXRzKENsaWVudEVycm9yLCBfUmVzcG9uc2VFcnJvcjQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENsaWVudEVycm9yKTtcbn0oUmVzcG9uc2VFcnJvcik7XG52YXIgQXV0aGVudGljYXRpb25FcnJvciA9IGV4cG9ydHMuQXV0aGVudGljYXRpb25FcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Jlc3BvbnNlRXJyb3I1KSB7XG4gIGZ1bmN0aW9uIEF1dGhlbnRpY2F0aW9uRXJyb3IoKSB7XG4gICAgdmFyIF90aGlzNTtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXV0aGVudGljYXRpb25FcnJvcik7XG4gICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgfVxuICAgIF90aGlzNSA9IF9jYWxsU3VwZXIodGhpcywgQXV0aGVudGljYXRpb25FcnJvciwgW10uY29uY2F0KGFyZ3MpKTtcbiAgICBfdGhpczUuY29kZSA9ICdBdXRoZW50aWNhdGlvbkVycm9yJztcbiAgICByZXR1cm4gX3RoaXM1O1xuICB9XG4gIF9pbmhlcml0cyhBdXRoZW50aWNhdGlvbkVycm9yLCBfUmVzcG9uc2VFcnJvcjUpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKEF1dGhlbnRpY2F0aW9uRXJyb3IpO1xufShSZXNwb25zZUVycm9yKTtcbnZhciBOb3RGb3VuZEVycm9yID0gZXhwb3J0cy5Ob3RGb3VuZEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVzcG9uc2VFcnJvcjYpIHtcbiAgZnVuY3Rpb24gTm90Rm91bmRFcnJvcigpIHtcbiAgICB2YXIgX3RoaXM2O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb3RGb3VuZEVycm9yKTtcbiAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICB9XG4gICAgX3RoaXM2ID0gX2NhbGxTdXBlcih0aGlzLCBOb3RGb3VuZEVycm9yLCBbXS5jb25jYXQoYXJncykpO1xuICAgIF90aGlzNi5jb2RlID0gJ05vdEZvdW5kRXJyb3InO1xuICAgIHJldHVybiBfdGhpczY7XG4gIH1cbiAgX2luaGVyaXRzKE5vdEZvdW5kRXJyb3IsIF9SZXNwb25zZUVycm9yNik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTm90Rm91bmRFcnJvcik7XG59KFJlc3BvbnNlRXJyb3IpO1xudmFyIFVua25vd25FcnJvciA9IGV4cG9ydHMuVW5rbm93bkVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVzcG9uc2VFcnJvcjcpIHtcbiAgZnVuY3Rpb24gVW5rbm93bkVycm9yKCkge1xuICAgIHZhciBfdGhpczc7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVua25vd25FcnJvcik7XG4gICAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgfVxuICAgIF90aGlzNyA9IF9jYWxsU3VwZXIodGhpcywgVW5rbm93bkVycm9yLCBbXS5jb25jYXQoYXJncykpO1xuICAgIF90aGlzNy5jb2RlID0gJ1Vua25vd25FcnJvcic7XG4gICAgcmV0dXJuIF90aGlzNztcbiAgfVxuICBfaW5oZXJpdHMoVW5rbm93bkVycm9yLCBfUmVzcG9uc2VFcnJvcjcpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFVua25vd25FcnJvcik7XG59KFJlc3BvbnNlRXJyb3IpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpTWlhOd2IyNXpaVVZ5Y205eUlpd2laWGh3YjNKMGN5SXNJbkpsYzNCdmJuTmxJaXdpWDJOc1lYTnpRMkZzYkVOb1pXTnJJaXdpWkdWMFpYSnRhVzVsUkdWelkzSnBjSFJwYjI0aUxDSmZZM0psWVhSbFEyeGhjM01pTENKclpYa2lMQ0oyWVd4MVpTSXNJbkJoY25ObFpDSXNJbVJsYzJOeWFYQjBhVzl1SWl3aWNtVnpkV3gwSWl3aVpYSnliM0p6SWl3aVRtVjBkMjl5YTBWeWNtOXlJaXdpWDFKbGMzQnZibk5sUlhKeWIzSWlMQ0pmZEdocGN5SXNJbDlzWlc0aUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0poY21keklpd2lRWEp5WVhraUxDSmZhMlY1SWl3aVgyTmhiR3hUZFhCbGNpSXNJbU52Ym1OaGRDSXNJbU52WkdVaUxDSmZhVzVvWlhKcGRITWlMQ0pRWVhKelpYSkZjbkp2Y2lJc0lsOVNaWE53YjI1elpVVnljbTl5TWlJc0lsOTBhR2x6TWlJc0lsOXNaVzR5SWl3aVgydGxlVElpTENKVFpYSjJaWEpGY25KdmNpSXNJbDlTWlhOd2IyNXpaVVZ5Y205eU15SXNJbDkwYUdsek15SXNJbDlzWlc0eklpd2lYMnRsZVRNaUxDSkRiR2xsYm5SRmNuSnZjaUlzSWw5U1pYTndiMjV6WlVWeWNtOXlOQ0lzSWw5MGFHbHpOQ0lzSWw5c1pXNDBJaXdpWDJ0bGVUUWlMQ0pCZFhSb1pXNTBhV05oZEdsdmJrVnljbTl5SWl3aVgxSmxjM0J2Ym5ObFJYSnliM0kxSWl3aVgzUm9hWE0xSWl3aVgyeGxialVpTENKZmEyVjVOU0lzSWs1dmRFWnZkVzVrUlhKeWIzSWlMQ0pmVW1WemNHOXVjMlZGY25KdmNqWWlMQ0pmZEdocGN6WWlMQ0pmYkdWdU5pSXNJbDlyWlhrMklpd2lWVzVyYm05M2JrVnljbTl5SWl3aVgxSmxjM0J2Ym5ObFJYSnliM0kzSWl3aVgzUm9hWE0zSWl3aVgyeGxiamNpTENKZmEyVjVOeUpkTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTloYldGa1pYVnpMMk5zYVdWdWRDOWxjbkp2Y25NdWFuTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWEc0dktpcGNiaUFxSUZSb1pTQmxjbkp2Y2lCMGFHRjBJR2x6SUhCaGMzTmxaQ0IwYnlCMGFHVWdVSEp2YldselpTQjNhR1Z1SUhSb1pTQkJVRWtnWTJGc2JDQm1ZV2xzY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFKbGMzQnZibk5sZlNCeVpYTndiMjV6WlNCMGFHVWdlMEJzYVc1cklGSmxjM0J2Ym5ObGZTQnZZbXBsWTNRZ1kyOXVkR0ZwYm1sdVp5QjBhR1VnY21GM1hHNGdLaUFnYUhSMGNDQnlaWE53YjI1elpTQmhibVFnZEdobElIdEFiR2x1YXlCU1pYRjFaWE4wZlNCcGJuTjBZVzVqWlNCMGFHRjBJRzFoWkdVZ2RHaGxJRUZRU1NCallXeHNMbHh1SUNvZ1FIQnliM0JsY25SNUlIdFNaWE53YjI1elpYMGdjbVZ6Y0c5dWMyVWdkR2hsSUh0QWJHbHVheUJTWlhOd2IyNXpaWDBnYjJKcVpXTjBJR052Ym5SaGFXNXBibWNnZEdobElISmhkMXh1SUNvZ0lHaDBkSEFnY21WemNHOXVjMlVnWVc1a0lIUm9aU0I3UUd4cGJtc2dVbVZ4ZFdWemRIMGdhVzV6ZEdGdVkyVWdkR2hoZENCdFlXUmxJSFJvWlNCQlVFa2dZMkZzYkM1Y2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0JqYjJSbElHRWdkVzVwY1hWbElHTnZaR1VnWm05eUlIUm9hWE1nZEhsd1pTQnZaaUJsY25KdmNpNGdUM0IwYVc5dWN5QnBibU5zZFdSbFhHNGdLaUFnWUU1bGRIZHZjbXRGY25KdmNtQXNJR0JRWVhKelpYSkZjbkp2Y21Bc0lHQlNaWE53YjI1elpVVnljbTl5WUN3Z1lGTmxjblpsY2tWeWNtOXlZQ3hjYmlBcUlDQmdRWFYwYUdWdWRHbGpZWFJwYjI1RmNuSnZjbUFzSUdCT2IzUkdiM1Z1WkVWeWNtOXlZQ0JoYm1RZ1lGVnVhMjV2ZDI1RmNuSnZjbUJjYmlBcUlDQm1jbTl0SUhSb1pTQWdlMEJzYVc1cklGSmxjM0J2Ym5ObGZTZHpJSEJoY25ObFpDQmtZWFJoWEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCU1pYTndiMjV6WlVWeWNtOXlJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQjBhR2x6TG5KbGMzQnZibk5sSUQwZ2NtVnpjRzl1YzJVN1hHNGdJQ0FnZEdocGN5NWtaWFJsY20xcGJtVkVaWE5qY21sd2RHbHZiaWdwTzF4dUlDQjlYRzVjYmlBZ0x5OGdVRkpKVmtGVVJWeHVYRzRnSUdSbGRHVnliV2x1WlVSbGMyTnlhWEIwYVc5dUtDa2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NXlaWE53YjI1elpTQjhmQ0FoZEdocGN5NXlaWE53YjI1elpTNXdZWEp6WldRcElIdGNiaUFnSUNBZ0lIUm9hWE11WkdWelkzSnBjSFJwYjI0Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdkR2hwY3k1eVpYTndiMjV6WlM1eVpYTjFiSFE3WEc0Z0lDQWdhV1lnS0hKbGMzVnNkQ0FtSmlCeVpYTjFiSFF1WlhKeWIzSnpLU0I3SUhSb2FYTXVaR1Z6WTNKcGNIUnBiMjRnUFNCeVpYTjFiSFF1WlhKeWIzSnpPeUI5WEc0Z0lDQWdaV3h6WlNCcFppQW9jbVZ6ZFd4MEtTQjdJSFJvYVhNdVpHVnpZM0pwY0hScGIyNGdQU0J5WlhOMWJIUTdJSDFjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYm4xY2JseHVMeThnVUhKdmRHVmpkR1ZrWEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJPWlhSM2IzSnJSWEp5YjNJZ1pYaDBaVzVrY3lCU1pYTndiMjV6WlVWeWNtOXlJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9MaTR1WVhKbmN5a2dlMXh1SUNBZ0lITjFjR1Z5S0M0dUxtRnlaM01wTzF4dUlDQWdJSFJvYVhNdVkyOWtaU0E5SUNkT1pYUjNiM0pyUlhKeWIzSW5PMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlFZWEp6WlhKRmNuSnZjaUJsZUhSbGJtUnpJRkpsYzNCdmJuTmxSWEp5YjNJZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lndUxpNWhjbWR6S1NCN1hHNGdJQ0FnYzNWd1pYSW9MaTR1WVhKbmN5azdYRzRnSUNBZ2RHaHBjeTVqYjJSbElEMGdKMUJoY25ObGNrVnljbTl5Snp0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVTJWeWRtVnlSWEp5YjNJZ1pYaDBaVzVrY3lCU1pYTndiMjV6WlVWeWNtOXlJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9MaTR1WVhKbmN5a2dlMXh1SUNBZ0lITjFjR1Z5S0M0dUxtRnlaM01wTzF4dUlDQWdJSFJvYVhNdVkyOWtaU0E5SUNkVFpYSjJaWEpGY25KdmNpYzdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklFTnNhV1Z1ZEVWeWNtOXlJR1Y0ZEdWdVpITWdVbVZ6Y0c5dWMyVkZjbkp2Y2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0M0dUxtRnlaM01wSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3VMaTVoY21kektUdGNiaUFnSUNCMGFHbHpMbU52WkdVZ1BTQW5RMnhwWlc1MFJYSnliM0luTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJCZFhSb1pXNTBhV05oZEdsdmJrVnljbTl5SUdWNGRHVnVaSE1nVW1WemNHOXVjMlZGY25KdmNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDNHVMbUZ5WjNNcElIdGNiaUFnSUNCemRYQmxjaWd1TGk1aGNtZHpLVHRjYmlBZ0lDQjBhR2x6TG1OdlpHVWdQU0FuUVhWMGFHVnVkR2xqWVhScGIyNUZjbkp2Y2ljN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUU1dmRFWnZkVzVrUlhKeWIzSWdaWGgwWlc1a2N5QlNaWE53YjI1elpVVnljbTl5SUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvTGk0dVlYSm5jeWtnZTF4dUlDQWdJSE4xY0dWeUtDNHVMbUZ5WjNNcE8xeHVJQ0FnSUhSb2FYTXVZMjlrWlNBOUlDZE9iM1JHYjNWdVpFVnljbTl5Snp0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVlc1cmJtOTNia1Z5Y205eUlHVjRkR1Z1WkhNZ1VtVnpjRzl1YzJWRmNuSnZjaUI3WEc0Z0lHTnZibk4wY25WamRHOXlLQzR1TG1GeVozTXBJSHRjYmlBZ0lDQnpkWEJsY2lndUxpNWhjbWR6S1R0Y2JpQWdJQ0IwYUdsekxtTnZaR1VnUFNBblZXNXJibTkzYmtWeWNtOXlKenRjYmlBZ2ZWeHVmVnh1SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN096czdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJXRUVzU1VGWllVRXNZVUZCWVN4SFFVRkJReXhQUVVGQkxFTkJRVUZFTEdGQlFVRTdSVUZEZUVJc1UwRkJRVUVzWTBGQldVVXNVVUZCVVN4RlFVRkZPMGxCUVVGRExHVkJRVUVzVDBGQlFVZ3NZVUZCUVR0SlFVTndRaXhKUVVGSkxFTkJRVU5GTEZGQlFWRXNSMEZCUjBFc1VVRkJVVHRKUVVONFFpeEpRVUZKTEVOQlFVTkZMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdSVUZETjBJN08wVkJSVUU3UlVGQlFTeFBRVUZCUXl4WlFVRkJMRU5CUVVGTUxHRkJRVUU3U1VGQlFVMHNSMEZCUVR0SlFVRkJReXhMUVVGQkxFVkJSVUVzVTBGQlFVZ3NjVUpCUVVFc1JVRkJkVUk3VFVGRGNrSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRMFlzVVVGQlVTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRRU3hSUVVGUkxFTkJRVU5OTEUxQlFVMHNSVUZCUlR0UlFVTXpReXhKUVVGSkxFTkJRVU5ETEZkQlFWY3NSMEZCUnl4SlFVRkpPMUZCUTNaQ08wMUJRMFk3VFVGRFFTeEpRVUZKUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRFVpeFJRVUZSTEVOQlFVTlJMRTFCUVUwN1RVRkRha01zU1VGQlNVRXNUVUZCVFN4SlFVRkpRU3hOUVVGTkxFTkJRVU5ETEUxQlFVMHNSVUZCUlR0UlFVRkZMRWxCUVVrc1EwRkJRMFlzVjBGQlZ5eEhRVUZIUXl4TlFVRk5MRU5CUVVORExFMUJRVTA3VFVGQlJTeERRVUZETEUxQlF6ZEVMRWxCUVVsRUxFMUJRVTBzUlVGQlJUdFJRVUZGTEVsQlFVa3NRMEZCUTBRc1YwRkJWeXhIUVVGSFF5eE5RVUZOTzAxQlFVVTdUVUZET1VNN1NVRkRSanRGUVVGRE8wRkJRVUVzUzBGSFNEdEJRVUZCTEVsQlJXRkZMRmxCUVZrc1IwRkJRVmdzVDBGQlFTeERRVUZCVnl4WlFVRkJMREJDUVVGQlF5eGpRVUZCTzBWQlEzWkNMRk5CUVVGRUxHRkJRVUVzUlVGQmNVSTdTVUZCUVN4SlFVRkJSU3hMUVVGQk8wbEJRVUZZTEdWQlFVRXNUMEZCUVZNc1dVRkJRVHRKUVVGQkxGTkJRVUZITEVsQlFVRXNSMEZCUVVNc1UwRkJRU3hEUVVGQlF5eE5RVUZCTEVWQlFVNURMRWxCUVVrc1QwRkJRVU1zUzBGQlFTeERRVUZCU2l4SlFVRkJMRWRCUVVGTExFbEJRVUVzVFVGQlFVRXNTVUZCUVN4SFFVRkJUQ3hKUVVGQkxFVkJRVUZMTEVsQlFVRTdUVUZCU2tZc1NVRkJTU3hEUVVGQlJTeEpRVUZCTEVsQlFVRktMRk5CUVVFc1EwRkJRVWtzU1VGQlFUdEpRVUZCTzBsQlEycENUaXhMUVVGQkxFZEJRVUZQTEZWQlFVRXNUMEZCUVZRc1dVRkJRU3hMUVVGQlZTeE5RVUZCTEVOQlFWTktMRWxCUVVrN1NVRkRZa29zUzBGQlFTeERRVUZMVXl4SlFVRkpMRWRCUVVjc1kwRkJZenRKUVVGRExFOUJRVUZVTEV0QlFVRTdSVUZETjBJN1JVRkJRMVVzVTBGQlFTeERRVUZCV2l4WlFVRkJMRVZCUVVGRExHTkJRVUU3UlVGQlFTeFBRVUZCVWl4WlFVRkJMRU5CUVVGUExGbEJRVUU3UVVGQlFTeEZRVW9yUWxvc1lVRkJZVHRCUVVGQkxFbEJUMnhEZVVJc1YwRkJWeXhIUVVGQmVFSXNUMEZCUVN4RFFVRkJkMElzVjBGQlFTd3dRa0ZCUVVNc1pVRkJRVHRGUVVOMFFpeFRRVUZCUkN4WlFVRkJMRVZCUVhGQ08wbEJRVUVzU1VGQlFVVXNUVUZCUVR0SlFVRkJlRUlzWlVGQlFTeFBRVUZCYzBJc1YwRkJRVHRKUVVGQkxGTkJRVUZITEV0QlFVRXNSMEZCUVZvc1UwRkJRU3hEUVVGQlF5eE5RVUZCTEVWQlFVNURMRWxCUVVrc1QwRkJRVU1zUzBGQlFTeERRVUZCVXl4TFFVRkJMRWRCUVVGRExFdEJRVUVzVFVGQlFVRXNTMEZCUVN4SFFVRkJSQ3hMUVVGQkxFVkJRVUZETEV0QlFVRTdUVUZCU2xnc1NVRkJTU3hEUVVGQlZ5eExRVUZCTEVsQlFVRmlMRk5CUVVFc1EwRkJRV0VzUzBGQlFUdEpRVUZCTzBsQlEycENSaXhOUVVGQkxFZEJRVUZPTEZWQlFVRXNUMEZCUVVrc1YwRkJRU3hMUVVGQlNDeE5RVUZCTEVOQlFWTktMRWxCUVVrN1NVRkRZbE1zVFVGQlFTeERRVUZMU2l4SlFVRkpMRWRCUVVjc1lVRkJZVHRKUVVGRExFOUJRVUZKTEUxQlFVRTdSVUZETlVJN1JVRkJRMGdzVTBGQlFTeERRVUZCUXl4WFFVRkJMRVZCUVVGRExHVkJRVUU3UlVGQlFTeFBRVUZCY2tJc1dVRkJRU3hEUVVGQmIwSXNWMEZCUVR0QlFVRkJMRVZCU2poQ2VrSXNZVUZCWVR0QlFVRkJMRWxCVDJwRE9FSXNWMEZCVnl4SFFVRkJOMElzVDBGQlFTeERRVUZCTmtJc1YwRkJRU3d3UWtGQlFVTXNaVUZCUVR0RlFVTjBRaXhUUVVGQlJDeFpRVUZCTEVWQlFYRkNPMGxCUVVFc1NVRkJRVVVzVFVGQlFUdEpRVUZCTjBJc1pVRkJRU3hQUVVGQk1rSXNWMEZCUVR0SlFVRkJMRk5CUVVGSExFdEJRVUVzUjBGQlFXcENMRk5CUVVFc1EwRkJRVU1zVFVGQlFTeEZRVUZPUXl4SlFVRkpMRTlCUVVGRExFdEJRVUVzUTBGQlFXTXNTMEZCUVN4SFFVRkJReXhMUVVGQkxFMUJRVUZCTEV0QlFVRXNSMEZCUVVRc1MwRkJRU3hGUVVGQlF5eExRVUZCTzAxQlFVcG9RaXhKUVVGSkxFTkJRVUZuUWl4TFFVRkJMRWxCUVVGc1FpeFRRVUZCTEVOQlFVRnJRaXhMUVVGQk8wbEJRVUU3U1VGRGFrSkdMRTFCUVVFc1IwRkJRVmdzVlVGQlFTeFBRVUZCVXl4WFFVRkJMRXRCUVVGU0xFMUJRVUVzUTBGQlUwb3NTVUZCU1R0SlFVTmlZeXhOUVVGQkxFTkJRVXRVTEVsQlFVa3NSMEZCUnl4aFFVRmhPMGxCUVVNc1QwRkJRVk1zVFVGQlFUdEZRVU0xUWp0RlFVRkRVaXhUUVVGQkxFTkJRVUZOTEZkQlFVRXNSVUZCUVVNc1pVRkJRVHRGUVVGQkxFOUJRVUV4UWl4WlFVRkJMRU5CUVVGNVFpeFhRVUZCTzBGQlFVRXNSVUZLT0VJNVFpeGhRVUZoTzBGQlFVRXNTVUZQYWtOdFF5eFhRVUZYTEVkQlFVRnNReXhQUVVGQkxFTkJRVUZyUXl4WFFVRkJMREJDUVVGQlF5eGxRVUZCTzBWQlEzUkNMRk5CUVVGRUxGbEJRVUVzUlVGQmNVSTdTVUZCUVN4SlFVRkJSU3hOUVVGQk8wbEJRVUZzUXl4bFFVRkJMRTlCUVVGblF5eFhRVUZCTzBsQlFVRXNVMEZCUVVjc1MwRkJRU3hIUVVGQmRFSXNVMEZCUVN4RFFVRkJReXhOUVVGQkxFVkJRVTVETEVsQlFVa3NUMEZCUVVNc1MwRkJRU3hEUVVGQmJVSXNTMEZCUVN4SFFVRkJReXhMUVVGQkxFMUJRVUZCTEV0QlFVRXNSMEZCUVVRc1MwRkJRU3hGUVVGQlF5eExRVUZCTzAxQlFVcHlRaXhKUVVGSkxFTkJRVUZ4UWl4TFFVRkJMRWxCUVVGMlFpeFRRVUZCTEVOQlFVRjFRaXhMUVVGQk8wbEJRVUU3U1VGRGFrSkdMRTFCUVVFc1IwRkJRV2hDTEZWQlFVRXNUMEZCUVdNc1YwRkJRU3hMUVVGQllpeE5RVUZCTEVOQlFWTktMRWxCUVVrN1NVRkRZbTFDTEUxQlFVRXNRMEZCUzJRc1NVRkJTU3hIUVVGSExHRkJRV0U3U1VGQlF5eFBRVUZCWXl4TlFVRkJPMFZCUXpWQ08wVkJRVU5pTEZOQlFVRXNRMEZCUVZjc1YwRkJRU3hGUVVGQlF5eGxRVUZCTzBWQlFVRXNUMEZCUVM5Q0xGbEJRVUVzUTBGQlFUaENMRmRCUVVFN1FVRkJRU3hGUVVvNFFtNURMR0ZCUVdFN1FVRkJRU3hKUVU5cVEzZERMRzFDUVVGdFFpeEhRVUZCZGtNc1QwRkJRU3hEUVVGQmRVTXNiVUpCUVVFc01FSkJRVUZETEdWQlFVRTdSVUZET1VJc1UwRkJRVVFzYjBKQlFVRXNSVUZCY1VJN1NVRkJRU3hKUVVGQlJTeE5RVUZCTzBsQlFVRjJReXhsUVVGQkxFOUJRVUZ4UXl4dFFrRkJRVHRKUVVGQkxGTkJRVUZITEV0QlFVRXNSMEZCUVROQ0xGTkJRVUVzUTBGQlFVTXNUVUZCUVN4RlFVRk9ReXhKUVVGSkxFOUJRVUZETEV0QlFVRXNRMEZCUVhkQ0xFdEJRVUVzUjBGQlFVTXNTMEZCUVN4TlFVRkJRU3hMUVVGQkxFZEJRVUZFTEV0QlFVRXNSVUZCUVVNc1MwRkJRVHROUVVGS01VSXNTVUZCU1N4RFFVRkJNRUlzUzBGQlFTeEpRVUZCTlVJc1UwRkJRU3hEUVVGQk5FSXNTMEZCUVR0SlFVRkJPMGxCUTJwQ1JpeE5RVUZCTEVkQlFVRnlRaXhWUVVGQkxFOUJRVUZ0UWl4dFFrRkJRU3hMUVVGQmJFSXNUVUZCUVN4RFFVRlRTaXhKUVVGSk8wbEJRMkozUWl4TlFVRkJMRU5CUVV0dVFpeEpRVUZKTEVkQlFVY3NjVUpCUVhGQ08wbEJRVU1zVDBGQlFXMUNMRTFCUVVFN1JVRkRjRU03UlVGQlEyeENMRk5CUVVFc1EwRkJRV2RDTEcxQ1FVRkJMRVZCUVVGRExHVkJRVUU3UlVGQlFTeFBRVUZCY0VNc1dVRkJRU3hEUVVGQmJVTXNiVUpCUVVFN1FVRkJRU3hGUVVwelEzaERMR0ZCUVdFN1FVRkJRU3hKUVU5NlF6WkRMR0ZCUVdFc1IwRkJRVFZETEU5QlFVRXNRMEZCUVRSRExHRkJRVUVzTUVKQlFVRkRMR1ZCUVVFN1JVRkRlRUlzVTBGQlFVUXNZMEZCUVN4RlFVRnhRanRKUVVGQkxFbEJRVUZGTEUxQlFVRTdTVUZCUVRWRExHVkJRVUVzVDBGQlFUQkRMR0ZCUVVFN1NVRkJRU3hUUVVGQlJ5eExRVUZCTEVkQlFVRm9ReXhUUVVGQkxFTkJRVUZETEUxQlFVRXNSVUZCVGtNc1NVRkJTU3hQUVVGQlF5eExRVUZCTEVOQlFVRTJRaXhMUVVGQkxFZEJRVUZETEV0QlFVRXNUVUZCUVVFc1MwRkJRU3hIUVVGQlJDeExRVUZCTEVWQlFVRkRMRXRCUVVFN1RVRkJTaTlDTEVsQlFVa3NRMEZCUVN0Q0xFdEJRVUVzU1VGQlFXcERMRk5CUVVFc1EwRkJRV2xETEV0QlFVRTdTVUZCUVR0SlFVTnFRa1lzVFVGQlFTeEhRVUZCTVVJc1ZVRkJRU3hQUVVGQmQwSXNZVUZCUVN4TFFVRkJka0lzVFVGQlFTeERRVUZUU2l4SlFVRkpPMGxCUTJJMlFpeE5RVUZCTEVOQlFVdDRRaXhKUVVGSkxFZEJRVWNzWlVGQlpUdEpRVUZETEU5QlFVRjNRaXhOUVVGQk8wVkJRemxDTzBWQlFVTjJRaXhUUVVGQkxFTkJRVUZ4UWl4aFFVRkJMRVZCUVVGRExHVkJRVUU3UlVGQlFTeFBRVUZCZWtNc1dVRkJRU3hEUVVGQmQwTXNZVUZCUVR0QlFVRkJMRVZCU21kRE4wTXNZVUZCWVR0QlFVRkJMRWxCVDI1RGEwUXNXVUZCV1N4SFFVRkJha1FzVDBGQlFTeERRVUZCYVVRc1dVRkJRU3d3UWtGQlFVTXNaVUZCUVR0RlFVTjJRaXhUUVVGQlJDeGhRVUZCTEVWQlFYRkNPMGxCUVVFc1NVRkJRVVVzVFVGQlFUdEpRVUZCYWtRc1pVRkJRU3hQUVVGQkswTXNXVUZCUVR0SlFVRkJMRk5CUVVGSExFdEJRVUVzUjBGQlFYSkRMRk5CUVVFc1EwRkJRVU1zVFVGQlFTeEZRVUZPUXl4SlFVRkpMRTlCUVVGRExFdEJRVUVzUTBGQlFXdERMRXRCUVVFc1IwRkJRVU1zUzBGQlFTeE5RVUZCUVN4TFFVRkJMRWRCUVVGRUxFdEJRVUVzUlVGQlFVTXNTMEZCUVR0TlFVRktjRU1zU1VGQlNTeERRVUZCYjBNc1MwRkJRU3hKUVVGQmRFTXNVMEZCUVN4RFFVRkJjME1zUzBGQlFUdEpRVUZCTzBsQlEycENSaXhOUVVGQkxFZEJRVUV2UWl4VlFVRkJMRTlCUVVFMlFpeFpRVUZCTEV0QlFVRTFRaXhOUVVGQkxFTkJRVk5LTEVsQlFVazdTVUZEWW10RExFMUJRVUVzUTBGQlN6ZENMRWxCUVVrc1IwRkJSeXhqUVVGak8wbEJRVU1zVDBGQlFUWkNMRTFCUVVFN1JVRkROMEk3UlVGQlF6VkNMRk5CUVVFc1EwRkJRVEJDTEZsQlFVRXNSVUZCUVVNc1pVRkJRVHRGUVVGQkxFOUJRVUU1UXl4WlFVRkJMRU5CUVVFMlF5eFpRVUZCTzBGQlFVRXNSVUZLSzBKc1JDeGhRVUZoSWl3aWFXZHViM0psVEdsemRDSTZXMTE5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/client/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/client/listener.js":
/*!*************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/client/listener.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _response = _interopRequireDefault(__webpack_require__(/*! ./response */ \"(rsc)/./node_modules/amadeus/lib/amadeus/client/response.js\"));\nvar _util = _interopRequireDefault(__webpack_require__(/*! util */ \"util\"));\nvar _errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/amadeus/lib/amadeus/client/errors.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Listen to changes in the HTTP request and build Response/ResponseError\n * objects accordingly.\n *\n * @param {Request} request the request object used to make the call\n * @param {EventEmitter} emitter a Node event emitter\n * @param {Client} client the client instance to log results to\n * @protected\n */\nvar Listener = /*#__PURE__*/function () {\n  function Listener(request, emitter, client) {\n    _classCallCheck(this, Listener);\n    this.request = request;\n    this.emitter = emitter;\n    this.client = client;\n  }\n\n  // PROTECTED\n\n  /**\n   * Listens to various events on the http_response object, listening for data,\n   * connections closing for bad reasons, and the end of the response.\n   *\n   * Used by the Client when making an API call.\n   *\n   * @param  {Object} http_response a Node http response object\n   * @protected\n   */\n  return _createClass(Listener, [{\n    key: \"onResponse\",\n    value: function onResponse(http_response) {\n      var response = new _response[\"default\"](http_response, this.request);\n      http_response.on('data', response.addChunk.bind(response));\n      http_response.on('end', this.onEnd(response).bind(this));\n      http_response.on('close', this.onNetworkError(response).bind(this));\n      http_response.on('error', this.onNetworkError(response).bind(this));\n    }\n\n    /**\n     * Listens to a network error when making an API call.\n     *\n     * Used by the Client when making an API call.\n     *\n     * @param  {Object} http_response a Node http response object\n     * @protected\n     */\n  }, {\n    key: \"onError\",\n    value: function onError(http_response) {\n      var response = new _response[\"default\"](http_response, this.request);\n      this.onNetworkError(response)();\n    }\n\n    // PRIVATE\n\n    /**\n     * When the connection ends, check if the response can be parsed or not and\n     * act accordingly.\n     *\n     * @param  {Response} response\n     */\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(response) {\n      var _this = this;\n      return function () {\n        response.parse();\n        if (response.success()) {\n          _this.onSuccess(response);\n        } else {\n          _this.onFail(response);\n        }\n      };\n    }\n\n    /**\n     * When the response was successful, resolve the promise and return the\n     * response object\n     *\n     * @param  {Response} response\n     */\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess(response) {\n      this.log(response);\n      this.emitter.emit('resolve', response);\n    }\n\n    /**\n     * When the connection was not successful, determine the reason and resolve\n     * the promise accordingly.\n     *\n     * @param  {Response} response\n     */\n  }, {\n    key: \"onFail\",\n    value: function onFail(response) {\n      var Error = this.errorFor(response);\n      var error = new Error(response);\n      this.log(response, error);\n      this.emitter.emit('reject', error);\n    }\n\n    /**\n     * Find the right error for the given response.\n     *\n     * @param {Response} reponse\n     * @returns {ResponseError}\n     */\n  }, {\n    key: \"errorFor\",\n    value: function errorFor(_ref) {\n      var statusCode = _ref.statusCode,\n        parsed = _ref.parsed;\n      var error = null;\n      if (statusCode >= 500) {\n        error = _errors.ServerError;\n      } else if (statusCode === 401) {\n        error = _errors.AuthenticationError;\n      } else if (statusCode === 404) {\n        error = _errors.NotFoundError;\n      } else if (statusCode >= 400) {\n        error = _errors.ClientError;\n      } else if (!parsed) {\n        error = _errors.ParserError;\n      } else {\n        error = _errors.UnknownError;\n      }\n      return error;\n    }\n\n    /**\n     * When the connection ran into a network error, reject the promise with a\n     * NetworkError.\n     *\n     * @param  {Response} response\n     */\n  }, {\n    key: \"onNetworkError\",\n    value: function onNetworkError(response) {\n      var _this2 = this;\n      return function () {\n        response.parse();\n        var error = new _errors.NetworkError(response);\n        _this2.log(response, error);\n        _this2.emitter.emit('reject', error);\n      };\n    }\n\n    /**\n     * Logs the response, when in debug mode\n     *\n     * @param  {Response} response the response object to log\n     * @private\n     */\n  }, {\n    key: \"log\",\n    value: function log(response, error) {\n      if (this.client.debug()) {\n        /* istanbul ignore next */\n        this.client.logger.log(_util[\"default\"].inspect(response, false, null));\n      }\n      if (!this.client.debug() && this.client.warn() && error) {\n        /* istanbul ignore next */\n        this.client.logger.log('Amadeus', error.code, error.description);\n      }\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Listener;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVzcG9uc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl91dGlsIiwiX2Vycm9ycyIsImUiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsIm8iLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsImkiLCJfdG9QcmltaXRpdmUiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJTdHJpbmciLCJOdW1iZXIiLCJMaXN0ZW5lciIsInJlcXVlc3QiLCJlbWl0dGVyIiwiY2xpZW50IiwidmFsdWUiLCJvblJlc3BvbnNlIiwiaHR0cF9yZXNwb25zZSIsInJlc3BvbnNlIiwiUmVzcG9uc2UiLCJvbiIsImFkZENodW5rIiwiYmluZCIsIm9uRW5kIiwib25OZXR3b3JrRXJyb3IiLCJvbkVycm9yIiwiX3RoaXMiLCJwYXJzZSIsInN1Y2Nlc3MiLCJvblN1Y2Nlc3MiLCJvbkZhaWwiLCJsb2ciLCJlbWl0IiwiRXJyb3IiLCJlcnJvckZvciIsImVycm9yIiwiX3JlZiIsInN0YXR1c0NvZGUiLCJwYXJzZWQiLCJTZXJ2ZXJFcnJvciIsIkF1dGhlbnRpY2F0aW9uRXJyb3IiLCJOb3RGb3VuZEVycm9yIiwiQ2xpZW50RXJyb3IiLCJQYXJzZXJFcnJvciIsIlVua25vd25FcnJvciIsIl90aGlzMiIsIk5ldHdvcmtFcnJvciIsImRlYnVnIiwibG9nZ2VyIiwidXRpbCIsImluc3BlY3QiLCJ3YXJuIiwiY29kZSIsImRlc2NyaXB0aW9uIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL2NsaWVudC9saXN0ZW5lci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVzcG9uc2UgZnJvbSAnLi9yZXNwb25zZSc7XG5pbXBvcnQgdXRpbCAgICAgZnJvbSAndXRpbCc7XG5cbmltcG9ydCB7XG4gIFNlcnZlckVycm9yLFxuICBOb3RGb3VuZEVycm9yLFxuICBDbGllbnRFcnJvcixcbiAgUGFyc2VyRXJyb3IsXG4gIFVua25vd25FcnJvcixcbiAgTmV0d29ya0Vycm9yLFxuICBBdXRoZW50aWNhdGlvbkVycm9yXG59IGZyb20gJy4vZXJyb3JzJztcblxuXG4vKipcbiAqIExpc3RlbiB0byBjaGFuZ2VzIGluIHRoZSBIVFRQIHJlcXVlc3QgYW5kIGJ1aWxkIFJlc3BvbnNlL1Jlc3BvbnNlRXJyb3JcbiAqIG9iamVjdHMgYWNjb3JkaW5nbHkuXG4gKlxuICogQHBhcmFtIHtSZXF1ZXN0fSByZXF1ZXN0IHRoZSByZXF1ZXN0IG9iamVjdCB1c2VkIHRvIG1ha2UgdGhlIGNhbGxcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIGEgTm9kZSBldmVudCBlbWl0dGVyXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50IHRoZSBjbGllbnQgaW5zdGFuY2UgdG8gbG9nIHJlc3VsdHMgdG9cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuY2xhc3MgTGlzdGVuZXIge1xuICBjb25zdHJ1Y3RvcihyZXF1ZXN0LCBlbWl0dGVyLCBjbGllbnQpIHtcbiAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHRoaXMuZW1pdHRlciA9IGVtaXR0ZXI7XG4gICAgdGhpcy5jbGllbnQgID0gY2xpZW50O1xuICB9XG5cbiAgLy8gUFJPVEVDVEVEXG5cblxuICAvKipcbiAgICogTGlzdGVucyB0byB2YXJpb3VzIGV2ZW50cyBvbiB0aGUgaHR0cF9yZXNwb25zZSBvYmplY3QsIGxpc3RlbmluZyBmb3IgZGF0YSxcbiAgICogY29ubmVjdGlvbnMgY2xvc2luZyBmb3IgYmFkIHJlYXNvbnMsIGFuZCB0aGUgZW5kIG9mIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogVXNlZCBieSB0aGUgQ2xpZW50IHdoZW4gbWFraW5nIGFuIEFQSSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGh0dHBfcmVzcG9uc2UgYSBOb2RlIGh0dHAgcmVzcG9uc2Ugb2JqZWN0XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIG9uUmVzcG9uc2UoaHR0cF9yZXNwb25zZSkge1xuICAgIGxldCByZXNwb25zZSA9IG5ldyBSZXNwb25zZShodHRwX3Jlc3BvbnNlLCB0aGlzLnJlcXVlc3QpO1xuXG4gICAgaHR0cF9yZXNwb25zZS5vbignZGF0YScsICByZXNwb25zZS5hZGRDaHVuay5iaW5kKHJlc3BvbnNlKSk7XG4gICAgaHR0cF9yZXNwb25zZS5vbignZW5kJywgICB0aGlzLm9uRW5kKHJlc3BvbnNlKS5iaW5kKHRoaXMpKTtcbiAgICBodHRwX3Jlc3BvbnNlLm9uKCdjbG9zZScsIHRoaXMub25OZXR3b3JrRXJyb3IocmVzcG9uc2UpLmJpbmQodGhpcykpO1xuICAgIGh0dHBfcmVzcG9uc2Uub24oJ2Vycm9yJywgdGhpcy5vbk5ldHdvcmtFcnJvcihyZXNwb25zZSkuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVucyB0byBhIG5ldHdvcmsgZXJyb3Igd2hlbiBtYWtpbmcgYW4gQVBJIGNhbGwuXG4gICAqXG4gICAqIFVzZWQgYnkgdGhlIENsaWVudCB3aGVuIG1ha2luZyBhbiBBUEkgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBodHRwX3Jlc3BvbnNlIGEgTm9kZSBodHRwIHJlc3BvbnNlIG9iamVjdFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuXG4gIG9uRXJyb3IoaHR0cF9yZXNwb25zZSkge1xuICAgIGxldCByZXNwb25zZSA9IG5ldyBSZXNwb25zZShodHRwX3Jlc3BvbnNlLCB0aGlzLnJlcXVlc3QpO1xuICAgIHRoaXMub25OZXR3b3JrRXJyb3IocmVzcG9uc2UpKCk7XG4gIH1cblxuICAvLyBQUklWQVRFXG5cblxuICAvKipcbiAgICogV2hlbiB0aGUgY29ubmVjdGlvbiBlbmRzLCBjaGVjayBpZiB0aGUgcmVzcG9uc2UgY2FuIGJlIHBhcnNlZCBvciBub3QgYW5kXG4gICAqIGFjdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogQHBhcmFtICB7UmVzcG9uc2V9IHJlc3BvbnNlXG4gICAqL1xuICBvbkVuZChyZXNwb25zZSkge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZXNwb25zZS5wYXJzZSgpO1xuICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MoKSkgeyB0aGlzLm9uU3VjY2VzcyhyZXNwb25zZSk7IH1cbiAgICAgIGVsc2UgeyB0aGlzLm9uRmFpbChyZXNwb25zZSk7ICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSByZXNwb25zZSB3YXMgc3VjY2Vzc2Z1bCwgcmVzb2x2ZSB0aGUgcHJvbWlzZSBhbmQgcmV0dXJuIHRoZVxuICAgKiByZXNwb25zZSBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtICB7UmVzcG9uc2V9IHJlc3BvbnNlXG4gICAqL1xuICBvblN1Y2Nlc3MocmVzcG9uc2UpIHtcbiAgICB0aGlzLmxvZyhyZXNwb25zZSk7XG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoJ3Jlc29sdmUnLCByZXNwb25zZSk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiB0aGUgY29ubmVjdGlvbiB3YXMgbm90IHN1Y2Nlc3NmdWwsIGRldGVybWluZSB0aGUgcmVhc29uIGFuZCByZXNvbHZlXG4gICAqIHRoZSBwcm9taXNlIGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBAcGFyYW0gIHtSZXNwb25zZX0gcmVzcG9uc2VcbiAgICovXG4gIG9uRmFpbChyZXNwb25zZSkge1xuICAgIGxldCBFcnJvciA9IHRoaXMuZXJyb3JGb3IocmVzcG9uc2UpO1xuICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihyZXNwb25zZSk7XG4gICAgdGhpcy5sb2cocmVzcG9uc2UsIGVycm9yKTtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgncmVqZWN0JywgZXJyb3IpO1xuICB9XG5cblxuICAvKipcbiAgICogRmluZCB0aGUgcmlnaHQgZXJyb3IgZm9yIHRoZSBnaXZlbiByZXNwb25zZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZXNwb25zZX0gcmVwb25zZVxuICAgKiBAcmV0dXJucyB7UmVzcG9uc2VFcnJvcn1cbiAgICovXG4gIGVycm9yRm9yKHtzdGF0dXNDb2RlLCBwYXJzZWR9KSB7XG4gICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICBpZiAoc3RhdHVzQ29kZSA+PSA1MDApIHsgZXJyb3IgPSBTZXJ2ZXJFcnJvcjsgfVxuICAgIGVsc2UgaWYgKHN0YXR1c0NvZGUgPT09IDQwMSkgeyBlcnJvciA9IEF1dGhlbnRpY2F0aW9uRXJyb3I7IH1cbiAgICBlbHNlIGlmIChzdGF0dXNDb2RlID09PSA0MDQpIHsgZXJyb3IgPSBOb3RGb3VuZEVycm9yOyB9XG4gICAgZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA0MDApIHsgZXJyb3IgPSBDbGllbnRFcnJvcjsgfVxuICAgIGVsc2UgaWYgKCFwYXJzZWQpIHsgZXJyb3IgPSBQYXJzZXJFcnJvcjsgfVxuICAgIGVsc2UgeyBlcnJvciA9IFVua25vd25FcnJvcjsgfVxuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBjb25uZWN0aW9uIHJhbiBpbnRvIGEgbmV0d29yayBlcnJvciwgcmVqZWN0IHRoZSBwcm9taXNlIHdpdGggYVxuICAgKiBOZXR3b3JrRXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSAge1Jlc3BvbnNlfSByZXNwb25zZVxuICAgKi9cbiAgb25OZXR3b3JrRXJyb3IocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcmVzcG9uc2UucGFyc2UoKTtcbiAgICAgIGxldCBlcnJvciA9IG5ldyBOZXR3b3JrRXJyb3IocmVzcG9uc2UpO1xuICAgICAgdGhpcy5sb2cocmVzcG9uc2UsIGVycm9yKTtcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdyZWplY3QnLCBlcnJvcik7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIHRoZSByZXNwb25zZSwgd2hlbiBpbiBkZWJ1ZyBtb2RlXG4gICAqXG4gICAqIEBwYXJhbSAge1Jlc3BvbnNlfSByZXNwb25zZSB0aGUgcmVzcG9uc2Ugb2JqZWN0IHRvIGxvZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbG9nKHJlc3BvbnNlLCBlcnJvcikge1xuICAgIGlmICh0aGlzLmNsaWVudC5kZWJ1ZygpKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhpcy5jbGllbnQubG9nZ2VyLmxvZyh1dGlsLmluc3BlY3QocmVzcG9uc2UsIGZhbHNlLCBudWxsKSk7XG4gICAgfVxuICAgIGlmICghdGhpcy5jbGllbnQuZGVidWcoKSAmJiB0aGlzLmNsaWVudC53YXJuKCkgJiYgZXJyb3IpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aGlzLmNsaWVudC5sb2dnZXIubG9nKCdBbWFkZXVzJywgZXJyb3IuY29kZSwgZXJyb3IuZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMaXN0ZW5lcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBUWtCLFNBQUFELHVCQUFBSSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxRQUFBQyxDQUFBLHNDQUFBRCxPQUFBLHdCQUFBRSxNQUFBLHVCQUFBQSxNQUFBLENBQUFDLFFBQUEsYUFBQUYsQ0FBQSxrQkFBQUEsQ0FBQSxnQkFBQUEsQ0FBQSxXQUFBQSxDQUFBLHlCQUFBQyxNQUFBLElBQUFELENBQUEsQ0FBQUcsV0FBQSxLQUFBRixNQUFBLElBQUFELENBQUEsS0FBQUMsTUFBQSxDQUFBRyxTQUFBLHFCQUFBSixDQUFBLEtBQUFELE9BQUEsQ0FBQUMsQ0FBQTtBQUFBLFNBQUFLLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFDLFNBQUE7QUFBQSxTQUFBQyxrQkFBQVosQ0FBQSxFQUFBYSxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBWCxDQUFBLEdBQUFVLENBQUEsQ0FBQUMsQ0FBQSxHQUFBWCxDQUFBLENBQUFhLFVBQUEsR0FBQWIsQ0FBQSxDQUFBYSxVQUFBLFFBQUFiLENBQUEsQ0FBQWMsWUFBQSxrQkFBQWQsQ0FBQSxLQUFBQSxDQUFBLENBQUFlLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFwQixDQUFBLEVBQUFxQixjQUFBLENBQUFsQixDQUFBLENBQUFtQixHQUFBLEdBQUFuQixDQUFBO0FBQUEsU0FBQW9CLGFBQUF2QixDQUFBLEVBQUFhLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFaLENBQUEsQ0FBQU8sU0FBQSxFQUFBTSxDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQVosQ0FBQSxFQUFBYyxDQUFBLEdBQUFLLE1BQUEsQ0FBQUMsY0FBQSxDQUFBcEIsQ0FBQSxpQkFBQWtCLFFBQUEsU0FBQWxCLENBQUE7QUFBQSxTQUFBcUIsZUFBQVAsQ0FBQSxRQUFBVSxDQUFBLEdBQUFDLFlBQUEsQ0FBQVgsQ0FBQSxnQ0FBQVosT0FBQSxDQUFBc0IsQ0FBQSxJQUFBQSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBQyxhQUFBWCxDQUFBLEVBQUFELENBQUEsb0JBQUFYLE9BQUEsQ0FBQVksQ0FBQSxNQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQWQsQ0FBQSxHQUFBYyxDQUFBLENBQUFWLE1BQUEsQ0FBQXNCLFdBQUEsa0JBQUExQixDQUFBLFFBQUF3QixDQUFBLEdBQUF4QixDQUFBLENBQUEyQixJQUFBLENBQUFiLENBQUEsRUFBQUQsQ0FBQSxnQ0FBQVgsT0FBQSxDQUFBc0IsQ0FBQSxVQUFBQSxDQUFBLFlBQUFiLFNBQUEseUVBQUFFLENBQUEsR0FBQWUsTUFBQSxHQUFBQyxNQUFBLEVBQUFmLENBQUE7QUFHbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkEsSUFTTWdCLFFBQVE7RUFDWixTQUFBQSxTQUFZQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFO0lBQUF6QixlQUFBLE9BQUFzQixRQUFBO0lBQ3BDLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0MsTUFBTSxHQUFJQSxNQUFNO0VBQ3ZCOztFQUVBOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQVJFLE9BQUFWLFlBQUEsQ0FBQU8sUUFBQTtJQUFBUixHQUFBO0lBQUFZLEtBQUEsRUFTQSxTQUFBQyxXQUFXQyxhQUFhLEVBQUU7TUFDeEIsSUFBSUMsUUFBUSxHQUFHLElBQUlDLG9CQUFRLENBQUNGLGFBQWEsRUFBRSxJQUFJLENBQUNMLE9BQU8sQ0FBQztNQUV4REssYUFBYSxDQUFDRyxFQUFFLENBQUMsTUFBTSxFQUFHRixRQUFRLENBQUNHLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDSixRQUFRLENBQUMsQ0FBQztNQUMzREQsYUFBYSxDQUFDRyxFQUFFLENBQUMsS0FBSyxFQUFJLElBQUksQ0FBQ0csS0FBSyxDQUFDTCxRQUFRLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO01BQzFETCxhQUFhLENBQUNHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDSSxjQUFjLENBQUNOLFFBQVEsQ0FBQyxDQUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7TUFDbkVMLGFBQWEsQ0FBQ0csRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNJLGNBQWMsQ0FBQ04sUUFBUSxDQUFDLENBQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRTs7SUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBUEU7SUFBQW5CLEdBQUE7SUFBQVksS0FBQSxFQVNBLFNBQUFVLFFBQVFSLGFBQWEsRUFBRTtNQUNyQixJQUFJQyxRQUFRLEdBQUcsSUFBSUMsb0JBQVEsQ0FBQ0YsYUFBYSxFQUFFLElBQUksQ0FBQ0wsT0FBTyxDQUFDO01BQ3hELElBQUksQ0FBQ1ksY0FBYyxDQUFDTixRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2pDOztJQUVBOztJQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxFO0lBQUFmLEdBQUE7SUFBQVksS0FBQSxFQU1BLFNBQUFRLE1BQU1MLFFBQVEsRUFBRTtNQUFBLElBQUFRLEtBQUE7TUFDZCxPQUFPLFlBQU07UUFDWFIsUUFBUSxDQUFDUyxLQUFLLENBQUMsQ0FBQztRQUNoQixJQUFJVCxRQUFRLENBQUNVLE9BQU8sQ0FBQyxDQUFDLEVBQUU7VUFBRUYsS0FBSSxDQUFDRyxTQUFTLENBQUNYLFFBQVEsQ0FBQztRQUFFLENBQUMsTUFDaEQ7VUFBRVEsS0FBSSxDQUFDSSxNQUFNLENBQUNaLFFBQVEsQ0FBQztRQUFHO01BQ2pDLENBQUM7SUFDSDs7SUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMRTtJQUFBZixHQUFBO0lBQUFZLEtBQUEsRUFNQSxTQUFBYyxVQUFVWCxRQUFRLEVBQUU7TUFDbEIsSUFBSSxDQUFDYSxHQUFHLENBQUNiLFFBQVEsQ0FBQztNQUNsQixJQUFJLENBQUNMLE9BQU8sQ0FBQ21CLElBQUksQ0FBQyxTQUFTLEVBQUVkLFFBQVEsQ0FBQztJQUN4Qzs7SUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMRTtJQUFBZixHQUFBO0lBQUFZLEtBQUEsRUFNQSxTQUFBZSxPQUFPWixRQUFRLEVBQUU7TUFDZixJQUFJZSxLQUFLLEdBQUcsSUFBSSxDQUFDQyxRQUFRLENBQUNoQixRQUFRLENBQUM7TUFDbkMsSUFBSWlCLEtBQUssR0FBRyxJQUFJRixLQUFLLENBQUNmLFFBQVEsQ0FBQztNQUMvQixJQUFJLENBQUNhLEdBQUcsQ0FBQ2IsUUFBUSxFQUFFaUIsS0FBSyxDQUFDO01BQ3pCLElBQUksQ0FBQ3RCLE9BQU8sQ0FBQ21CLElBQUksQ0FBQyxRQUFRLEVBQUVHLEtBQUssQ0FBQztJQUNwQzs7SUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMRTtJQUFBaEMsR0FBQTtJQUFBWSxLQUFBLEVBTUEsU0FBQW1CLFNBQUFFLElBQUEsRUFBK0I7TUFBQSxJQUFyQkMsVUFBVSxHQUFBRCxJQUFBLENBQVZDLFVBQVU7UUFBRUMsTUFBTSxHQUFBRixJQUFBLENBQU5FLE1BQU07TUFDMUIsSUFBSUgsS0FBSyxHQUFHLElBQUk7TUFDaEIsSUFBSUUsVUFBVSxJQUFJLEdBQUcsRUFBRTtRQUFFRixLQUFLLEdBQUdJLG1CQUFXO01BQUUsQ0FBQyxNQUMxQyxJQUFJRixVQUFVLEtBQUssR0FBRyxFQUFFO1FBQUVGLEtBQUssR0FBR0ssMkJBQW1CO01BQUUsQ0FBQyxNQUN4RCxJQUFJSCxVQUFVLEtBQUssR0FBRyxFQUFFO1FBQUVGLEtBQUssR0FBR00scUJBQWE7TUFBRSxDQUFDLE1BQ2xELElBQUlKLFVBQVUsSUFBSSxHQUFHLEVBQUU7UUFBRUYsS0FBSyxHQUFHTyxtQkFBVztNQUFFLENBQUMsTUFDL0MsSUFBSSxDQUFDSixNQUFNLEVBQUU7UUFBRUgsS0FBSyxHQUFHUSxtQkFBVztNQUFFLENBQUMsTUFDckM7UUFBRVIsS0FBSyxHQUFHUyxvQkFBWTtNQUFFO01BQzdCLE9BQU9ULEtBQUs7SUFDZDs7SUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMRTtJQUFBaEMsR0FBQTtJQUFBWSxLQUFBLEVBTUEsU0FBQVMsZUFBZU4sUUFBUSxFQUFFO01BQUEsSUFBQTJCLE1BQUE7TUFDdkIsT0FBTyxZQUFNO1FBQ1gzQixRQUFRLENBQUNTLEtBQUssQ0FBQyxDQUFDO1FBQ2hCLElBQUlRLEtBQUssR0FBRyxJQUFJVyxvQkFBWSxDQUFDNUIsUUFBUSxDQUFDO1FBQ3RDMkIsTUFBSSxDQUFDZCxHQUFHLENBQUNiLFFBQVEsRUFBRWlCLEtBQUssQ0FBQztRQUN6QlUsTUFBSSxDQUFDaEMsT0FBTyxDQUFDbUIsSUFBSSxDQUFDLFFBQVEsRUFBRUcsS0FBSyxDQUFDO01BQ3BDLENBQUM7SUFDSDs7SUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMRTtJQUFBaEMsR0FBQTtJQUFBWSxLQUFBLEVBTUEsU0FBQWdCLElBQUliLFFBQVEsRUFBRWlCLEtBQUssRUFBRTtNQUNuQixJQUFJLElBQUksQ0FBQ3JCLE1BQU0sQ0FBQ2lDLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDdkI7UUFDQSxJQUFJLENBQUNqQyxNQUFNLENBQUNrQyxNQUFNLENBQUNqQixHQUFHLENBQUNrQixnQkFBSSxDQUFDQyxPQUFPLENBQUNoQyxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO01BQzdEO01BQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ0osTUFBTSxDQUFDaUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUNqQyxNQUFNLENBQUNxQyxJQUFJLENBQUMsQ0FBQyxJQUFJaEIsS0FBSyxFQUFFO1FBQ3ZEO1FBQ0EsSUFBSSxDQUFDckIsTUFBTSxDQUFDa0MsTUFBTSxDQUFDakIsR0FBRyxDQUFDLFNBQVMsRUFBRUksS0FBSyxDQUFDaUIsSUFBSSxFQUFFakIsS0FBSyxDQUFDa0IsV0FBVyxDQUFDO01BQ2xFO0lBQ0Y7RUFBQztBQUFBO0FBQUEsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLGNBR1k1QyxRQUFRO0FBQUE2QyxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/client/listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/client/pagination.js":
/*!***************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/client/pagination.js ***!
  \***************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A helper library for handling pagination.\n *\n * @param {Client} client the client to make the API calls against\n * @protected\n */\nvar Pagination = /*#__PURE__*/function () {\n  function Pagination(client) {\n    _classCallCheck(this, Pagination);\n    this.client = client;\n  }\n\n  /**\n   * Fetch the page for the given page name, and make the next API call based on\n   * the previous request made.\n   *\n   * @param  {type} pageName the name of the page to fetch, should be available\n   *    as a link in the meta links in the response\n   * @param  {type} response the response containing the links to the next pages,\n   *   and the request used to make the previous call\n   * @return {Promise.<Response,ResponseError>} a Promise\n   * @protected\n   */\n  return _createClass(Pagination, [{\n    key: \"page\",\n    value: function page(pageName, response) {\n      var pageNumber = this.pageNumber(response, pageName);\n      if (pageNumber) {\n        return this.call(response.request, pageNumber);\n      } else {\n        return this.nullPromise();\n      }\n    }\n\n    // PRIVATE\n\n    /**\n     * Makes a new call for the new page number\n     *\n     * @param  {type} request    the request used to make the previous call\n     * @param  {type} pageNumber the page number to fetch\n     * @return {Promise.<Response,ResponseError>} a Promise\n     * @private\n     */\n  }, {\n    key: \"call\",\n    value: function call(request, pageNumber) {\n      var params = request.params || {};\n      params['page'] = params['page'] || {};\n      params['page']['offset'] = pageNumber;\n      return this.client.request(request.verb, request.path, params);\n    }\n\n    /**\n     * Tries to determine the page number from the page name. If not present, it\n     * just returns null\n     *\n     * @param  {type} response the response containing the links to the next pages\n     * @param  {type} pageName the name of the page to fetch\n     * @return {number}\n     * @private\n     */\n  }, {\n    key: \"pageNumber\",\n    value: function pageNumber(response, pageName) {\n      try {\n        return response.result['meta']['links'][pageName].split('page%5Boffset%5D=')[1].split('&')[0];\n      } catch (TypeError) {\n        return null;\n      }\n    }\n\n    /**\n     * Returns a Promise that always resolves to null\n     *\n     * @return {Promise} a Promise that always resolves to null\n     * @private\n     */\n  }, {\n    key: \"nullPromise\",\n    value: function nullPromise() {\n      return new Promise(function (resolve) {\n        resolve(null);\n      });\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Pagination;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYWdpbmF0aW9uIiwiY2xpZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJwYWdlIiwicGFnZU5hbWUiLCJyZXNwb25zZSIsInBhZ2VOdW1iZXIiLCJjYWxsIiwicmVxdWVzdCIsIm51bGxQcm9taXNlIiwicGFyYW1zIiwidmVyYiIsInBhdGgiLCJyZXN1bHQiLCJzcGxpdCIsIlR5cGVFcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL2NsaWVudC9wYWdpbmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBoZWxwZXIgbGlicmFyeSBmb3IgaGFuZGxpbmcgcGFnaW5hdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50IHRoZSBjbGllbnQgdG8gbWFrZSB0aGUgQVBJIGNhbGxzIGFnYWluc3RcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuY2xhc3MgUGFnaW5hdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBwYWdlIGZvciB0aGUgZ2l2ZW4gcGFnZSBuYW1lLCBhbmQgbWFrZSB0aGUgbmV4dCBBUEkgY2FsbCBiYXNlZCBvblxuICAgKiB0aGUgcHJldmlvdXMgcmVxdWVzdCBtYWRlLlxuICAgKlxuICAgKiBAcGFyYW0gIHt0eXBlfSBwYWdlTmFtZSB0aGUgbmFtZSBvZiB0aGUgcGFnZSB0byBmZXRjaCwgc2hvdWxkIGJlIGF2YWlsYWJsZVxuICAgKiAgICBhcyBhIGxpbmsgaW4gdGhlIG1ldGEgbGlua3MgaW4gdGhlIHJlc3BvbnNlXG4gICAqIEBwYXJhbSAge3R5cGV9IHJlc3BvbnNlIHRoZSByZXNwb25zZSBjb250YWluaW5nIHRoZSBsaW5rcyB0byB0aGUgbmV4dCBwYWdlcyxcbiAgICogICBhbmQgdGhlIHJlcXVlc3QgdXNlZCB0byBtYWtlIHRoZSBwcmV2aW91cyBjYWxsXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcGFnZShwYWdlTmFtZSwgcmVzcG9uc2UpIHtcbiAgICBsZXQgcGFnZU51bWJlciA9IHRoaXMucGFnZU51bWJlcihyZXNwb25zZSwgcGFnZU5hbWUpO1xuXG4gICAgaWYgKHBhZ2VOdW1iZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGwocmVzcG9uc2UucmVxdWVzdCwgcGFnZU51bWJlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm51bGxQcm9taXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUFJJVkFURVxuXG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgbmV3IGNhbGwgZm9yIHRoZSBuZXcgcGFnZSBudW1iZXJcbiAgICpcbiAgICogQHBhcmFtICB7dHlwZX0gcmVxdWVzdCAgICB0aGUgcmVxdWVzdCB1c2VkIHRvIG1ha2UgdGhlIHByZXZpb3VzIGNhbGxcbiAgICogQHBhcmFtICB7dHlwZX0gcGFnZU51bWJlciB0aGUgcGFnZSBudW1iZXIgdG8gZmV0Y2hcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FsbChyZXF1ZXN0LCBwYWdlTnVtYmVyKSB7XG4gICAgbGV0IHBhcmFtcyA9IHJlcXVlc3QucGFyYW1zIHx8IHt9O1xuICAgIHBhcmFtc1sncGFnZSddID0gcGFyYW1zWydwYWdlJ10gfHwge307XG4gICAgcGFyYW1zWydwYWdlJ11bJ29mZnNldCddID0gcGFnZU51bWJlcjtcblxuICAgIHJldHVybiB0aGlzLmNsaWVudC5yZXF1ZXN0KFxuICAgICAgcmVxdWVzdC52ZXJiLFxuICAgICAgcmVxdWVzdC5wYXRoLFxuICAgICAgcGFyYW1zXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmllcyB0byBkZXRlcm1pbmUgdGhlIHBhZ2UgbnVtYmVyIGZyb20gdGhlIHBhZ2UgbmFtZS4gSWYgbm90IHByZXNlbnQsIGl0XG4gICAqIGp1c3QgcmV0dXJucyBudWxsXG4gICAqXG4gICAqIEBwYXJhbSAge3R5cGV9IHJlc3BvbnNlIHRoZSByZXNwb25zZSBjb250YWluaW5nIHRoZSBsaW5rcyB0byB0aGUgbmV4dCBwYWdlc1xuICAgKiBAcGFyYW0gIHt0eXBlfSBwYWdlTmFtZSB0aGUgbmFtZSBvZiB0aGUgcGFnZSB0byBmZXRjaFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwYWdlTnVtYmVyKHJlc3BvbnNlLCBwYWdlTmFtZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0WydtZXRhJ11bJ2xpbmtzJ11bcGFnZU5hbWVdXG4gICAgICAgIC5zcGxpdCgncGFnZSU1Qm9mZnNldCU1RD0nKVsxXS5zcGxpdCgnJicpWzBdO1xuICAgIH0gY2F0Y2ggKFR5cGVFcnJvcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBQcm9taXNlIHRoYXQgYWx3YXlzIHJlc29sdmVzIHRvIG51bGxcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSBQcm9taXNlIHRoYXQgYWx3YXlzIHJlc29sdmVzIHRvIG51bGxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG51bGxQcm9taXNlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7IHJlc29sdmUobnVsbCk7IH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2luYXRpb247XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBLElBTU1BLFVBQVU7RUFDZCxTQUFBQSxXQUFZQyxNQUFNLEVBQUU7SUFBQUMsZUFBQSxPQUFBRixVQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFWRSxPQUFBRSxZQUFBLENBQUFILFVBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBV0EsU0FBQUMsS0FBS0MsUUFBUSxFQUFFQyxRQUFRLEVBQUU7TUFDdkIsSUFBSUMsVUFBVSxHQUFHLElBQUksQ0FBQ0EsVUFBVSxDQUFDRCxRQUFRLEVBQUVELFFBQVEsQ0FBQztNQUVwRCxJQUFJRSxVQUFVLEVBQUU7UUFDZCxPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDRixRQUFRLENBQUNHLE9BQU8sRUFBRUYsVUFBVSxDQUFDO01BQ2hELENBQUMsTUFBTTtRQUNMLE9BQU8sSUFBSSxDQUFDRyxXQUFXLENBQUMsQ0FBQztNQUMzQjtJQUNGOztJQUVBOztJQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFQRTtJQUFBUixHQUFBO0lBQUFDLEtBQUEsRUFRQSxTQUFBSyxLQUFLQyxPQUFPLEVBQUVGLFVBQVUsRUFBRTtNQUN4QixJQUFJSSxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0UsTUFBTSxJQUFJLENBQUMsQ0FBQztNQUNqQ0EsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHQSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO01BQ3JDQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUdKLFVBQVU7TUFFckMsT0FBTyxJQUFJLENBQUNSLE1BQU0sQ0FBQ1UsT0FBTyxDQUN4QkEsT0FBTyxDQUFDRyxJQUFJLEVBQ1pILE9BQU8sQ0FBQ0ksSUFBSSxFQUNaRixNQUNGLENBQUM7SUFDSDs7SUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFSRTtJQUFBVCxHQUFBO0lBQUFDLEtBQUEsRUFTQSxTQUFBSSxXQUFXRCxRQUFRLEVBQUVELFFBQVEsRUFBRTtNQUM3QixJQUFJO1FBQ0YsT0FBT0MsUUFBUSxDQUFDUSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUNULFFBQVEsQ0FBQyxDQUM5Q1UsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNBLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDaEQsQ0FBQyxDQUFDLE9BQU9DLFNBQVMsRUFBRTtRQUNsQixPQUFPLElBQUk7TUFDYjtJQUNGOztJQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxFO0lBQUFkLEdBQUE7SUFBQUMsS0FBQSxFQU1BLFNBQUFPLFlBQUEsRUFBYztNQUNaLE9BQU8sSUFBSU8sT0FBTyxDQUFDLFVBQVNDLE9BQU8sRUFBRTtRQUFFQSxPQUFPLENBQUMsSUFBSSxDQUFDO01BQUUsQ0FBQyxDQUFDO0lBQzFEO0VBQUM7QUFBQTtBQUFBLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxjQUdZdEIsVUFBVTtBQUFBdUIsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/client/pagination.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/client/request.js":
/*!************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/client/request.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _qs = _interopRequireDefault(__webpack_require__(/*! qs */ \"(rsc)/./node_modules/qs/lib/index.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A Request object containing all the compiled information about this request.\n *\n * @property {string} host the host used for this API call\n * @property {number} port the port for this API call. Standard set to 443.\n * @property {boolean} ssl wether this API call uses SSL\n * @property {string} scheme the scheme inferred from the SSL state\n * @property {string} verb the HTTP method, for example `GET` or `POST`\n * @property {string} path the full path of the API endpoint\n * @property {Object} params the parameters to pass in the query or body\n * @property {string} queryPath the path and query string used for the API call\n * @property {string} bearerToken the authentication token\n * @property {string} clientVersion the version of the Amadeus library\n * @property {string} languageVersion the version of Node used\n * @property {string} appId the custom ID of the application using this library\n * @property {string} appVersion the custom version of the application\n *  using this library\n * @property {Object} headers the request headers\n *\n * @param {Object} options\n */\nvar Request = /*#__PURE__*/function () {\n  function Request(options) {\n    _classCallCheck(this, Request);\n    this.host = options.host;\n    this.port = options.port;\n    this.ssl = options.ssl;\n    this.scheme = this.ssl ? 'https' : 'http';\n    this.verb = options.verb;\n    this.path = options.path;\n    this.params = options.params;\n    this.queryPath = this.fullQueryPath();\n    this.bearerToken = options.bearerToken;\n    this.clientVersion = options.clientVersion;\n    this.languageVersion = options.languageVersion;\n    this.appId = options.appId;\n    this.appVersion = options.appVersion;\n    this.headers = {\n      'User-Agent': this.userAgent(),\n      'Accept': 'application/json, application/vnd.amadeus+json'\n    };\n    this.ListHTTPOverride = ['/v2/shopping/flight-offers', '/v1/shopping/seatmaps', '/v1/shopping/availability/flight-availabilities', '/v2/shopping/flight-offers/prediction', '/v1/shopping/flight-offers/pricing', '/v1/shopping/flight-offers/upselling'];\n    this.addAuthorizationHeader();\n    this.addContentTypeHeader();\n    this.addHTTPOverrideHeader();\n  }\n\n  // PROTECTED\n\n  /**\n   * Compiles the options for the HTTP request.\n   *\n   * Used by Client.execute when executing this request against the server.\n   *\n   * @return {Object} an associative array of options to be passed into the\n   *  Client.execute function\n   * @protected\n   */\n  return _createClass(Request, [{\n    key: \"options\",\n    value: function options() {\n      var options = {\n        'host': this.host,\n        'port': this.port,\n        'protocol': \"\".concat(this.scheme, \":\"),\n        'path': this.queryPath,\n        'method': this.verb,\n        'headers': this.headers\n      };\n      return options;\n    }\n\n    /**\n     * Creats the body for the API cal, serializing the params if the verb is POST.\n     *\n     * @return {string} the serialized params\n     * @protected\n     */\n  }, {\n    key: \"body\",\n    value: function body() {\n      if (this.verb !== 'POST') {\n        return '';\n      } else {\n        if (!this.bearerToken) {\n          return _qs[\"default\"].stringify(this.params);\n        }\n        return this.params;\n      }\n    }\n\n    // PRIVATE\n\n    /**\n     * Build up the custom User Agent\n     *\n     * @return {string} a user agent in the format \"library/version language/version app/version\"\n     * @private\n     */\n  }, {\n    key: \"userAgent\",\n    value: function userAgent() {\n      var userAgent = \"amadeus-node/\".concat(this.clientVersion, \" node/\").concat(this.languageVersion);\n      if (!this.appId) {\n        return userAgent;\n      }\n      return \"\".concat(userAgent, \" \").concat(this.appId, \"/\").concat(this.appVersion);\n    }\n\n    /**\n     * Build the full query path, combining the path with the query params if the\n     * verb is 'GET'. For example: '/foo/bar?baz=qux'\n     *\n     * @return {string} the path and params combined into one string.\n     * @private\n     */\n  }, {\n    key: \"fullQueryPath\",\n    value: function fullQueryPath() {\n      if (this.verb === 'POST') {\n        return this.path;\n      } else {\n        return \"\".concat(this.path, \"?\").concat(_qs[\"default\"].stringify(this.params));\n      }\n    }\n\n    /**\n     * Adds an Authorization header if the BearerToken is present\n     *\n     * @private\n     */\n  }, {\n    key: \"addAuthorizationHeader\",\n    value: function addAuthorizationHeader() {\n      if (!this.bearerToken) {\n        return;\n      }\n      this.headers['Authorization'] = \"Bearer \".concat(this.bearerToken);\n    }\n\n    /**\n     * Adds an Content-Type header if the HTTP method equals POST\n     *\n     * @private\n     */\n  }, {\n    key: \"addContentTypeHeader\",\n    value: function addContentTypeHeader() {\n      if (this.verb === 'POST' && !this.bearerToken) {\n        this.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      } else {\n        this.headers['Content-Type'] = 'application/vnd.amadeus+json';\n      }\n      return;\n    }\n\n    /**\n    * Adds HTTPOverride method if it is required\n    *\n    *  @private\n    */\n  }, {\n    key: \"addHTTPOverrideHeader\",\n    value: function addHTTPOverrideHeader() {\n      if (this.verb === 'POST' && this.ListHTTPOverride.includes(this.path)) {\n        this.headers['X-HTTP-Method-Override'] = 'GET';\n      }\n      return;\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Request;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/client/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/client/response.js":
/*!*************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/client/response.js ***!
  \*************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];\n\n/**\n * The response object returned for every API call.\n *\n * @param {Object} http_response the response object returned from the Node/HTTP\n *  request\n * @param {Request} request the request object used to make this API call\n *\n * @property {number} statusCode the HTTP status code for the response, if any\n * @property {string} body the raw body received from the API\n * @property {Object} result the parsed JSON received from the API\n * @property {Object} data the data attribute taken from the result\n * @property {boolean} parsed wether the raw body has been parsed into JSON\n * @property {Request} request the request object used to make this API call\n *\n */\nvar Response = /*#__PURE__*/function () {\n  function Response(http_response, request) {\n    _classCallCheck(this, Response);\n    this.headers = http_response.headers || {};\n    this.statusCode = http_response.statusCode;\n    this.request = request;\n    this.body = '';\n    this.result = null;\n    this.data = null;\n    this.parsed = false;\n  }\n\n  // PROTECTED\n\n  /**\n   * Add a chunk received from the API to the body\n   *\n   * @param  {string} chunk a chunk of data\n   * @protected\n   */\n  return _createClass(Response, [{\n    key: \"addChunk\",\n    value: function addChunk(chunk) {\n      this.body += chunk;\n    }\n\n    /**\n     * Tries to parse parse the raw data\n     * @protected\n     */\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      try {\n        if (this.statusCode === 204) {\n          return;\n        }\n        if (this.isJson()) {\n          this.result = JSON.parse(this.body);\n          this.data = this.result.data;\n          this.parsed = true;\n        } else {\n          this.parsed = false;\n        }\n      } catch (SyntaxError) {\n        this.parsed = false;\n      }\n    }\n\n    /**\n     * Wether this API call can be considered a success. Used to wrap the response\n     * into a ResponseError\n     *\n     * @return {boolean}\n     * @protected\n     */\n  }, {\n    key: \"success\",\n    value: function success() {\n      if (this.statusCode == 204) {\n        return true;\n      }\n      if (this.parsed && this.statusCode < 300) {\n        return true;\n      }\n    }\n\n    // PRIVATE\n\n    /**\n     * Tests if the content is seemingly JSON\n     *\n     * @return {boolean}\n     * @private\n     */\n  }, {\n    key: \"isJson\",\n    value: function isJson() {\n      return JSON_CONTENT_TYPES.indexOf(this.headers['content-type']) !== -1;\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Response;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJKU09OX0NPTlRFTlRfVFlQRVMiLCJSZXNwb25zZSIsImh0dHBfcmVzcG9uc2UiLCJyZXF1ZXN0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaGVhZGVycyIsInN0YXR1c0NvZGUiLCJib2R5IiwicmVzdWx0IiwiZGF0YSIsInBhcnNlZCIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiYWRkQ2h1bmsiLCJjaHVuayIsInBhcnNlIiwiaXNKc29uIiwiSlNPTiIsIlN5bnRheEVycm9yIiwic3VjY2VzcyIsImluZGV4T2YiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FtYWRldXMvY2xpZW50L3Jlc3BvbnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBKU09OX0NPTlRFTlRfVFlQRVMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vdm5kLmFtYWRldXMranNvbiddO1xuXG4vKipcbiAqIFRoZSByZXNwb25zZSBvYmplY3QgcmV0dXJuZWQgZm9yIGV2ZXJ5IEFQSSBjYWxsLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBodHRwX3Jlc3BvbnNlIHRoZSByZXNwb25zZSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGUgTm9kZS9IVFRQXG4gKiAgcmVxdWVzdFxuICogQHBhcmFtIHtSZXF1ZXN0fSByZXF1ZXN0IHRoZSByZXF1ZXN0IG9iamVjdCB1c2VkIHRvIG1ha2UgdGhpcyBBUEkgY2FsbFxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdGF0dXNDb2RlIHRoZSBIVFRQIHN0YXR1cyBjb2RlIGZvciB0aGUgcmVzcG9uc2UsIGlmIGFueVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJvZHkgdGhlIHJhdyBib2R5IHJlY2VpdmVkIGZyb20gdGhlIEFQSVxuICogQHByb3BlcnR5IHtPYmplY3R9IHJlc3VsdCB0aGUgcGFyc2VkIEpTT04gcmVjZWl2ZWQgZnJvbSB0aGUgQVBJXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YSB0aGUgZGF0YSBhdHRyaWJ1dGUgdGFrZW4gZnJvbSB0aGUgcmVzdWx0XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHBhcnNlZCB3ZXRoZXIgdGhlIHJhdyBib2R5IGhhcyBiZWVuIHBhcnNlZCBpbnRvIEpTT05cbiAqIEBwcm9wZXJ0eSB7UmVxdWVzdH0gcmVxdWVzdCB0aGUgcmVxdWVzdCBvYmplY3QgdXNlZCB0byBtYWtlIHRoaXMgQVBJIGNhbGxcbiAqXG4gKi9cbmNsYXNzIFJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoaHR0cF9yZXNwb25zZSwgcmVxdWVzdCkge1xuICAgIHRoaXMuaGVhZGVycyA9IGh0dHBfcmVzcG9uc2UuaGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLnN0YXR1c0NvZGUgID0gaHR0cF9yZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgIHRoaXMucmVxdWVzdCAgICAgPSByZXF1ZXN0O1xuICAgIHRoaXMuYm9keSAgICAgICAgPSAnJztcbiAgICB0aGlzLnJlc3VsdCAgICAgID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgICAgICAgID0gbnVsbDtcbiAgICB0aGlzLnBhcnNlZCAgICAgID0gZmFsc2U7XG4gIH1cblxuICAvLyBQUk9URUNURURcblxuICAvKipcbiAgICogQWRkIGEgY2h1bmsgcmVjZWl2ZWQgZnJvbSB0aGUgQVBJIHRvIHRoZSBib2R5XG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gY2h1bmsgYSBjaHVuayBvZiBkYXRhXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGFkZENodW5rKGNodW5rKSB7XG4gICAgdGhpcy5ib2R5ICs9IGNodW5rO1xuICB9XG5cblxuICAvKipcbiAgICogVHJpZXMgdG8gcGFyc2UgcGFyc2UgdGhlIHJhdyBkYXRhXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHBhcnNlKCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5zdGF0dXNDb2RlID09PSAyMDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNKc29uKCkpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBKU09OLnBhcnNlKHRoaXMuYm9keSk7XG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMucmVzdWx0LmRhdGE7XG4gICAgICAgIHRoaXMucGFyc2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyc2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoU3ludGF4RXJyb3IpIHtcbiAgICAgIHRoaXMucGFyc2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdldGhlciB0aGlzIEFQSSBjYWxsIGNhbiBiZSBjb25zaWRlcmVkIGEgc3VjY2Vzcy4gVXNlZCB0byB3cmFwIHRoZSByZXNwb25zZVxuICAgKiBpbnRvIGEgUmVzcG9uc2VFcnJvclxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBzdWNjZXNzKCkge1xuICAgIGlmICh0aGlzLnN0YXR1c0NvZGUgPT0gMjA0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucGFyc2VkICYmIHRoaXMuc3RhdHVzQ29kZSA8IDMwMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gUFJJVkFURVxuXG5cbiAgLyoqXG4gICAqIFRlc3RzIGlmIHRoZSBjb250ZW50IGlzIHNlZW1pbmdseSBKU09OXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pzb24oKSB7XG4gICAgcmV0dXJuIChKU09OX0NPTlRFTlRfVFlQRVMuaW5kZXhPZih0aGlzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKSAhPT0gLTEpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlc3BvbnNlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxrQkFBa0IsR0FBRyxDQUFDLGtCQUFrQixFQUFFLDhCQUE4QixDQUFDOztBQUU3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFkQSxJQWVNQyxRQUFRO0VBQ1osU0FBQUEsU0FBWUMsYUFBYSxFQUFFQyxPQUFPLEVBQUU7SUFBQUMsZUFBQSxPQUFBSCxRQUFBO0lBQ2xDLElBQUksQ0FBQ0ksT0FBTyxHQUFHSCxhQUFhLENBQUNHLE9BQU8sSUFBSSxDQUFDLENBQUM7SUFDMUMsSUFBSSxDQUFDQyxVQUFVLEdBQUlKLGFBQWEsQ0FBQ0ksVUFBVTtJQUMzQyxJQUFJLENBQUNILE9BQU8sR0FBT0EsT0FBTztJQUMxQixJQUFJLENBQUNJLElBQUksR0FBVSxFQUFFO0lBQ3JCLElBQUksQ0FBQ0MsTUFBTSxHQUFRLElBQUk7SUFDdkIsSUFBSSxDQUFDQyxJQUFJLEdBQVUsSUFBSTtJQUN2QixJQUFJLENBQUNDLE1BQU0sR0FBUSxLQUFLO0VBQzFCOztFQUVBOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxFLE9BQUFDLFlBQUEsQ0FBQVYsUUFBQTtJQUFBVyxHQUFBO0lBQUFDLEtBQUEsRUFNQSxTQUFBQyxTQUFTQyxLQUFLLEVBQUU7TUFDZCxJQUFJLENBQUNSLElBQUksSUFBSVEsS0FBSztJQUNwQjs7SUFHQTtBQUNGO0FBQ0E7QUFDQTtFQUhFO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUlBLFNBQUFHLE1BQUEsRUFBUTtNQUNOLElBQUk7UUFDRixJQUFJLElBQUksQ0FBQ1YsVUFBVSxLQUFLLEdBQUcsRUFBRTtVQUMzQjtRQUNGO1FBQ0EsSUFBSSxJQUFJLENBQUNXLE1BQU0sQ0FBQyxDQUFDLEVBQUU7VUFDakIsSUFBSSxDQUFDVCxNQUFNLEdBQUdVLElBQUksQ0FBQ0YsS0FBSyxDQUFDLElBQUksQ0FBQ1QsSUFBSSxDQUFDO1VBQ25DLElBQUksQ0FBQ0UsSUFBSSxHQUFHLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxJQUFJO1VBQzVCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUk7UUFDcEIsQ0FBQyxNQUFNO1VBQ0wsSUFBSSxDQUFDQSxNQUFNLEdBQUcsS0FBSztRQUNyQjtNQUNGLENBQUMsQ0FBQyxPQUFPUyxXQUFXLEVBQUU7UUFDcEIsSUFBSSxDQUFDVCxNQUFNLEdBQUcsS0FBSztNQUNyQjtJQUNGOztJQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBTkU7SUFBQUUsR0FBQTtJQUFBQyxLQUFBLEVBT0EsU0FBQU8sUUFBQSxFQUFVO01BQ1IsSUFBSSxJQUFJLENBQUNkLFVBQVUsSUFBSSxHQUFHLEVBQUU7UUFDMUIsT0FBTyxJQUFJO01BQ2I7TUFDQSxJQUFJLElBQUksQ0FBQ0ksTUFBTSxJQUFJLElBQUksQ0FBQ0osVUFBVSxHQUFHLEdBQUcsRUFBRTtRQUN4QyxPQUFPLElBQUk7TUFDYjtJQUNGOztJQUVBOztJQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxFO0lBQUFNLEdBQUE7SUFBQUMsS0FBQSxFQU1BLFNBQUFJLE9BQUEsRUFBUztNQUNQLE9BQVFqQixrQkFBa0IsQ0FBQ3FCLE9BQU8sQ0FBQyxJQUFJLENBQUNoQixPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekU7RUFBQztBQUFBO0FBQUEsSUFBQWlCLFFBQUEsR0FBQUMsT0FBQSxjQUdZdEIsUUFBUTtBQUFBdUIsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/client/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/client/validator.js":
/*!**************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/client/validator.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _https = _interopRequireDefault(__webpack_require__(/*! https */ \"https\"));\nvar _http = _interopRequireDefault(__webpack_require__(/*! http */ \"http\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar HOSTS = {\n  'test': 'test.api.amadeus.com',\n  'production': 'api.amadeus.com'\n};\nvar RECOGNIZED_OPTIONS = ['clientId', 'clientSecret', 'logger', 'logLevel', 'hostname', 'host', 'customAppId', 'customAppVersion', 'http', 'ssl', 'port'];\n\n/**\n * Helper class for validating parameters\n * @protected\n */\nvar Validator = /*#__PURE__*/function () {\n  function Validator() {\n    _classCallCheck(this, Validator);\n  }\n  return _createClass(Validator, [{\n    key: \"validateAndInitialize\",\n    value:\n    /**\n     * Initialise the client's default value, ensuring the required values are\n     * present\n     *\n     * @param  {Client} client the client object to set the defaults for\n     * @param  {Object} options the associative array of options passed to the\n     *  client on initialization\n     */\n    function validateAndInitialize(client, options) {\n      this.initializeClientCredentials(client, options);\n      this.initializeLogger(client, options);\n      this.initializeHost(client, options);\n      this.initializeCustomApp(client, options);\n      this.initializeHttp(client, options);\n      this.warnOnUnrecognizedOptions(options, client, RECOGNIZED_OPTIONS);\n    }\n\n    // PRIVATE\n  }, {\n    key: \"initializeClientCredentials\",\n    value: function initializeClientCredentials(client, options) {\n      client.clientId = this.initRequired('clientId', options);\n      client.clientSecret = this.initRequired('clientSecret', options);\n    }\n  }, {\n    key: \"initializeLogger\",\n    value: function initializeLogger(client, options) {\n      client.logger = this.initOptional('logger', options, console);\n      client.logLevel = this.initOptional('logLevel', options, 'silent');\n    }\n  }, {\n    key: \"initializeHost\",\n    value: function initializeHost(client, options) {\n      var hostname = this.initOptional('hostname', options, 'test');\n      client.host = this.initOptional('host', options, HOSTS[hostname]);\n      client.port = this.initOptional('port', options, 443);\n      client.ssl = this.initOptional('ssl', options, true);\n    }\n  }, {\n    key: \"initializeCustomApp\",\n    value: function initializeCustomApp(client, options) {\n      client.customAppId = this.initOptional('customAppId', options);\n      client.customAppVersion = this.initOptional('customAppVersion', options);\n    }\n  }, {\n    key: \"initializeHttp\",\n    value: function initializeHttp(client, options) {\n      var network = client.ssl ? _https[\"default\"] : _http[\"default\"];\n      client.http = this.initOptional('http', options, network);\n    }\n  }, {\n    key: \"initRequired\",\n    value: function initRequired(key, options) {\n      var result = this.initOptional(key, options);\n      if (!result) throw new ArgumentError(\"Missing required argument: \".concat(key));\n      return result;\n    }\n  }, {\n    key: \"initOptional\",\n    value: function initOptional(key, options) {\n      var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      //Env variables names expected to be in SNAKE_CASE and uppercase\n      var envKey = \"AMADEUS_\".concat(key.replace(/[A-Z]/g, function (c) {\n        return \"_\".concat(c.toLowerCase());\n      }).toUpperCase());\n      var value = options[key] || process.env[envKey] || fallback;\n      return value;\n    }\n  }, {\n    key: \"warnOnUnrecognizedOptions\",\n    value: function warnOnUnrecognizedOptions(options, client, recognizedOptions) {\n      Object.keys(options).forEach(function (key) {\n        if (recognizedOptions.indexOf(key) === -1 && client.warn()) {\n          client.logger.log(\"Unrecognized option: \".concat(key));\n        }\n      });\n      return null;\n    }\n  }]);\n}(); // PRIVATE\nvar ArgumentError = /*#__PURE__*/function (_Error) {\n  function ArgumentError(message) {\n    var _this;\n    _classCallCheck(this, ArgumentError);\n    _this = _callSuper(this, ArgumentError, [message]);\n    _this.name = 'ArgumentError';\n    return _this;\n  }\n  _inherits(ArgumentError, _Error);\n  return _createClass(ArgumentError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar _default = exports[\"default\"] = Validator;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/client/validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airline.js":
/*!****************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/airline.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _destinations = _interopRequireDefault(__webpack_require__(/*! ./airline/destinations */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airline/destinations.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/airline` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.airline;\n * ```\n *\n * @param {Client} client\n * @property {predictions} predictions\n */\nvar Airline = /*#__PURE__*/_createClass(function Airline(client) {\n  _classCallCheck(this, Airline);\n  this.client = client;\n  this.destinations = new _destinations[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Airline;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVzdGluYXRpb25zIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJBaXJsaW5lIiwiY2xpZW50IiwiZGVzdGluYXRpb25zIiwiRGVzdGluYXRpb25zIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvYWlybGluZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGVzdGluYXRpb25zIGZyb20gJy4vYWlybGluZS9kZXN0aW5hdGlvbnMnO1xuXG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9haXJsaW5lYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuYWlybGluZTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqIEBwcm9wZXJ0eSB7cHJlZGljdGlvbnN9IHByZWRpY3Rpb25zXG4gKi9cbmNsYXNzIEFpcmxpbmUge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmRlc3RpbmF0aW9ucyA9IG5ldyBEZXN0aW5hdGlvbnMoY2xpZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBaXJsaW5lOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUFrRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLGdCQUFBQSxDQUFBO0FBQUEsU0FBQUUsa0JBQUFGLENBQUEsRUFBQUcsQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUQsQ0FBQSxDQUFBRSxNQUFBLEVBQUFELENBQUEsVUFBQUUsQ0FBQSxHQUFBSCxDQUFBLENBQUFDLENBQUEsR0FBQUUsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsQ0FBQUMsVUFBQSxRQUFBRCxDQUFBLENBQUFFLFlBQUEsa0JBQUFGLENBQUEsS0FBQUEsQ0FBQSxDQUFBRyxRQUFBLFFBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLEVBQUFZLGNBQUEsQ0FBQU4sQ0FBQSxDQUFBTyxHQUFBLEdBQUFQLENBQUE7QUFBQSxTQUFBUSxhQUFBZCxDQUFBLEVBQUFHLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFGLENBQUEsQ0FBQWUsU0FBQSxFQUFBWixDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQUYsQ0FBQSxFQUFBSSxDQUFBLEdBQUFNLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLGlCQUFBUyxRQUFBLFNBQUFULENBQUE7QUFBQSxTQUFBWSxlQUFBUixDQUFBLFFBQUFZLENBQUEsR0FBQUMsWUFBQSxDQUFBYixDQUFBLGdDQUFBYyxPQUFBLENBQUFGLENBQUEsSUFBQUEsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQUMsYUFBQWIsQ0FBQSxFQUFBRCxDQUFBLG9CQUFBZSxPQUFBLENBQUFkLENBQUEsTUFBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFKLENBQUEsR0FBQUksQ0FBQSxDQUFBZSxNQUFBLENBQUFDLFdBQUEsa0JBQUFwQixDQUFBLFFBQUFnQixDQUFBLEdBQUFoQixDQUFBLENBQUFxQixJQUFBLENBQUFqQixDQUFBLEVBQUFELENBQUEsZ0NBQUFlLE9BQUEsQ0FBQUYsQ0FBQSxVQUFBQSxDQUFBLFlBQUFNLFNBQUEseUVBQUFuQixDQUFBLEdBQUFvQixNQUFBLEdBQUFDLE1BQUEsRUFBQXBCLENBQUE7QUFBQSxTQUFBcUIsZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUwsU0FBQTtBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEsSUFjTU0sT0FBTyxnQkFBQWQsWUFBQSxDQUNYLFNBQUFjLFFBQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLE9BQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDcEIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSUMsd0JBQVksQ0FBQ0YsTUFBTSxDQUFDO0FBQzlDLENBQUM7QUFBQSxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsY0FHWUwsT0FBTztBQUFBTSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airline/destinations.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/airline/destinations.js ***!
  \*****************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/airline/destinations` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.airline.destinations;\n * ```\n *\n * @param {Client} client\n */\nvar Destinations = /*#__PURE__*/function () {\n  function Destinations(client) {\n    _classCallCheck(this, Destinations);\n    this.client = client;\n  }\n\n  /**\n     * find all destinations served by a given airline\n     *\n     * @param {Object} params\n     * @param {string} params.airlineCode airline IATA code, e.g. BA for British airways\n     * @return {Promise.<Response,ResponseError>} a Promise\n     *\n     *  What destinations are served by this airline?\n     *  ```js\n     * amadeus.airline.destinations.get({\n     *   airlineCode: 'BA',\n     * })\n     * ```\n     */\n  return _createClass(Destinations, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/airline/destinations', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Destinations;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXN0aW5hdGlvbnMiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2FpcmxpbmUvZGVzdGluYXRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL2FpcmxpbmUvZGVzdGluYXRpb25zYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuYWlybGluZS5kZXN0aW5hdGlvbnM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIERlc3RpbmF0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAgICogZmluZCBhbGwgZGVzdGluYXRpb25zIHNlcnZlZCBieSBhIGdpdmVuIGFpcmxpbmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmFpcmxpbmVDb2RlIGFpcmxpbmUgSUFUQSBjb2RlLCBlLmcuIEJBIGZvciBCcml0aXNoIGFpcndheXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAgICpcbiAgICAgKiAgV2hhdCBkZXN0aW5hdGlvbnMgYXJlIHNlcnZlZCBieSB0aGlzIGFpcmxpbmU/XG4gICAgICogIGBgYGpzXG4gICAgICogYW1hZGV1cy5haXJsaW5lLmRlc3RpbmF0aW9ucy5nZXQoe1xuICAgICAqICAgYWlybGluZUNvZGU6ICdCQScsXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL2FpcmxpbmUvZGVzdGluYXRpb25zJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZXN0aW5hdGlvbnM7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLFlBQVk7RUFDaEIsU0FBQUEsYUFBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsWUFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBYkUsT0FBQUUsWUFBQSxDQUFBSCxZQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQWNBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQywwQkFBMEIsRUFBRUMsTUFBTSxDQUFDO0lBQzVEO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixZQUFZO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL2FpcmxpbmUvZGVzdGluYXRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCLGtDQUFrQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsMkNBQTJDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10cmF2ZWwtYWdlbmN5Ly4vbm9kZV9tb2R1bGVzL2FtYWRldXMvbGliL2FtYWRldXMvbmFtZXNwYWNlcy9haXJsaW5lL2Rlc3RpbmF0aW9ucy5qcz8yNjc2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9haXJsaW5lL2Rlc3RpbmF0aW9uc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLmFpcmxpbmUuZGVzdGluYXRpb25zO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG52YXIgRGVzdGluYXRpb25zID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRGVzdGluYXRpb25zKGNsaWVudCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXN0aW5hdGlvbnMpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAgICogZmluZCBhbGwgZGVzdGluYXRpb25zIHNlcnZlZCBieSBhIGdpdmVuIGFpcmxpbmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmFpcmxpbmVDb2RlIGFpcmxpbmUgSUFUQSBjb2RlLCBlLmcuIEJBIGZvciBCcml0aXNoIGFpcndheXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAgICpcbiAgICAgKiAgV2hhdCBkZXN0aW5hdGlvbnMgYXJlIHNlcnZlZCBieSB0aGlzIGFpcmxpbmU/XG4gICAgICogIGBgYGpzXG4gICAgICogYW1hZGV1cy5haXJsaW5lLmRlc3RpbmF0aW9ucy5nZXQoe1xuICAgICAqICAgYWlybGluZUNvZGU6ICdCQScsXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhEZXN0aW5hdGlvbnMsIFt7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9haXJsaW5lL2Rlc3RpbmF0aW9ucycsIHBhcmFtcyk7XG4gICAgfVxuICB9XSk7XG59KCk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IERlc3RpbmF0aW9ucztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpFWlhOMGFXNWhkR2x2Ym5NaUxDSmpiR2xsYm5RaUxDSmZZMnhoYzNORFlXeHNRMmhsWTJzaUxDSmZZM0psWVhSbFEyeGhjM01pTENKclpYa2lMQ0oyWVd4MVpTSXNJbWRsZENJc0luQmhjbUZ0Y3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJblZ1WkdWbWFXNWxaQ0lzSWw5a1pXWmhkV3gwSWl3aVpYaHdiM0owY3lJc0ltMXZaSFZzWlNJc0ltUmxabUYxYkhRaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5emNtTXZZVzFoWkdWMWN5OXVZVzFsYzNCaFkyVnpMMkZwY214cGJtVXZaR1Z6ZEdsdVlYUnBiMjV6TG1weklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRU0J1WVcxbGMzQmhZMlZrSUdOc2FXVnVkQ0JtYjNJZ2RHaGxYRzRnS2lCZ0wzWXhMMkZwY214cGJtVXZaR1Z6ZEdsdVlYUnBiMjV6WUNCbGJtUndiMmx1ZEhOY2JpQXFYRzRnS2lCQlkyTmxjM01nZG1saElIUm9aU0I3UUd4cGJtc2dRVzFoWkdWMWMzMGdiMkpxWldOMFhHNGdLbHh1SUNvZ1lHQmdhbk5jYmlBcUlHeGxkQ0JoYldGa1pYVnpJRDBnYm1WM0lFRnRZV1JsZFhNb0tUdGNiaUFxSUdGdFlXUmxkWE11WVdseWJHbHVaUzVrWlhOMGFXNWhkR2x2Ym5NN1hHNGdLaUJnWUdCY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBOc2FXVnVkSDBnWTJ4cFpXNTBYRzRnS2k5Y2JtTnNZWE56SUVSbGMzUnBibUYwYVc5dWN5QjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHTnNhV1Z1ZENrZ2UxeHVJQ0FnSUhSb2FYTXVZMnhwWlc1MElEMGdZMnhwWlc1ME8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQWdJQ29nWm1sdVpDQmhiR3dnWkdWemRHbHVZWFJwYjI1eklITmxjblpsWkNCaWVTQmhJR2RwZG1WdUlHRnBjbXhwYm1WY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J3WVhKaGJYTmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NHRnlZVzF6TG1GcGNteHBibVZEYjJSbElHRnBjbXhwYm1VZ1NVRlVRU0JqYjJSbExDQmxMbWN1SUVKQklHWnZjaUJDY21sMGFYTm9JR0ZwY25kaGVYTmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObExqeFNaWE53YjI1elpTeFNaWE53YjI1elpVVnljbTl5UG4wZ1lTQlFjbTl0YVhObFhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lBZ1YyaGhkQ0JrWlhOMGFXNWhkR2x2Ym5NZ1lYSmxJSE5sY25abFpDQmllU0IwYUdseklHRnBjbXhwYm1VL1hHNGdJQ0FnSUNvZ0lHQmdZR3B6WEc0Z0lDQWdJQ29nWVcxaFpHVjFjeTVoYVhKc2FXNWxMbVJsYzNScGJtRjBhVzl1Y3k1blpYUW9lMXh1SUNBZ0lDQXFJQ0FnWVdseWJHbHVaVU52WkdVNklDZENRU2NzWEc0Z0lDQWdJQ29nZlNsY2JpQWdJQ0FnS2lCZ1lHQmNiaUFnSUNBZ0tpOWNiaUFnWjJWMEtIQmhjbUZ0Y3lBOUlIdDlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTJ4cFpXNTBMbWRsZENnbkwzWXhMMkZwY214cGJtVXZaR1Z6ZEdsdVlYUnBiMjV6Snl3Z2NHRnlZVzF6S1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRVpYTjBhVzVoZEdsdmJuTTdJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVZwQkxFbEJZVTFCTEZsQlFWazdSVUZEYUVJc1UwRkJRVUVzWVVGQldVTXNUVUZCVFN4RlFVRkZPMGxCUVVGRExHVkJRVUVzVDBGQlFVWXNXVUZCUVR0SlFVTnNRaXhKUVVGSkxFTkJRVU5ETEUxQlFVMHNSMEZCUjBFc1RVRkJUVHRGUVVOMFFqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJZa1VzVDBGQlFVVXNXVUZCUVN4RFFVRkJTQ3haUVVGQk8wbEJRVUZKTEVkQlFVRTdTVUZCUVVNc1MwRkJRU3hGUVdOQkxGTkJRVUZETEVsQlFVRXNSVUZCYVVJN1RVRkJRU3hKUVVGaVF5eE5RVUZOTEVkQlFVRkRMRk5CUVVFc1EwRkJRVU1zVFVGQlFTeFJRVUZCUkN4VFFVRkJMRkZCUVVGRkxGTkJRVUVzUjBGQlFVWXNVMEZCUVN4TlFVRkhMRU5CUVVNc1EwRkJRenROUVVOaUxFOUJRVThzU1VGQlNTeERRVUZEVUN4TlFVRk5MRU5CUVVOTExFZEJRVWNzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSVU1zVFVGQlRTeERRVUZETzBsQlF6VkVPMFZCUVVNN1FVRkJRVHRCUVVGQkxFbEJRVUZKTEZGQlFVRXNSMEZCUVVNc1QwRkJRU3hqUVVkWldpeFpRVUZaTzBGQlFVRmhMRTFCUVVFc1EwRkJRVVFzVDBGQlFTeEhRVUZCUVN4UFFVRkJMRU5CUVVGRkxFOUJRVUVpTENKcFoyNXZjbVZNYVhOMElqcGJYWDA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airline/destinations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport.js":
/*!****************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/airport.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _directDestinations = _interopRequireDefault(__webpack_require__(/*! ./airport/direct-destinations */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/direct-destinations.js\"));\nvar _predictions = _interopRequireDefault(__webpack_require__(/*! ./airport/predictions */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/predictions.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/airport` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.airport;\n * ```\n *\n * @param {Client} client\n * @property {predictions} predictions\n */\nvar Airport = /*#__PURE__*/_createClass(function Airport(client) {\n  _classCallCheck(this, Airport);\n  this.client = client;\n  this.directDestinations = new _directDestinations[\"default\"](client);\n  this.predictions = new _predictions[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Airport;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGlyZWN0RGVzdGluYXRpb25zIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcHJlZGljdGlvbnMiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJBaXJwb3J0IiwiY2xpZW50IiwiZGlyZWN0RGVzdGluYXRpb25zIiwiRGlyZWN0RGVzdGluYXRpb25zIiwicHJlZGljdGlvbnMiLCJQcmVkaWN0aW9ucyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2FpcnBvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpcmVjdERlc3RpbmF0aW9ucyBmcm9tICcuL2FpcnBvcnQvZGlyZWN0LWRlc3RpbmF0aW9ucyc7XG5pbXBvcnQgUHJlZGljdGlvbnMgICAgZnJvbSAnLi9haXJwb3J0L3ByZWRpY3Rpb25zJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvYWlycG9ydGAgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLmFpcnBvcnQ7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge3ByZWRpY3Rpb25zfSBwcmVkaWN0aW9uc1xuICovXG5jbGFzcyBBaXJwb3J0IHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgICAgICAgICAgICAgPSBjbGllbnQ7XG4gICAgdGhpcy5kaXJlY3REZXN0aW5hdGlvbnMgPSBuZXcgRGlyZWN0RGVzdGluYXRpb25zKGNsaWVudCk7XG4gICAgdGhpcy5wcmVkaWN0aW9ucyA9IG5ldyBQcmVkaWN0aW9ucyhjbGllbnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFpcnBvcnQ7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFtRCxTQUFBRCx1QkFBQUcsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLGdCQUFBQSxDQUFBO0FBQUEsU0FBQUUsa0JBQUFGLENBQUEsRUFBQUcsQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUQsQ0FBQSxDQUFBRSxNQUFBLEVBQUFELENBQUEsVUFBQUUsQ0FBQSxHQUFBSCxDQUFBLENBQUFDLENBQUEsR0FBQUUsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsQ0FBQUMsVUFBQSxRQUFBRCxDQUFBLENBQUFFLFlBQUEsa0JBQUFGLENBQUEsS0FBQUEsQ0FBQSxDQUFBRyxRQUFBLFFBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLEVBQUFZLGNBQUEsQ0FBQU4sQ0FBQSxDQUFBTyxHQUFBLEdBQUFQLENBQUE7QUFBQSxTQUFBUSxhQUFBZCxDQUFBLEVBQUFHLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFGLENBQUEsQ0FBQWUsU0FBQSxFQUFBWixDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQUYsQ0FBQSxFQUFBSSxDQUFBLEdBQUFNLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLGlCQUFBUyxRQUFBLFNBQUFULENBQUE7QUFBQSxTQUFBWSxlQUFBUixDQUFBLFFBQUFZLENBQUEsR0FBQUMsWUFBQSxDQUFBYixDQUFBLGdDQUFBYyxPQUFBLENBQUFGLENBQUEsSUFBQUEsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQUMsYUFBQWIsQ0FBQSxFQUFBRCxDQUFBLG9CQUFBZSxPQUFBLENBQUFkLENBQUEsTUFBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFKLENBQUEsR0FBQUksQ0FBQSxDQUFBZSxNQUFBLENBQUFDLFdBQUEsa0JBQUFwQixDQUFBLFFBQUFnQixDQUFBLEdBQUFoQixDQUFBLENBQUFxQixJQUFBLENBQUFqQixDQUFBLEVBQUFELENBQUEsZ0NBQUFlLE9BQUEsQ0FBQUYsQ0FBQSxVQUFBQSxDQUFBLFlBQUFNLFNBQUEseUVBQUFuQixDQUFBLEdBQUFvQixNQUFBLEdBQUFDLE1BQUEsRUFBQXBCLENBQUE7QUFBQSxTQUFBcUIsZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUwsU0FBQTtBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEsSUFjTU0sT0FBTyxnQkFBQWQsWUFBQSxDQUNYLFNBQUFjLFFBQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLE9BQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQWVBLE1BQU07RUFDaEMsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRyxJQUFJQyw4QkFBa0IsQ0FBQ0YsTUFBTSxDQUFDO0VBQ3hELElBQUksQ0FBQ0csV0FBVyxHQUFHLElBQUlDLHVCQUFXLENBQUNKLE1BQU0sQ0FBQztBQUM1QyxDQUFDO0FBQUEsSUFBQUssUUFBQSxHQUFBQyxPQUFBLGNBR1lQLE9BQU87QUFBQVEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL2FpcnBvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCLGlEQUFpRCxtQkFBTyxDQUFDLHlIQUErQjtBQUN4RiwwQ0FBMEMsbUJBQU8sQ0FBQyx5R0FBdUI7QUFDekUscUNBQXFDLGlDQUFpQztBQUN0RSxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsY0FBYyxhQUFhO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxlQUFlLGtCQUFrQjtBQUNqQztBQUNBLDJDQUEyQyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdHJhdmVsLWFnZW5jeS8uL25vZGVfbW9kdWxlcy9hbWFkZXVzL2xpYi9hbWFkZXVzL25hbWVzcGFjZXMvYWlycG9ydC5qcz9jM2QzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2RpcmVjdERlc3RpbmF0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYWlycG9ydC9kaXJlY3QtZGVzdGluYXRpb25zXCIpKTtcbnZhciBfcHJlZGljdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2FpcnBvcnQvcHJlZGljdGlvbnNcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL2FpcnBvcnRgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5haXJwb3J0O1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQHByb3BlcnR5IHtwcmVkaWN0aW9uc30gcHJlZGljdGlvbnNcbiAqL1xudmFyIEFpcnBvcnQgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUNsYXNzKGZ1bmN0aW9uIEFpcnBvcnQoY2xpZW50KSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBaXJwb3J0KTtcbiAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIHRoaXMuZGlyZWN0RGVzdGluYXRpb25zID0gbmV3IF9kaXJlY3REZXN0aW5hdGlvbnNbXCJkZWZhdWx0XCJdKGNsaWVudCk7XG4gIHRoaXMucHJlZGljdGlvbnMgPSBuZXcgX3ByZWRpY3Rpb25zW1wiZGVmYXVsdFwiXShjbGllbnQpO1xufSk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IEFpcnBvcnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKZlpHbHlaV04wUkdWemRHbHVZWFJwYjI1eklpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmZjSEpsWkdsamRHbHZibk1pTENKbElpd2lYMTlsYzAxdlpIVnNaU0lzSWw5a1pXWnBibVZRY205d1pYSjBhV1Z6SWl3aWNpSXNJblFpTENKc1pXNW5kR2dpTENKdklpd2laVzUxYldWeVlXSnNaU0lzSW1OdmJtWnBaM1Z5WVdKc1pTSXNJbmR5YVhSaFlteGxJaXdpVDJKcVpXTjBJaXdpWkdWbWFXNWxVSEp2Y0dWeWRIa2lMQ0pmZEc5UWNtOXdaWEowZVV0bGVTSXNJbXRsZVNJc0lsOWpjbVZoZEdWRGJHRnpjeUlzSW5CeWIzUnZkSGx3WlNJc0lta2lMQ0pmZEc5UWNtbHRhWFJwZG1VaUxDSmZkSGx3Wlc5bUlpd2lVM2x0WW05c0lpd2lkRzlRY21sdGFYUnBkbVVpTENKallXeHNJaXdpVkhsd1pVVnljbTl5SWl3aVUzUnlhVzVuSWl3aVRuVnRZbVZ5SWl3aVgyTnNZWE56UTJGc2JFTm9aV05ySWl3aVlTSXNJbTRpTENKQmFYSndiM0owSWl3aVkyeHBaVzUwSWl3aVpHbHlaV04wUkdWemRHbHVZWFJwYjI1eklpd2lSR2x5WldOMFJHVnpkR2x1WVhScGIyNXpJaXdpY0hKbFpHbGpkR2x2Ym5NaUxDSlFjbVZrYVdOMGFXOXVjeUlzSWw5a1pXWmhkV3gwSWl3aVpYaHdiM0owY3lJc0ltMXZaSFZzWlNJc0ltUmxabUYxYkhRaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdllXMWhaR1YxY3k5dVlXMWxjM0JoWTJWekwyRnBjbkJ2Y25RdWFuTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRVJwY21WamRFUmxjM1JwYm1GMGFXOXVjeUJtY205dElDY3VMMkZwY25CdmNuUXZaR2x5WldOMExXUmxjM1JwYm1GMGFXOXVjeWM3WEc1cGJYQnZjblFnVUhKbFpHbGpkR2x2Ym5NZ0lDQWdabkp2YlNBbkxpOWhhWEp3YjNKMEwzQnlaV1JwWTNScGIyNXpKenRjYmx4dUx5b3FYRzRnS2lCQklHNWhiV1Z6Y0dGalpXUWdZMnhwWlc1MElHWnZjaUIwYUdWY2JpQXFJR0F2ZGpFdllXbHljRzl5ZEdBZ1pXNWtjRzlwYm5SelhHNGdLbHh1SUNvZ1FXTmpaWE56SUhacFlTQjBhR1VnZTBCc2FXNXJJRUZ0WVdSbGRYTjlJRzlpYW1WamRGeHVJQ3BjYmlBcUlHQmdZR3B6WEc0Z0tpQnNaWFFnWVcxaFpHVjFjeUE5SUc1bGR5QkJiV0ZrWlhWektDazdYRzRnS2lCaGJXRmtaWFZ6TG1GcGNuQnZjblE3WEc0Z0tpQmdZR0JjYmlBcVhHNGdLaUJBY0dGeVlXMGdlME5zYVdWdWRIMGdZMnhwWlc1MFhHNGdLaUJBY0hKdmNHVnlkSGtnZTNCeVpXUnBZM1JwYjI1emZTQndjbVZrYVdOMGFXOXVjMXh1SUNvdlhHNWpiR0Z6Y3lCQmFYSndiM0owSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWTJ4cFpXNTBLU0I3WEc0Z0lDQWdkR2hwY3k1amJHbGxiblFnSUNBZ0lDQWdJQ0FnSUNBZ1BTQmpiR2xsYm5RN1hHNGdJQ0FnZEdocGN5NWthWEpsWTNSRVpYTjBhVzVoZEdsdmJuTWdQU0J1WlhjZ1JHbHlaV04wUkdWemRHbHVZWFJwYjI1ektHTnNhV1Z1ZENrN1hHNGdJQ0FnZEdocGN5NXdjbVZrYVdOMGFXOXVjeUE5SUc1bGR5QlFjbVZrYVdOMGFXOXVjeWhqYkdsbGJuUXBPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRUZwY25CdmNuUTdJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzBGQlFVRXNTVUZCUVVFc2JVSkJRVUVzUjBGQlFVTXNjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5CTEVsQlFVRkRMRmxCUVVFc1IwRkJRVVlzYzBKQlFVRXNRMEZCUVVNc1QwRkJRVHRCUVVGdFJDeFRRVUZCUkN4MVFrRkJRVWNzUTBGQlFTeFhRVUZCUVN4RFFVRkJMRWxCUVVGQkxFTkJRVUVzUTBGQlFVTXNWVUZCUVN4SFFVRkJSQ3hEUVVGQkxHZENRVUZCUVN4RFFVRkJPMEZCUVVFc1UwRkJRVVVzYTBKQlFVRkdMRU5CUVVFc1JVRkJRVWNzUTBGQlFTeGhRVUZCUXl4RFFVRkJMRTFCUVVGQkxFTkJRVUVzUjBGQlFVUXNRMEZCUVN4RFFVRkJSU3hOUVVGQkxFVkJRVUZFTEVOQlFVRXNWVUZCUVVVc1EwRkJRU3hIUVVGQlNDeERRVUZCTEVOQlFVRkRMRU5CUVVFc1IwRkJRVVVzUTBGQlFTeERRVUZCUXl4VlFVRkJMRWRCUVVGRUxFTkJRVUVzUTBGQlFVTXNWVUZCUVN4UlFVRkJSQ3hEUVVGQkxFTkJRVUZGTEZsQlFVRXNhMEpCUVVGR0xFTkJRVUVzUzBGQlFVRXNRMEZCUVN4RFFVRkJSeXhSUVVGQkxGRkJRVUZETEUxQlFVRXNRMEZCUVVNc1kwRkJRU3hEUVVGQldDeERRVUZCTEVWQlFVRlpMR05CUVVFc1EwRkJRVTRzUTBGQlFTeERRVUZCVHl4SFFVRkJMRWRCUVVGUUxFTkJRVUU3UVVGQlFTeFRRVUZCVVN4aFFVRkJaQ3hEUVVGQkxFVkJRVUZITEVOQlFVRXNSVUZCUVVNc1EwRkJRU3hYUVVGQlJDeERRVUZCTEVsQlFVRkVMR2xDUVVGQkxFTkJRVUZHTEVOQlFVRXNRMEZCUVdVc1UwRkJRU3hGUVVGQldpeERRVUZCTEVkQlFVRkRMRU5CUVVFc1NVRkJRVVlzYVVKQlFVRXNRMEZCUVVZc1EwRkJRU3hGUVVGQlNTeERRVUZCTEVkQlFVRk5MRTFCUVVFc1EwRkJRVU1zWTBGQlFTeERRVUZCV0N4RFFVRkJMR2xDUVVGQlV5eFJRVUZCTEZOQlFVRlVMRU5CUVVFN1FVRkJRU3hUUVVGQldTeGxRVUZCVWl4RFFVRkJMRkZCUVVGWkxFTkJRVUVzUjBGQlFVTXNXVUZCUVN4RFFVRkJZaXhEUVVGQkxHZERRVUZCWXl4UFFVRkJMRU5CUVVGR0xFTkJRVUVzU1VGQlFVRXNRMEZCUVN4SFFVRkJRU3hEUVVGQk8wRkJRVUVzVTBGQlFVTXNZVUZCUVdJc1EwRkJRU3hGUVVGQlJDeERRVUZCTEc5Q1FVRkJaU3hQUVVGQkxFTkJRVUZrTEVOQlFVRXNUVUZCUVVFc1EwRkJRU3hUUVVGQlFTeERRVUZCTEUxQlFVRktMRU5CUVVFc1IwRkJRVWtzUTBGQlFTeERRVUZCWlN4TlFVRkJMRU5CUVVGRExGZEJRVUVzYTBKQlFVRndRaXhEUVVGQkxGRkJRVUZuUWl4RFFVRkJMRWRCUVVGb1FpeERRVUZCTEVOQlFVRnhRaXhKUVVGQkxFTkJRVUZxUWl4RFFVRkJMRVZCUVVGRUxFTkJRVUVzWjBOQlFVRmxMRTlCUVVFc1EwRkJRVVlzUTBGQlFTeFZRVUZCUVN4RFFVRkJMRmxCUVVGTkxGTkJRVUVzZVVWQlFVRnVRaXhEUVVGQkxFZEJRVUZ2UWl4TlFVRkJMRWRCUVVGRExFMUJRVUVzUlVGQlFYQkNMRU5CUVVFN1FVRkJRU3hUUVVGQmNVSXNaMEpCUVVGRExFTkJRVUVzUlVGQlFVTXNRMEZCUVN4VlFVRkJSQ3hEUVVGQkxGbEJRVUZETEVOQlFVRXNZVUZCUVV3c1UwRkJRVHRCUVVWdVJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCWWtFc1NVRmpUVTBzVDBGQlR5eG5Ra0ZCUVdRc1dVRkJRU3hEUVVOWUxGTkJRVUZqTEZGQlFWbERMRTFCUVUwc1JVRkJSVHRGUVVGQlNpeGxRVUZCTEU5QlFVRkhMRTlCUVVFN1JVRkRiRUlzU1VGQlNTeERRVUZEUXl4TlFVRk5MRWRCUVdWQkxFMUJRVTA3UlVGRGFFTXNTVUZCU1N4RFFVRkRReXhyUWtGQmEwSXNSMEZCUnl4SlFVRkpReXc0UWtGQmEwSXNRMEZCUTBZc1RVRkJUU3hEUVVGRE8wVkJRM2hFTEVsQlFVa3NRMEZCUTBjc1YwRkJWeXhIUVVGSExFbEJRVWxETEhWQ1FVRlhMRU5CUVVOS0xFMUJRVTBzUTBGQlF6dEJRVU0xUXl4RFFVRkRPMEZCUVVFc1NVRkJRVXNzVVVGQlFTeEhRVUZCUXl4UFFVRkJMR05CUjFsUUxFOUJRVTg3UVVGQlFWRXNUVUZCUVN4RFFVRkJSQ3hQUVVGQkxFZEJRVUZCTEU5QlFVRXNRMEZCUVVVc1QwRkJRU0lzSW1sbmJtOXlaVXhwYzNRaU9sdGRmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/direct-destinations.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/airport/direct-destinations.js ***!
  \************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/airport/direct-destinations` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.airport.directDestinations;\n * ```\n *\n * @param {Client} client\n */\nvar DirectDestinations = /*#__PURE__*/function () {\n  function DirectDestinations(client) {\n    _classCallCheck(this, DirectDestinations);\n    this.client = client;\n  }\n\n  /**\n   * Get the percentage of on-time flight departures from a given airport\n   *\n   * @param {Object} params\n   * @param {string} params.departureAirportCode airport IATA code, e.g. BOS for Boston\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * What destinations are served by this airport?\n   *  ```js\n   * amadeus.airport.directDestinations.get({\n   *   departureAirportCode: 'JFK',\n   * })\n   * ```\n   */\n  return _createClass(DirectDestinations, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/airport/direct-destinations', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = DirectDestinations;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaXJlY3REZXN0aW5hdGlvbnMiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2FpcnBvcnQvZGlyZWN0LWRlc3RpbmF0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9haXJwb3J0L2RpcmVjdC1kZXN0aW5hdGlvbnNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5haXJwb3J0LmRpcmVjdERlc3RpbmF0aW9ucztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgRGlyZWN0RGVzdGluYXRpb25zIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwZXJjZW50YWdlIG9mIG9uLXRpbWUgZmxpZ2h0IGRlcGFydHVyZXMgZnJvbSBhIGdpdmVuIGFpcnBvcnRcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmRlcGFydHVyZUFpcnBvcnRDb2RlIGFpcnBvcnQgSUFUQSBjb2RlLCBlLmcuIEJPUyBmb3IgQm9zdG9uXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogV2hhdCBkZXN0aW5hdGlvbnMgYXJlIHNlcnZlZCBieSB0aGlzIGFpcnBvcnQ/XG4gICAqICBgYGBqc1xuICAgKiBhbWFkZXVzLmFpcnBvcnQuZGlyZWN0RGVzdGluYXRpb25zLmdldCh7XG4gICAqICAgZGVwYXJ0dXJlQWlycG9ydENvZGU6ICdKRksnLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9haXJwb3J0L2RpcmVjdC1kZXN0aW5hdGlvbnMnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERpcmVjdERlc3RpbmF0aW9uczsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsa0JBQWtCO0VBQ3RCLFNBQUFBLG1CQUFZQyxNQUFNLEVBQUU7SUFBQUMsZUFBQSxPQUFBRixrQkFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBYkUsT0FBQUUsWUFBQSxDQUFBSCxrQkFBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFjQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsaUNBQWlDLEVBQUVDLE1BQU0sQ0FBQztJQUNuRTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosa0JBQWtCO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/direct-destinations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/predictions.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/airport/predictions.js ***!
  \****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _on_time = _interopRequireDefault(__webpack_require__(/*! ./predictions/on_time */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/predictions/on_time.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/airport/predictions` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.airport;\n * ```\n *\n * @param {Client} client\n * @property {predictions} OnTime\n */\nvar Predictions = /*#__PURE__*/_createClass(function Predictions(client) {\n  _classCallCheck(this, Predictions);\n  this.client = client;\n  this.onTime = new _on_time[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Predictions;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb25fdGltZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZSIsIl9fZXNNb2R1bGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwibyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b3R5cGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiX3R5cGVvZiIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiUHJlZGljdGlvbnMiLCJjbGllbnQiLCJvblRpbWUiLCJPblRpbWUiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9haXJwb3J0L3ByZWRpY3Rpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPblRpbWUgICAgZnJvbSAnLi9wcmVkaWN0aW9ucy9vbl90aW1lJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvYWlycG9ydC9wcmVkaWN0aW9uc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLmFpcnBvcnQ7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge3ByZWRpY3Rpb25zfSBPblRpbWVcbiAqL1xuY2xhc3MgUHJlZGljdGlvbnMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLm9uVGltZSA9IG5ldyBPblRpbWUoY2xpZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmVkaWN0aW9uczsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBOEMsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWJBLElBY01NLFdBQVcsZ0JBQUFkLFlBQUEsQ0FDZixTQUFBYyxZQUFZQyxNQUFNLEVBQUU7RUFBQUosZUFBQSxPQUFBRyxXQUFBO0VBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3BCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLG1CQUFNLENBQUNGLE1BQU0sQ0FBQztBQUNsQyxDQUFDO0FBQUEsSUFBQUcsUUFBQSxHQUFBQyxPQUFBLGNBR1lMLFdBQVc7QUFBQU0sTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/predictions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/predictions/on_time.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/airport/predictions/on_time.js ***!
  \************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/airport/predictions/on-time` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.airport.predictions.onTime;\n * ```\n *\n * @param {Client} client\n */\nvar OnTime = /*#__PURE__*/function () {\n  function OnTime(client) {\n    _classCallCheck(this, OnTime);\n    this.client = client;\n  }\n\n  /**\n   * Get the percentage of on-time flight departures from a given airport\n   *\n   * @param {Object} params\n   * @param {string} params.airportCode airport IATA code, e.g. BOS for Boston\n   * @param {string} params.date the date on which the traveler will depart\n   * from the give airport. Dates are specified in the ISO 8601 YYYY-MM-DD format, e.g. 2019-12-25\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Get the percentage of on-time flight departures from JFK\n   *\n   * ```js\n   * amadeus.airport.predictions.onTime.get({\n   *   airportCode: 'JFK',\n   *   date: '2020-08-01'\n   * })\n   * ```\n   */\n  return _createClass(OnTime, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/airport/predictions/on-time', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = OnTime;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPblRpbWUiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2FpcnBvcnQvcHJlZGljdGlvbnMvb25fdGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9haXJwb3J0L3ByZWRpY3Rpb25zL29uLXRpbWVgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5haXJwb3J0LnByZWRpY3Rpb25zLm9uVGltZTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgT25UaW1lIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwZXJjZW50YWdlIG9mIG9uLXRpbWUgZmxpZ2h0IGRlcGFydHVyZXMgZnJvbSBhIGdpdmVuIGFpcnBvcnRcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmFpcnBvcnRDb2RlIGFpcnBvcnQgSUFUQSBjb2RlLCBlLmcuIEJPUyBmb3IgQm9zdG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGF0ZSB0aGUgZGF0ZSBvbiB3aGljaCB0aGUgdHJhdmVsZXIgd2lsbCBkZXBhcnRcbiAgICogZnJvbSB0aGUgZ2l2ZSBhaXJwb3J0LiBEYXRlcyBhcmUgc3BlY2lmaWVkIGluIHRoZSBJU08gODYwMSBZWVlZLU1NLUREIGZvcm1hdCwgZS5nLiAyMDE5LTEyLTI1XG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogR2V0IHRoZSBwZXJjZW50YWdlIG9mIG9uLXRpbWUgZmxpZ2h0IGRlcGFydHVyZXMgZnJvbSBKRktcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5haXJwb3J0LnByZWRpY3Rpb25zLm9uVGltZS5nZXQoe1xuICAgKiAgIGFpcnBvcnRDb2RlOiAnSkZLJyxcbiAgICogICBkYXRlOiAnMjAyMC0wOC0wMSdcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBnZXQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KCcvdjEvYWlycG9ydC9wcmVkaWN0aW9ucy9vbi10aW1lJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPblRpbWU7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLE1BQU07RUFDVixTQUFBQSxPQUFZQyxNQUFNLEVBQUU7SUFBQUMsZUFBQSxPQUFBRixNQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQWpCRSxPQUFBRSxZQUFBLENBQUFILE1BQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBa0JBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxpQ0FBaUMsRUFBRUMsTUFBTSxDQUFDO0lBQ25FO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixNQUFNO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/airport/predictions/on_time.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/analytics.js":
/*!******************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/analytics.js ***!
  \******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _itinerary_price_metrics = _interopRequireDefault(__webpack_require__(/*! ./analytics/itinerary_price_metrics */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/analytics/itinerary_price_metrics.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/analytics` endpoints\n *\n * Access via the {Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.analytics;\n * ```\n *\n * @param {Client} client\n * @property {Flights} flights\n * @protected\n */\nvar Analytics = /*#__PURE__*/_createClass(function Analytics(client) {\n  _classCallCheck(this, Analytics);\n  this.client = client;\n  this.itineraryPriceMetrics = new _itinerary_price_metrics[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Analytics;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaXRpbmVyYXJ5X3ByaWNlX21ldHJpY3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJyIiwidCIsImxlbmd0aCIsIm8iLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG90eXBlIiwiaSIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJhIiwibiIsIkFuYWx5dGljcyIsImNsaWVudCIsIml0aW5lcmFyeVByaWNlTWV0cmljcyIsIkl0aW5lcmFyeVByaWNlTWV0cmljcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2FuYWx5dGljcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSXRpbmVyYXJ5UHJpY2VNZXRyaWNzIGZyb20gJy4vYW5hbHl0aWNzL2l0aW5lcmFyeV9wcmljZV9tZXRyaWNzJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvYW5hbHl0aWNzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuYW5hbHl0aWNzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQHByb3BlcnR5IHtGbGlnaHRzfSBmbGlnaHRzXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmNsYXNzIEFuYWx5dGljcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuaXRpbmVyYXJ5UHJpY2VNZXRyaWNzID0gbmV3IEl0aW5lcmFyeVByaWNlTWV0cmljcyhjbGllbnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFuYWx5dGljcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLHdCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBd0UsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEEsSUFlTU0sU0FBUyxnQkFBQWQsWUFBQSxDQUNiLFNBQUFjLFVBQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLFNBQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDcEIsSUFBSSxDQUFDQyxxQkFBcUIsR0FBRyxJQUFJQyxtQ0FBcUIsQ0FBQ0YsTUFBTSxDQUFDO0FBQ2hFLENBQUM7QUFBQSxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsY0FHWUwsU0FBUztBQUFBTSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/analytics.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/analytics/itinerary_price_metrics.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/analytics/itinerary_price_metrics.js ***!
  \******************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/analytics/itinerary-price-metrics\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.analytics.itineraryPriceMetrics\n * ```\n *\n * @param {Client} client\n */\nvar ItineraryPriceMetrics = /*#__PURE__*/function () {\n  function ItineraryPriceMetrics(client) {\n    _classCallCheck(this, ItineraryPriceMetrics);\n    this.client = client;\n  }\n\n  /**\n   * Provides historical prices in a quartile distribution, including minimum, maximum and average price.\n   *\n   * @param {Object} params\n   * @param {string} params.originIataCode city/airport code, following IATA standard, from which the traveler will depart\n   * @param {string} params.destinationIataCode city/airport code, following IATA standard, from which the traveler is going\n   * @param {string} params.departureDate The date on which the traveler will depart from the origin to go to the destination.\n   * @return {Promise.<Response,ResponseError>} a Promise\n   * Am I getting a good deal on this flight?\n   * ```js\n   * amadeus.analytics.itineraryPriceMetrics.get({\n   * originIataCode: 'MAD',\n   * destinationIataCode: 'CDG',\n   * departureDate: '2021-03-13'\n   * });\n   * ```\n   */\n  return _createClass(ItineraryPriceMetrics, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/analytics/itinerary-price-metrics', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = ItineraryPriceMetrics;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJdGluZXJhcnlQcmljZU1ldHJpY3MiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2FuYWx5dGljcy9pdGluZXJhcnlfcHJpY2VfbWV0cmljcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9hbmFseXRpY3MvaXRpbmVyYXJ5LXByaWNlLW1ldHJpY3NcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuYW5hbHl0aWNzLml0aW5lcmFyeVByaWNlTWV0cmljc1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBJdGluZXJhcnlQcmljZU1ldHJpY3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBoaXN0b3JpY2FsIHByaWNlcyBpbiBhIHF1YXJ0aWxlIGRpc3RyaWJ1dGlvbiwgaW5jbHVkaW5nIG1pbmltdW0sIG1heGltdW0gYW5kIGF2ZXJhZ2UgcHJpY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5vcmlnaW5JYXRhQ29kZSBjaXR5L2FpcnBvcnQgY29kZSwgZm9sbG93aW5nIElBVEEgc3RhbmRhcmQsIGZyb20gd2hpY2ggdGhlIHRyYXZlbGVyIHdpbGwgZGVwYXJ0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGVzdGluYXRpb25JYXRhQ29kZSBjaXR5L2FpcnBvcnQgY29kZSwgZm9sbG93aW5nIElBVEEgc3RhbmRhcmQsIGZyb20gd2hpY2ggdGhlIHRyYXZlbGVyIGlzIGdvaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGVwYXJ0dXJlRGF0ZSBUaGUgZGF0ZSBvbiB3aGljaCB0aGUgdHJhdmVsZXIgd2lsbCBkZXBhcnQgZnJvbSB0aGUgb3JpZ2luIHRvIGdvIHRvIHRoZSBkZXN0aW5hdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKiBBbSBJIGdldHRpbmcgYSBnb29kIGRlYWwgb24gdGhpcyBmbGlnaHQ/XG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuYW5hbHl0aWNzLml0aW5lcmFyeVByaWNlTWV0cmljcy5nZXQoe1xuICAgKiBvcmlnaW5JYXRhQ29kZTogJ01BRCcsXG4gICAqIGRlc3RpbmF0aW9uSWF0YUNvZGU6ICdDREcnLFxuICAgKiBkZXBhcnR1cmVEYXRlOiAnMjAyMS0wMy0xMydcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL2FuYWx5dGljcy9pdGluZXJhcnktcHJpY2UtbWV0cmljcycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSXRpbmVyYXJ5UHJpY2VNZXRyaWNzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLHFCQUFxQjtFQUN6QixTQUFBQSxzQkFBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYscUJBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQWhCRSxPQUFBRSxZQUFBLENBQUFILHFCQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQWlCQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsdUNBQXVDLEVBQUVDLE1BQU0sQ0FBQztJQUN6RTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVoscUJBQXFCO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/analytics/itinerary_price_metrics.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking.js":
/*!****************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/booking.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _flight_orders = _interopRequireDefault(__webpack_require__(/*! ./booking/flight_orders */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/flight_orders.js\"));\nvar _flight_order = _interopRequireDefault(__webpack_require__(/*! ./booking/flight_order */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/flight_order.js\"));\nvar _hotel_bookings = _interopRequireDefault(__webpack_require__(/*! ./booking/hotel_bookings */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/hotel_bookings.js\"));\nvar _hotel_orders = _interopRequireDefault(__webpack_require__(/*! ./booking/hotel_orders */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/hotel_orders.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/booking` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.booking;\n * ```\n *\n * @param {Client} client\n * @property {FlightOrders} flightOrders\n * @property {FlightOrder} flightOrder\n * @property {HotelBookings} hotelBookings\n * @property {HotelOrders} hotelOrders\n * @protected\n */\nvar Booking = /*#__PURE__*/function () {\n  function Booking(client) {\n    _classCallCheck(this, Booking);\n    this.client = client;\n    this.flightOrders = new _flight_orders[\"default\"](client);\n    this.hotelBookings = new _hotel_bookings[\"default\"](client);\n    this.hotelOrders = new _hotel_orders[\"default\"](client);\n  }\n  return _createClass(Booking, [{\n    key: \"flightOrder\",\n    value: function flightOrder(orderId) {\n      return new _flight_order[\"default\"](this.client, orderId);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Booking;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxpZ2h0X29yZGVycyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2ZsaWdodF9vcmRlciIsIl9ob3RlbF9ib29raW5ncyIsIl9ob3RlbF9vcmRlcnMiLCJlIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJyIiwidCIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiU3RyaW5nIiwiTnVtYmVyIiwiQm9va2luZyIsImNsaWVudCIsImZsaWdodE9yZGVycyIsIkZsaWdodE9yZGVycyIsImhvdGVsQm9va2luZ3MiLCJIb3RlbEJvb2tpbmdzIiwiaG90ZWxPcmRlcnMiLCJIb3RlbE9yZGVycyIsInZhbHVlIiwiZmxpZ2h0T3JkZXIiLCJvcmRlcklkIiwiRmxpZ2h0T3JkZXIiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9ib29raW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGbGlnaHRPcmRlcnMgZnJvbSAnLi9ib29raW5nL2ZsaWdodF9vcmRlcnMnO1xuaW1wb3J0IEZsaWdodE9yZGVyIGZyb20gJy4vYm9va2luZy9mbGlnaHRfb3JkZXInO1xuaW1wb3J0IEhvdGVsQm9va2luZ3MgZnJvbSAnLi9ib29raW5nL2hvdGVsX2Jvb2tpbmdzJztcbmltcG9ydCBIb3RlbE9yZGVycyBmcm9tICcuL2Jvb2tpbmcvaG90ZWxfb3JkZXJzJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvYm9va2luZ2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLmJvb2tpbmc7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge0ZsaWdodE9yZGVyc30gZmxpZ2h0T3JkZXJzXG4gKiBAcHJvcGVydHkge0ZsaWdodE9yZGVyfSBmbGlnaHRPcmRlclxuICogQHByb3BlcnR5IHtIb3RlbEJvb2tpbmdzfSBob3RlbEJvb2tpbmdzXG4gKiBAcHJvcGVydHkge0hvdGVsT3JkZXJzfSBob3RlbE9yZGVyc1xuICogQHByb3RlY3RlZFxuICovXG5jbGFzcyBCb29raW5nIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgICAgPSBjbGllbnQ7XG4gICAgdGhpcy5mbGlnaHRPcmRlcnMgPSBuZXcgRmxpZ2h0T3JkZXJzKGNsaWVudCk7XG4gICAgdGhpcy5ob3RlbEJvb2tpbmdzID0gbmV3IEhvdGVsQm9va2luZ3MoY2xpZW50KTtcbiAgICB0aGlzLmhvdGVsT3JkZXJzID0gbmV3IEhvdGVsT3JkZXJzKGNsaWVudCk7XG4gIH1cblxuICBmbGlnaHRPcmRlciAob3JkZXJJZCkge1xuICAgIHJldHVybiBuZXcgRmxpZ2h0T3JkZXIodGhpcy5jbGllbnQsIG9yZGVySWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJvb2tpbmc7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxjQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxlQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBaUQsU0FBQUQsdUJBQUFLLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLFFBQUFDLENBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGtCQUFBQSxDQUFBLGdCQUFBQSxDQUFBLFdBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsS0FBQUQsT0FBQSxDQUFBQyxDQUFBO0FBQUEsU0FBQUssZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUMsU0FBQTtBQUFBLFNBQUFDLGtCQUFBWixDQUFBLEVBQUFhLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFYLENBQUEsR0FBQVUsQ0FBQSxDQUFBQyxDQUFBLEdBQUFYLENBQUEsQ0FBQWEsVUFBQSxHQUFBYixDQUFBLENBQUFhLFVBQUEsUUFBQWIsQ0FBQSxDQUFBYyxZQUFBLGtCQUFBZCxDQUFBLEtBQUFBLENBQUEsQ0FBQWUsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQXBCLENBQUEsRUFBQXFCLGNBQUEsQ0FBQWxCLENBQUEsQ0FBQW1CLEdBQUEsR0FBQW5CLENBQUE7QUFBQSxTQUFBb0IsYUFBQXZCLENBQUEsRUFBQWEsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQVosQ0FBQSxDQUFBTyxTQUFBLEVBQUFNLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBWixDQUFBLEVBQUFjLENBQUEsR0FBQUssTUFBQSxDQUFBQyxjQUFBLENBQUFwQixDQUFBLGlCQUFBa0IsUUFBQSxTQUFBbEIsQ0FBQTtBQUFBLFNBQUFxQixlQUFBUCxDQUFBLFFBQUFVLENBQUEsR0FBQUMsWUFBQSxDQUFBWCxDQUFBLGdDQUFBWixPQUFBLENBQUFzQixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFYLENBQUEsRUFBQUQsQ0FBQSxvQkFBQVgsT0FBQSxDQUFBWSxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBZCxDQUFBLEdBQUFjLENBQUEsQ0FBQVYsTUFBQSxDQUFBc0IsV0FBQSxrQkFBQTFCLENBQUEsUUFBQXdCLENBQUEsR0FBQXhCLENBQUEsQ0FBQTJCLElBQUEsQ0FBQWIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBWCxPQUFBLENBQUFzQixDQUFBLFVBQUFBLENBQUEsWUFBQWIsU0FBQSx5RUFBQUUsQ0FBQSxHQUFBZSxNQUFBLEdBQUFDLE1BQUEsRUFBQWYsQ0FBQTtBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFqQkEsSUFrQk1nQixPQUFPO0VBQ1gsU0FBQUEsUUFBWUMsTUFBTSxFQUFFO0lBQUF2QixlQUFBLE9BQUFzQixPQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFNQSxNQUFNO0lBQ3ZCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlDLHlCQUFZLENBQUNGLE1BQU0sQ0FBQztJQUM1QyxJQUFJLENBQUNHLGFBQWEsR0FBRyxJQUFJQywwQkFBYSxDQUFDSixNQUFNLENBQUM7SUFDOUMsSUFBSSxDQUFDSyxXQUFXLEdBQUcsSUFBSUMsd0JBQVcsQ0FBQ04sTUFBTSxDQUFDO0VBQzVDO0VBQUMsT0FBQVIsWUFBQSxDQUFBTyxPQUFBO0lBQUFSLEdBQUE7SUFBQWdCLEtBQUEsRUFFRCxTQUFBQyxZQUFhQyxPQUFPLEVBQUU7TUFDcEIsT0FBTyxJQUFJQyx3QkFBVyxDQUFDLElBQUksQ0FBQ1YsTUFBTSxFQUFFUyxPQUFPLENBQUM7SUFDOUM7RUFBQztBQUFBO0FBQUEsSUFBQUUsUUFBQSxHQUFBQyxPQUFBLGNBR1liLE9BQU87QUFBQWMsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/flight_order.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/booking/flight_order.js ***!
  \*****************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/booking/flight-orders` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.booking.flightOrder;\n * ```\n *\n * @param {Client} client\n */\nvar FlightOrder = /*#__PURE__*/function () {\n  function FlightOrder(client, orderId) {\n    _classCallCheck(this, FlightOrder);\n    this.client = client;\n    this._orderId = orderId;\n  }\n\n  /**\n   * To retrieve a flight order based on its id.\n   *\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To retrieve a flight order with ID 'XXX'\n   *\n   * ```js\n   * amadeus.booking.flightOrder('XXX').get();\n   * ```\n   */\n  return _createClass(FlightOrder, [{\n    key: \"get\",\n    value: function get() {\n      if (this._orderId) return this.client.get('/v1/booking/flight-orders/' + this._orderId);else throw new Error('MISSING_REQUIRED_PARAMETER');\n    }\n\n    /**\n     * To cancel a flight order based on its id.\n     *\n     * @return {Promise.<Response,ResponseError>} a Promise\n     *\n     * To cancel a flight order with ID 'XXX'\n     *\n     * ```js\n     * amadeus.booking.flightOrder('XXX').delete();\n     * ```\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      if (this._orderId) return this.client[\"delete\"]('/v1/booking/flight-orders/' + this._orderId);else throw new Error('MISSING_REQUIRED_PARAMETER');\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = FlightOrder;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHRPcmRlciIsImNsaWVudCIsIm9yZGVySWQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfb3JkZXJJZCIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwiRXJyb3IiLCJfZGVsZXRlIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvYm9va2luZy9mbGlnaHRfb3JkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvYm9va2luZy9mbGlnaHQtb3JkZXJzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuYm9va2luZy5mbGlnaHRPcmRlcjtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgRmxpZ2h0T3JkZXIge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG9yZGVySWQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLl9vcmRlcklkID0gb3JkZXJJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyByZXRyaWV2ZSBhIGZsaWdodCBvcmRlciBiYXNlZCBvbiBpdHMgaWQuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gcmV0cmlldmUgYSBmbGlnaHQgb3JkZXIgd2l0aCBJRCAnWFhYJ1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLmJvb2tpbmcuZmxpZ2h0T3JkZXIoJ1hYWCcpLmdldCgpO1xuICAgKiBgYGBcbiAgICovXG4gIGdldCgpIHtcbiAgICBpZiAodGhpcy5fb3JkZXJJZClcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9ib29raW5nL2ZsaWdodC1vcmRlcnMvJyArIHRoaXMuX29yZGVySWQpO1xuICAgIGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcignTUlTU0lOR19SRVFVSVJFRF9QQVJBTUVURVInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBjYW5jZWwgYSBmbGlnaHQgb3JkZXIgYmFzZWQgb24gaXRzIGlkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIFRvIGNhbmNlbCBhIGZsaWdodCBvcmRlciB3aXRoIElEICdYWFgnXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuYm9va2luZy5mbGlnaHRPcmRlcignWFhYJykuZGVsZXRlKCk7XG4gICAqIGBgYFxuICAgKi9cbiAgZGVsZXRlKCkge1xuICAgIGlmICh0aGlzLl9vcmRlcklkKVxuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmRlbGV0ZSgnL3YxL2Jvb2tpbmcvZmxpZ2h0LW9yZGVycy8nICsgdGhpcy5fb3JkZXJJZCk7XG4gICAgZWxzZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNSVNTSU5HX1JFUVVJUkVEX1BBUkFNRVRFUicpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZsaWdodE9yZGVyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxXQUFXO0VBQ2YsU0FBQUEsWUFBWUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7SUFBQUMsZUFBQSxPQUFBSCxXQUFBO0lBQzNCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0csUUFBUSxHQUFHRixPQUFPO0VBQ3pCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFWRSxPQUFBRyxZQUFBLENBQUFMLFdBQUE7SUFBQU0sR0FBQTtJQUFBQyxLQUFBLEVBV0EsU0FBQUMsSUFBQSxFQUFNO01BQ0osSUFBSSxJQUFJLENBQUNKLFFBQVEsRUFDZixPQUFPLElBQUksQ0FBQ0gsTUFBTSxDQUFDTyxHQUFHLENBQUMsNEJBQTRCLEdBQUcsSUFBSSxDQUFDSixRQUFRLENBQUMsQ0FBQyxLQUVyRSxNQUFNLElBQUlLLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQztJQUNqRDs7SUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBVkU7SUFBQUgsR0FBQTtJQUFBQyxLQUFBLEVBV0EsU0FBQUcsUUFBQSxFQUFTO01BQ1AsSUFBSSxJQUFJLENBQUNOLFFBQVEsRUFDZixPQUFPLElBQUksQ0FBQ0gsTUFBTSxVQUFPLENBQUMsNEJBQTRCLEdBQUcsSUFBSSxDQUFDRyxRQUFRLENBQUMsQ0FBQyxLQUV4RSxNQUFNLElBQUlLLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQztJQUNqRDtFQUFDO0FBQUE7QUFBQSxJQUFBRSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosV0FBVztBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/flight_order.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/flight_orders.js":
/*!******************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/booking/flight_orders.js ***!
  \******************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/booking/flight-orders` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.booking.flightOrders;\n * ```\n *\n * @param {Client} client\n */\nvar FlightOrders = /*#__PURE__*/function () {\n  function FlightOrders(client) {\n    _classCallCheck(this, FlightOrders);\n    this.client = client;\n  }\n\n  /**\n   * To book the selected flight-offer and create a flight-order\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To book the flight-offer(s) suggested by flightOffersSearch and create a flight-order\n   *\n   * ```js\n   * amadeus.booking.flightOrders.post({\n   *  'type': 'flight-order',\n   *  'flightOffers': [],\n   *  'travelers': []\n   * });\n   * ```\n   */\n  return _createClass(FlightOrders, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v1/booking/flight-orders', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = FlightOrders;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHRPcmRlcnMiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsInBvc3QiLCJwYXJhbXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9ib29raW5nL2ZsaWdodF9vcmRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvYm9va2luZy9mbGlnaHQtb3JkZXJzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuYm9va2luZy5mbGlnaHRPcmRlcnM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIEZsaWdodE9yZGVycyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIGJvb2sgdGhlIHNlbGVjdGVkIGZsaWdodC1vZmZlciBhbmQgY3JlYXRlIGEgZmxpZ2h0LW9yZGVyXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBUbyBib29rIHRoZSBmbGlnaHQtb2ZmZXIocykgc3VnZ2VzdGVkIGJ5IGZsaWdodE9mZmVyc1NlYXJjaCBhbmQgY3JlYXRlIGEgZmxpZ2h0LW9yZGVyXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuYm9va2luZy5mbGlnaHRPcmRlcnMucG9zdCh7XG4gICAqICAndHlwZSc6ICdmbGlnaHQtb3JkZXInLFxuICAgKiAgJ2ZsaWdodE9mZmVycyc6IFtdLFxuICAgKiAgJ3RyYXZlbGVycyc6IFtdXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHBvc3QocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdCgnL3YxL2Jvb2tpbmcvZmxpZ2h0LW9yZGVycycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmxpZ2h0T3JkZXJzOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxZQUFZO0VBQ2hCLFNBQUFBLGFBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFlBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFmRSxPQUFBRSxZQUFBLENBQUFILFlBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBZ0JBLFNBQUFDLEtBQUEsRUFBa0I7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNkLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLElBQUksQ0FBQywyQkFBMkIsRUFBRUMsTUFBTSxDQUFDO0lBQzlEO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixZQUFZO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL2Jvb2tpbmcvZmxpZ2h0X29yZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxrQ0FBa0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxlQUFlLGtCQUFrQjtBQUNqQztBQUNBLDJDQUEyQyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdHJhdmVsLWFnZW5jeS8uL25vZGVfbW9kdWxlcy9hbWFkZXVzL2xpYi9hbWFkZXVzL25hbWVzcGFjZXMvYm9va2luZy9mbGlnaHRfb3JkZXJzLmpzPzMwMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL2Jvb2tpbmcvZmxpZ2h0LW9yZGVyc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLmJvb2tpbmcuZmxpZ2h0T3JkZXJzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG52YXIgRmxpZ2h0T3JkZXJzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRmxpZ2h0T3JkZXJzKGNsaWVudCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbGlnaHRPcmRlcnMpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIGJvb2sgdGhlIHNlbGVjdGVkIGZsaWdodC1vZmZlciBhbmQgY3JlYXRlIGEgZmxpZ2h0LW9yZGVyXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBUbyBib29rIHRoZSBmbGlnaHQtb2ZmZXIocykgc3VnZ2VzdGVkIGJ5IGZsaWdodE9mZmVyc1NlYXJjaCBhbmQgY3JlYXRlIGEgZmxpZ2h0LW9yZGVyXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuYm9va2luZy5mbGlnaHRPcmRlcnMucG9zdCh7XG4gICAqICAndHlwZSc6ICdmbGlnaHQtb3JkZXInLFxuICAgKiAgJ2ZsaWdodE9mZmVycyc6IFtdLFxuICAgKiAgJ3RyYXZlbGVycyc6IFtdXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRmxpZ2h0T3JkZXJzLCBbe1xuICAgIGtleTogXCJwb3N0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3QoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KCcvdjEvYm9va2luZy9mbGlnaHQtb3JkZXJzJywgcGFyYW1zKTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRmxpZ2h0T3JkZXJzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SkdiR2xuYUhSUGNtUmxjbk1pTENKamJHbGxiblFpTENKZlkyeGhjM05EWVd4c1EyaGxZMnNpTENKZlkzSmxZWFJsUTJ4aGMzTWlMQ0pyWlhraUxDSjJZV3gxWlNJc0luQnZjM1FpTENKd1lYSmhiWE1pTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaUxDSjFibVJsWm1sdVpXUWlMQ0pmWkdWbVlYVnNkQ0lzSW1WNGNHOXlkSE1pTENKdGIyUjFiR1VpTENKa1pXWmhkV3gwSWwwc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZMaTR2YzNKakwyRnRZV1JsZFhNdmJtRnRaWE53WVdObGN5OWliMjlyYVc1bkwyWnNhV2RvZEY5dmNtUmxjbk11YW5NaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkJJRzVoYldWemNHRmpaV1FnWTJ4cFpXNTBJR1p2Y2lCMGFHVmNiaUFxSUdBdmRqRXZZbTl2YTJsdVp5OW1iR2xuYUhRdGIzSmtaWEp6WUNCbGJtUndiMmx1ZEhOY2JpQXFYRzRnS2lCQlkyTmxjM01nZG1saElIUm9aU0I3UUd4cGJtc2dRVzFoWkdWMWMzMGdiMkpxWldOMFhHNGdLbHh1SUNvZ1lHQmdhbk5jYmlBcUlHeGxkQ0JoYldGa1pYVnpJRDBnYm1WM0lFRnRZV1JsZFhNb0tUdGNiaUFxSUdGdFlXUmxkWE11WW05dmEybHVaeTVtYkdsbmFIUlBjbVJsY25NN1hHNGdLaUJnWUdCY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBOc2FXVnVkSDBnWTJ4cFpXNTBYRzRnS2k5Y2JtTnNZWE56SUVac2FXZG9kRTl5WkdWeWN5QjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHTnNhV1Z1ZENrZ2UxeHVJQ0FnSUhSb2FYTXVZMnhwWlc1MElEMGdZMnhwWlc1ME8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJ2SUdKdmIyc2dkR2hsSUhObGJHVmpkR1ZrSUdac2FXZG9kQzF2Wm1abGNpQmhibVFnWTNKbFlYUmxJR0VnWm14cFoyaDBMVzl5WkdWeVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQndZWEpoYlhOY2JpQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaUzQ4VW1WemNHOXVjMlVzVW1WemNHOXVjMlZGY25KdmNqNTlJR0VnVUhKdmJXbHpaVnh1SUNBZ0tseHVJQ0FnS2lCVWJ5QmliMjlySUhSb1pTQm1iR2xuYUhRdGIyWm1aWElvY3lrZ2MzVm5aMlZ6ZEdWa0lHSjVJR1pzYVdkb2RFOW1abVZ5YzFObFlYSmphQ0JoYm1RZ1kzSmxZWFJsSUdFZ1pteHBaMmgwTFc5eVpHVnlYRzRnSUNBcVhHNGdJQ0FxSUdCZ1lHcHpYRzRnSUNBcUlHRnRZV1JsZFhNdVltOXZhMmx1Wnk1bWJHbG5hSFJQY21SbGNuTXVjRzl6ZENoN1hHNGdJQ0FxSUNBbmRIbHdaU2M2SUNkbWJHbG5hSFF0YjNKa1pYSW5MRnh1SUNBZ0tpQWdKMlpzYVdkb2RFOW1abVZ5Y3ljNklGdGRMRnh1SUNBZ0tpQWdKM1J5WVhabGJHVnljeWM2SUZ0ZFhHNGdJQ0FxSUgwcE8xeHVJQ0FnS2lCZ1lHQmNiaUFnSUNvdlhHNGdJSEJ2YzNRb2NHRnlZVzF6SUQwZ2UzMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYkdsbGJuUXVjRzl6ZENnbkwzWXhMMkp2YjJ0cGJtY3ZabXhwWjJoMExXOXlaR1Z5Y3ljc0lIQmhjbUZ0Y3lrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1JteHBaMmgwVDNKa1pYSnpPeUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGYVFTeEpRV0ZOUVN4WlFVRlpPMFZCUTJoQ0xGTkJRVUZCTEdGQlFWbERMRTFCUVUwc1JVRkJSVHRKUVVGQlF5eGxRVUZCTEU5QlFVRkdMRmxCUVVFN1NVRkRiRUlzU1VGQlNTeERRVUZEUXl4TlFVRk5MRWRCUVVkQkxFMUJRVTA3UlVGRGRFSTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZtUlN4UFFVRkJSU3haUVVGQkxFTkJRVUZJTEZsQlFVRTdTVUZCUVVrc1IwRkJRVHRKUVVGQlF5eExRVUZCTEVWQlowSkJMRk5CUVVGRExFdEJRVUVzUlVGQmEwSTdUVUZCUVN4SlFVRmlReXhOUVVGTkxFZEJRVUZETEZOQlFVRXNRMEZCUVVNc1RVRkJRU3hSUVVGQlJDeFRRVUZCTEZGQlFVRkZMRk5CUVVFc1IwRkJRVVlzVTBGQlFTeE5RVUZITEVOQlFVTXNRMEZCUXp0TlFVTmtMRTlCUVU4c1NVRkJTU3hEUVVGRFVDeE5RVUZOTEVOQlFVTkxMRWxCUVVrc1EwRkJReXd5UWtGQk1rSXNSVUZCUlVNc1RVRkJUU3hEUVVGRE8wbEJRemxFTzBWQlFVTTdRVUZCUVR0QlFVRkJMRWxCUVVGSkxGRkJRVUVzUjBGQlFVTXNUMEZCUVN4alFVZFpXaXhaUVVGWk8wRkJRVUZoTEUxQlFVRXNRMEZCUVVRc1QwRkJRU3hIUVVGQlFTeFBRVUZCTEVOQlFVRkZMRTlCUVVFaUxDSnBaMjV2Y21WTWFYTjBJanBiWFgwPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/flight_orders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/hotel_bookings.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/booking/hotel_bookings.js ***!
  \*******************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/booking/hotel-bookings` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.booking.hotelBookings;\n * ```\n *\n * @param {Client} client\n */\nvar HotelBookings = /*#__PURE__*/function () {\n  function HotelBookings(client) {\n    _classCallCheck(this, HotelBookings);\n    this.client = client;\n  }\n\n  /**\n   * To book the offer retrieved from Hotel Shopping API.\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To book the hotel offer with ID 'XXX' with guests & payments info\n   *\n   * ```js\n   * amadeus.booking.hotelBookings.post(\n   * JSON.stringify({\n   * 'data': {\n   *   'offerId': 'XXXX',\n   *   'guests': [],\n   *   'payments': [],\n   *   'rooms': []\n   * }})\n   * )\n   * ```\n   */\n  return _createClass(HotelBookings, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v1/booking/hotel-bookings', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = HotelBookings;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIb3RlbEJvb2tpbmdzIiwiY2xpZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJwb3N0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvYm9va2luZy9ob3RlbF9ib29raW5ncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9ib29raW5nL2hvdGVsLWJvb2tpbmdzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuYm9va2luZy5ob3RlbEJvb2tpbmdzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBIb3RlbEJvb2tpbmdzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogVG8gYm9vayB0aGUgb2ZmZXIgcmV0cmlldmVkIGZyb20gSG90ZWwgU2hvcHBpbmcgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gYm9vayB0aGUgaG90ZWwgb2ZmZXIgd2l0aCBJRCAnWFhYJyB3aXRoIGd1ZXN0cyAmIHBheW1lbnRzIGluZm9cbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5ib29raW5nLmhvdGVsQm9va2luZ3MucG9zdChcbiAgICogSlNPTi5zdHJpbmdpZnkoe1xuICAgKiAnZGF0YSc6IHtcbiAgICogICAnb2ZmZXJJZCc6ICdYWFhYJyxcbiAgICogICAnZ3Vlc3RzJzogW10sXG4gICAqICAgJ3BheW1lbnRzJzogW10sXG4gICAqICAgJ3Jvb21zJzogW11cbiAgICogfX0pXG4gICAqIClcbiAgICogYGBgXG4gICAqL1xuICBwb3N0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoJy92MS9ib29raW5nL2hvdGVsLWJvb2tpbmdzJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb3RlbEJvb2tpbmdzOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxhQUFhO0VBQ2pCLFNBQUFBLGNBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLGFBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQW5CRSxPQUFBRSxZQUFBLENBQUFILGFBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBb0JBLFNBQUFDLEtBQUEsRUFBa0I7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNkLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLElBQUksQ0FBQyw0QkFBNEIsRUFBRUMsTUFBTSxDQUFDO0lBQy9EO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixhQUFhO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/hotel_bookings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/hotel_orders.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/booking/hotel_orders.js ***!
  \*****************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/booking/hotel-orders` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.booking.hotelOrders;\n * ```\n *\n * @param {Client} client\n */\nvar HotelOrders = /*#__PURE__*/function () {\n  function HotelOrders(client) {\n    _classCallCheck(this, HotelOrders);\n    this.client = client;\n  }\n\n  /**\n   * To book the offer retrieved from Hotel Search API.\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To book the hotel offer with ID 'XXX' with guests, travel agents and payment info\n   *\n   * ```js\n   * amadeus.booking.hotelOrders.post(\n   * JSON.stringfy({\n   * 'data': {\n   *     'type': 'hotel-order',\n   *     'guests': [],\n   *     'travelAgent': {},\n   *     'roomAssociations': [],\n   *     'payment': {}\n   * }})\n   *)\n   * ```\n   */\n  return _createClass(HotelOrders, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v2/booking/hotel-orders', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = HotelOrders;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIb3RlbE9yZGVycyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwicG9zdCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2Jvb2tpbmcvaG90ZWxfb3JkZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL2Jvb2tpbmcvaG90ZWwtb3JkZXJzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuYm9va2luZy5ob3RlbE9yZGVycztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgSG90ZWxPcmRlcnMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBib29rIHRoZSBvZmZlciByZXRyaWV2ZWQgZnJvbSBIb3RlbCBTZWFyY2ggQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gYm9vayB0aGUgaG90ZWwgb2ZmZXIgd2l0aCBJRCAnWFhYJyB3aXRoIGd1ZXN0cywgdHJhdmVsIGFnZW50cyBhbmQgcGF5bWVudCBpbmZvXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuYm9va2luZy5ob3RlbE9yZGVycy5wb3N0KFxuICAgKiBKU09OLnN0cmluZ2Z5KHtcbiAgICogJ2RhdGEnOiB7XG4gICAqICAgICAndHlwZSc6ICdob3RlbC1vcmRlcicsXG4gICAqICAgICAnZ3Vlc3RzJzogW10sXG4gICAqICAgICAndHJhdmVsQWdlbnQnOiB7fSxcbiAgICogICAgICdyb29tQXNzb2NpYXRpb25zJzogW10sXG4gICAqICAgICAncGF5bWVudCc6IHt9XG4gICAqIH19KVxuICAgKilcbiAgICogYGBgXG4gICAqL1xuICBwb3N0KHBhcmFtcyA9IHt9KSB7XG5cbiAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdCgnL3YyL2Jvb2tpbmcvaG90ZWwtb3JkZXJzJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb3RlbE9yZGVyczsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsV0FBVztFQUNmLFNBQUFBLFlBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFdBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBcEJFLE9BQUFFLFlBQUEsQ0FBQUgsV0FBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFxQkEsU0FBQUMsS0FBQSxFQUFrQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BRWQsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLDBCQUEwQixFQUFFQyxNQUFNLENBQUM7SUFDN0Q7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLFdBQVc7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/booking/hotel_orders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/e_reputation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/e_reputation.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _hotel_sentiments = _interopRequireDefault(__webpack_require__(/*! ./e_reputation/hotel_sentiments */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/e_reputation/hotel_sentiments.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v2/e-reputation` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.eReputation;\n * ```\n *\n * @param {Client} client\n * @property {hotelSentiments} hotel_sentiments\n */\nvar EReputation = /*#__PURE__*/_createClass(function EReputation(client) {\n  _classCallCheck(this, EReputation);\n  this.client = client;\n  this.hotelSentiments = new _hotel_sentiments[\"default\"](client);\n});\nvar _default = exports[\"default\"] = EReputation;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaG90ZWxfc2VudGltZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZSIsIl9fZXNNb2R1bGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwibyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b3R5cGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiX3R5cGVvZiIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiRVJlcHV0YXRpb24iLCJjbGllbnQiLCJob3RlbFNlbnRpbWVudHMiLCJIb3RlbFNlbnRpbWVudHMiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9lX3JlcHV0YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhvdGVsU2VudGltZW50cyAgICBmcm9tICcuL2VfcmVwdXRhdGlvbi9ob3RlbF9zZW50aW1lbnRzJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjIvZS1yZXB1dGF0aW9uYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuZVJlcHV0YXRpb247XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge2hvdGVsU2VudGltZW50c30gaG90ZWxfc2VudGltZW50c1xuICovXG5jbGFzcyBFUmVwdXRhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ICAgICAgICAgICAgID0gY2xpZW50O1xuICAgIHRoaXMuaG90ZWxTZW50aW1lbnRzID0gbmV3IEhvdGVsU2VudGltZW50cyhjbGllbnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVSZXB1dGF0aW9uO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsaUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUFpRSxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLGdCQUFBQSxDQUFBO0FBQUEsU0FBQUUsa0JBQUFGLENBQUEsRUFBQUcsQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUQsQ0FBQSxDQUFBRSxNQUFBLEVBQUFELENBQUEsVUFBQUUsQ0FBQSxHQUFBSCxDQUFBLENBQUFDLENBQUEsR0FBQUUsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsQ0FBQUMsVUFBQSxRQUFBRCxDQUFBLENBQUFFLFlBQUEsa0JBQUFGLENBQUEsS0FBQUEsQ0FBQSxDQUFBRyxRQUFBLFFBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLEVBQUFZLGNBQUEsQ0FBQU4sQ0FBQSxDQUFBTyxHQUFBLEdBQUFQLENBQUE7QUFBQSxTQUFBUSxhQUFBZCxDQUFBLEVBQUFHLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFGLENBQUEsQ0FBQWUsU0FBQSxFQUFBWixDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQUYsQ0FBQSxFQUFBSSxDQUFBLEdBQUFNLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLGlCQUFBUyxRQUFBLFNBQUFULENBQUE7QUFBQSxTQUFBWSxlQUFBUixDQUFBLFFBQUFZLENBQUEsR0FBQUMsWUFBQSxDQUFBYixDQUFBLGdDQUFBYyxPQUFBLENBQUFGLENBQUEsSUFBQUEsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQUMsYUFBQWIsQ0FBQSxFQUFBRCxDQUFBLG9CQUFBZSxPQUFBLENBQUFkLENBQUEsTUFBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFKLENBQUEsR0FBQUksQ0FBQSxDQUFBZSxNQUFBLENBQUFDLFdBQUEsa0JBQUFwQixDQUFBLFFBQUFnQixDQUFBLEdBQUFoQixDQUFBLENBQUFxQixJQUFBLENBQUFqQixDQUFBLEVBQUFELENBQUEsZ0NBQUFlLE9BQUEsQ0FBQUYsQ0FBQSxVQUFBQSxDQUFBLFlBQUFNLFNBQUEseUVBQUFuQixDQUFBLEdBQUFvQixNQUFBLEdBQUFDLE1BQUEsRUFBQXBCLENBQUE7QUFBQSxTQUFBcUIsZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUwsU0FBQTtBQUVqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEsSUFjTU0sV0FBVyxnQkFBQWQsWUFBQSxDQUNmLFNBQUFjLFlBQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLFdBQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQWVBLE1BQU07RUFDaEMsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSUMsNEJBQWUsQ0FBQ0YsTUFBTSxDQUFDO0FBQ3BELENBQUM7QUFBQSxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsY0FHWUwsV0FBVztBQUFBTSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/e_reputation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/e_reputation/hotel_sentiments.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/e_reputation/hotel_sentiments.js ***!
  \**************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/e-reputation/hotel-sentiments` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.eReputation.hotelSentiments;\n * ```\n *\n * @param {Client} client\n */\nvar HotelSentiments = /*#__PURE__*/function () {\n  function HotelSentiments(client) {\n    _classCallCheck(this, HotelSentiments);\n    this.client = client;\n  }\n\n  /**\n   * Get the sentiment analysis of hotel reviews\n   *\n   * @param {Object} params\n   * @param {string} params.hotelIds Comma separated list of Amadeus hotel\n   *   codes to request. Example: XKPARC12\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Get Sentiment Analysis of reviews about Holiday Inn Paris Notre Dame.\n   *\n   * ```js\n   * amadeus.eReputation.hotelSentiments.get({\n   *   hotelIds: 'XKPARC12'\n   * })\n   * ```\n   */\n  return _createClass(HotelSentiments, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v2/e-reputation/hotel-sentiments', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = HotelSentiments;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIb3RlbFNlbnRpbWVudHMiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2VfcmVwdXRhdGlvbi9ob3RlbF9zZW50aW1lbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL2UtcmVwdXRhdGlvbi9ob3RlbC1zZW50aW1lbnRzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuZVJlcHV0YXRpb24uaG90ZWxTZW50aW1lbnRzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBIb3RlbFNlbnRpbWVudHMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNlbnRpbWVudCBhbmFseXNpcyBvZiBob3RlbCByZXZpZXdzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5ob3RlbElkcyBDb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBBbWFkZXVzIGhvdGVsXG4gICAqICAgY29kZXMgdG8gcmVxdWVzdC4gRXhhbXBsZTogWEtQQVJDMTJcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBHZXQgU2VudGltZW50IEFuYWx5c2lzIG9mIHJldmlld3MgYWJvdXQgSG9saWRheSBJbm4gUGFyaXMgTm90cmUgRGFtZS5cbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5lUmVwdXRhdGlvbi5ob3RlbFNlbnRpbWVudHMuZ2V0KHtcbiAgICogICBob3RlbElkczogJ1hLUEFSQzEyJ1xuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92Mi9lLXJlcHV0YXRpb24vaG90ZWwtc2VudGltZW50cycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSG90ZWxTZW50aW1lbnRzOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxlQUFlO0VBQ25CLFNBQUFBLGdCQUFZQyxNQUFNLEVBQUU7SUFBQUMsZUFBQSxPQUFBRixlQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBZkUsT0FBQUUsWUFBQSxDQUFBSCxlQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQWdCQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsbUNBQW1DLEVBQUVDLE1BQU0sQ0FBQztJQUNyRTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosZUFBZTtBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/e_reputation/hotel_sentiments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location.js":
/*!*****************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/location.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _analytics = _interopRequireDefault(__webpack_require__(/*! ./location/analytics */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location/analytics.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/location` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.location;\n * ```\n *\n * @param {Client} client\n * @property {analytics} analytics\n */\nvar Location = /*#__PURE__*/_createClass(function Location(client) {\n  _classCallCheck(this, Location);\n  this.client = client;\n  this.analytics = new _analytics[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Location;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYW5hbHl0aWNzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJMb2NhdGlvbiIsImNsaWVudCIsImFuYWx5dGljcyIsIkFuYWx5dGljcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2xvY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbmFseXRpY3MgICAgZnJvbSAnLi9sb2NhdGlvbi9hbmFseXRpY3MnO1xuXG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9sb2NhdGlvbmAgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLmxvY2F0aW9uO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQHByb3BlcnR5IHthbmFseXRpY3N9IGFuYWx5dGljc1xuICovXG5jbGFzcyBMb2NhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ICAgICAgICAgICAgID0gY2xpZW50O1xuICAgIHRoaXMuYW5hbHl0aWNzID0gbmV3IEFuYWx5dGljcyhjbGllbnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvY2F0aW9uOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUFnRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLGdCQUFBQSxDQUFBO0FBQUEsU0FBQUUsa0JBQUFGLENBQUEsRUFBQUcsQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUQsQ0FBQSxDQUFBRSxNQUFBLEVBQUFELENBQUEsVUFBQUUsQ0FBQSxHQUFBSCxDQUFBLENBQUFDLENBQUEsR0FBQUUsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsQ0FBQUMsVUFBQSxRQUFBRCxDQUFBLENBQUFFLFlBQUEsa0JBQUFGLENBQUEsS0FBQUEsQ0FBQSxDQUFBRyxRQUFBLFFBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLEVBQUFZLGNBQUEsQ0FBQU4sQ0FBQSxDQUFBTyxHQUFBLEdBQUFQLENBQUE7QUFBQSxTQUFBUSxhQUFBZCxDQUFBLEVBQUFHLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFGLENBQUEsQ0FBQWUsU0FBQSxFQUFBWixDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQUYsQ0FBQSxFQUFBSSxDQUFBLEdBQUFNLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLGlCQUFBUyxRQUFBLFNBQUFULENBQUE7QUFBQSxTQUFBWSxlQUFBUixDQUFBLFFBQUFZLENBQUEsR0FBQUMsWUFBQSxDQUFBYixDQUFBLGdDQUFBYyxPQUFBLENBQUFGLENBQUEsSUFBQUEsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQUMsYUFBQWIsQ0FBQSxFQUFBRCxDQUFBLG9CQUFBZSxPQUFBLENBQUFkLENBQUEsTUFBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFKLENBQUEsR0FBQUksQ0FBQSxDQUFBZSxNQUFBLENBQUFDLFdBQUEsa0JBQUFwQixDQUFBLFFBQUFnQixDQUFBLEdBQUFoQixDQUFBLENBQUFxQixJQUFBLENBQUFqQixDQUFBLEVBQUFELENBQUEsZ0NBQUFlLE9BQUEsQ0FBQUYsQ0FBQSxVQUFBQSxDQUFBLFlBQUFNLFNBQUEseUVBQUFuQixDQUFBLEdBQUFvQixNQUFBLEdBQUFDLE1BQUEsRUFBQXBCLENBQUE7QUFBQSxTQUFBcUIsZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUwsU0FBQTtBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEsSUFjTU0sUUFBUSxnQkFBQWQsWUFBQSxDQUNaLFNBQUFjLFNBQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLFFBQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQWVBLE1BQU07RUFDaEMsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUMscUJBQVMsQ0FBQ0YsTUFBTSxDQUFDO0FBQ3hDLENBQUM7QUFBQSxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsY0FHWUwsUUFBUTtBQUFBTSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location/analytics.js":
/*!***************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/location/analytics.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _category_rated_areas = _interopRequireDefault(__webpack_require__(/*! ./analytics/category_rated_areas */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location/analytics/category_rated_areas.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/location/analytics` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.location;\n * ```\n *\n * @param {Client} client\n * @property {analytics} CategoryRatedAreas\n */\nvar Analytics = /*#__PURE__*/_createClass(function Analytics(client) {\n  _classCallCheck(this, Analytics);\n  this.client = client;\n  this.categoryRatedAreas = new _category_rated_areas[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Analytics;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2F0ZWdvcnlfcmF0ZWRfYXJlYXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJyIiwidCIsImxlbmd0aCIsIm8iLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG90eXBlIiwiaSIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJhIiwibiIsIkFuYWx5dGljcyIsImNsaWVudCIsImNhdGVnb3J5UmF0ZWRBcmVhcyIsIkNhdGVnb3J5UmF0ZWRBcmVhcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2xvY2F0aW9uL2FuYWx5dGljcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2F0ZWdvcnlSYXRlZEFyZWFzICAgIGZyb20gJy4vYW5hbHl0aWNzL2NhdGVnb3J5X3JhdGVkX2FyZWFzJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvbG9jYXRpb24vYW5hbHl0aWNzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMubG9jYXRpb247XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge2FuYWx5dGljc30gQ2F0ZWdvcnlSYXRlZEFyZWFzXG4gKi9cbmNsYXNzIEFuYWx5dGljcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuY2F0ZWdvcnlSYXRlZEFyZWFzID0gbmV3IENhdGVnb3J5UmF0ZWRBcmVhcyhjbGllbnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFuYWx5dGljczsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxxQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQXFFLFNBQUFELHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxrQkFBQUYsQ0FBQSxFQUFBRyxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxDQUFBLEdBQUFILENBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxDQUFBQyxVQUFBLFFBQUFELENBQUEsQ0FBQUUsWUFBQSxrQkFBQUYsQ0FBQSxLQUFBQSxDQUFBLENBQUFHLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsRUFBQVksY0FBQSxDQUFBTixDQUFBLENBQUFPLEdBQUEsR0FBQVAsQ0FBQTtBQUFBLFNBQUFRLGFBQUFkLENBQUEsRUFBQUcsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQUYsQ0FBQSxDQUFBZSxTQUFBLEVBQUFaLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBRixDQUFBLEVBQUFJLENBQUEsR0FBQU0sTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsaUJBQUFTLFFBQUEsU0FBQVQsQ0FBQTtBQUFBLFNBQUFZLGVBQUFSLENBQUEsUUFBQVksQ0FBQSxHQUFBQyxZQUFBLENBQUFiLENBQUEsZ0NBQUFjLE9BQUEsQ0FBQUYsQ0FBQSxJQUFBQSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBQyxhQUFBYixDQUFBLEVBQUFELENBQUEsb0JBQUFlLE9BQUEsQ0FBQWQsQ0FBQSxNQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUosQ0FBQSxHQUFBSSxDQUFBLENBQUFlLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQXBCLENBQUEsUUFBQWdCLENBQUEsR0FBQWhCLENBQUEsQ0FBQXFCLElBQUEsQ0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxnQ0FBQWUsT0FBQSxDQUFBRixDQUFBLFVBQUFBLENBQUEsWUFBQU0sU0FBQSx5RUFBQW5CLENBQUEsR0FBQW9CLE1BQUEsR0FBQUMsTUFBQSxFQUFBcEIsQ0FBQTtBQUFBLFNBQUFxQixnQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFVBQUFELENBQUEsWUFBQUMsQ0FBQSxhQUFBTCxTQUFBO0FBRXJFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQSxJQWNNTSxTQUFTLGdCQUFBZCxZQUFBLENBQ2IsU0FBQWMsVUFBWUMsTUFBTSxFQUFFO0VBQUFKLGVBQUEsT0FBQUcsU0FBQTtFQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUNwQixJQUFJLENBQUNDLGtCQUFrQixHQUFHLElBQUlDLGdDQUFrQixDQUFDRixNQUFNLENBQUM7QUFDMUQsQ0FBQztBQUFBLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxjQUdZTCxTQUFTO0FBQUFNLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location/analytics.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location/analytics/category_rated_areas.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/location/analytics/category_rated_areas.js ***!
  \************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/location/analytics/category-rated-areas` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.location.analytics.categoryRatedAreas;\n * ```\n *\n * @param {Client} client\n */\nvar CategoryRatedAreas = /*#__PURE__*/function () {\n  function CategoryRatedAreas(client) {\n    _classCallCheck(this, CategoryRatedAreas);\n    this.client = client;\n  }\n\n  /**\n   * Gets popularity score for location categories\n   *\n   * @param {Object} params\n   * @param {Double} params.latitude latitude location to be at the center of\n   *   the search circle - required\n   * @param {Double} params.longitude longitude location to be at the center of\n   *   the search circle - required\n   * @param {Double} params.radius radius of the search in Kilometer - optional\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Gets popularity score for location categories in Barcelona\n   *\n   * ```js\n   * amadeus.location.analytics.categoryRatedAreas.get({\n   *   longitude: 2.160873,\n   *   latitude: 41.397158\n   * });\n   * ```\n   */\n  return _createClass(CategoryRatedAreas, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/location/analytics/category-rated-areas', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = CategoryRatedAreas;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYXRlZ29yeVJhdGVkQXJlYXMiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL2xvY2F0aW9uL2FuYWx5dGljcy9jYXRlZ29yeV9yYXRlZF9hcmVhcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9sb2NhdGlvbi9hbmFseXRpY3MvY2F0ZWdvcnktcmF0ZWQtYXJlYXNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5sb2NhdGlvbi5hbmFseXRpY3MuY2F0ZWdvcnlSYXRlZEFyZWFzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBDYXRlZ29yeVJhdGVkQXJlYXMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHBvcHVsYXJpdHkgc2NvcmUgZm9yIGxvY2F0aW9uIGNhdGVnb3JpZXNcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmxhdGl0dWRlIGxhdGl0dWRlIGxvY2F0aW9uIHRvIGJlIGF0IHRoZSBjZW50ZXIgb2ZcbiAgICogICB0aGUgc2VhcmNoIGNpcmNsZSAtIHJlcXVpcmVkXG4gICAqIEBwYXJhbSB7RG91YmxlfSBwYXJhbXMubG9uZ2l0dWRlIGxvbmdpdHVkZSBsb2NhdGlvbiB0byBiZSBhdCB0aGUgY2VudGVyIG9mXG4gICAqICAgdGhlIHNlYXJjaCBjaXJjbGUgLSByZXF1aXJlZFxuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLnJhZGl1cyByYWRpdXMgb2YgdGhlIHNlYXJjaCBpbiBLaWxvbWV0ZXIgLSBvcHRpb25hbFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIEdldHMgcG9wdWxhcml0eSBzY29yZSBmb3IgbG9jYXRpb24gY2F0ZWdvcmllcyBpbiBCYXJjZWxvbmFcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5sb2NhdGlvbi5hbmFseXRpY3MuY2F0ZWdvcnlSYXRlZEFyZWFzLmdldCh7XG4gICAqICAgbG9uZ2l0dWRlOiAyLjE2MDg3MyxcbiAgICogICBsYXRpdHVkZTogNDEuMzk3MTU4XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9sb2NhdGlvbi9hbmFseXRpY3MvY2F0ZWdvcnktcmF0ZWQtYXJlYXMnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhdGVnb3J5UmF0ZWRBcmVhcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxrQkFBa0I7RUFDdEIsU0FBQUEsbUJBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLGtCQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFuQkUsT0FBQUUsWUFBQSxDQUFBSCxrQkFBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFvQkEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLDZDQUE2QyxFQUFFQyxNQUFNLENBQUM7SUFDL0U7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLGtCQUFrQjtBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/location/analytics/category_rated_areas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/media.js":
/*!**************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/media.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _files = _interopRequireDefault(__webpack_require__(/*! ./media/files */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/media/files.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v2/media` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.media;\n * ```\n *\n * @param {Client} client\n * @property {Files} files\n */\nvar Media = /*#__PURE__*/_createClass(function Media(client) {\n  _classCallCheck(this, Media);\n  this.client = client;\n  this.files = new _files[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Media;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmlsZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJyIiwidCIsImxlbmd0aCIsIm8iLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG90eXBlIiwiaSIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJhIiwibiIsIk1lZGlhIiwiY2xpZW50IiwiZmlsZXMiLCJGaWxlcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL21lZGlhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGaWxlcyBmcm9tICcuL21lZGlhL2ZpbGVzJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjIvbWVkaWFgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5tZWRpYTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqIEBwcm9wZXJ0eSB7RmlsZXN9IGZpbGVzXG4gKi9cbmNsYXNzIE1lZGlhIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5maWxlcyA9IG5ldyBGaWxlcyhjbGllbnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lZGlhO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQWtDLFNBQUFELHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxrQkFBQUYsQ0FBQSxFQUFBRyxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxDQUFBLEdBQUFILENBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxDQUFBQyxVQUFBLFFBQUFELENBQUEsQ0FBQUUsWUFBQSxrQkFBQUYsQ0FBQSxLQUFBQSxDQUFBLENBQUFHLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsRUFBQVksY0FBQSxDQUFBTixDQUFBLENBQUFPLEdBQUEsR0FBQVAsQ0FBQTtBQUFBLFNBQUFRLGFBQUFkLENBQUEsRUFBQUcsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQUYsQ0FBQSxDQUFBZSxTQUFBLEVBQUFaLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBRixDQUFBLEVBQUFJLENBQUEsR0FBQU0sTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsaUJBQUFTLFFBQUEsU0FBQVQsQ0FBQTtBQUFBLFNBQUFZLGVBQUFSLENBQUEsUUFBQVksQ0FBQSxHQUFBQyxZQUFBLENBQUFiLENBQUEsZ0NBQUFjLE9BQUEsQ0FBQUYsQ0FBQSxJQUFBQSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBQyxhQUFBYixDQUFBLEVBQUFELENBQUEsb0JBQUFlLE9BQUEsQ0FBQWQsQ0FBQSxNQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUosQ0FBQSxHQUFBSSxDQUFBLENBQUFlLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQXBCLENBQUEsUUFBQWdCLENBQUEsR0FBQWhCLENBQUEsQ0FBQXFCLElBQUEsQ0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxnQ0FBQWUsT0FBQSxDQUFBRixDQUFBLFVBQUFBLENBQUEsWUFBQU0sU0FBQSx5RUFBQW5CLENBQUEsR0FBQW9CLE1BQUEsR0FBQUMsTUFBQSxFQUFBcEIsQ0FBQTtBQUFBLFNBQUFxQixnQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFVBQUFELENBQUEsWUFBQUMsQ0FBQSxhQUFBTCxTQUFBO0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQSxJQWNNTSxLQUFLLGdCQUFBZCxZQUFBLENBQ1QsU0FBQWMsTUFBWUMsTUFBTSxFQUFFO0VBQUFKLGVBQUEsT0FBQUcsS0FBQTtFQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUNwQixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQyxpQkFBSyxDQUFDRixNQUFNLENBQUM7QUFDaEMsQ0FBQztBQUFBLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxjQUdZTCxLQUFLO0FBQUFNLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL21lZGlhLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixvQ0FBb0MsbUJBQU8sQ0FBQyx5RkFBZTtBQUMzRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixlQUFlO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxlQUFlLGtCQUFrQjtBQUNqQztBQUNBLDJDQUEyQyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdHJhdmVsLWFnZW5jeS8uL25vZGVfbW9kdWxlcy9hbWFkZXVzL2xpYi9hbWFkZXVzL25hbWVzcGFjZXMvbWVkaWEuanM/ZjVjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9maWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWVkaWEvZmlsZXNcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL21lZGlhYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMubWVkaWE7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge0ZpbGVzfSBmaWxlc1xuICovXG52YXIgTWVkaWEgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUNsYXNzKGZ1bmN0aW9uIE1lZGlhKGNsaWVudCkge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWEpO1xuICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgdGhpcy5maWxlcyA9IG5ldyBfZmlsZXNbXCJkZWZhdWx0XCJdKGNsaWVudCk7XG59KTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gTWVkaWE7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKZlptbHNaWE1pTENKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1VaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWDJSbFptbHVaVkJ5YjNCbGNuUnBaWE1pTENKeUlpd2lkQ0lzSW14bGJtZDBhQ0lzSW04aUxDSmxiblZ0WlhKaFlteGxJaXdpWTI5dVptbG5kWEpoWW14bElpd2lkM0pwZEdGaWJHVWlMQ0pQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbDkwYjFCeWIzQmxjblI1UzJWNUlpd2lhMlY1SWl3aVgyTnlaV0YwWlVOc1lYTnpJaXdpY0hKdmRHOTBlWEJsSWl3aWFTSXNJbDkwYjFCeWFXMXBkR2wyWlNJc0lsOTBlWEJsYjJZaUxDSlRlVzFpYjJ3aUxDSjBiMUJ5YVcxcGRHbDJaU0lzSW1OaGJHd2lMQ0pVZVhCbFJYSnliM0lpTENKVGRISnBibWNpTENKT2RXMWlaWElpTENKZlkyeGhjM05EWVd4c1EyaGxZMnNpTENKaElpd2liaUlzSWsxbFpHbGhJaXdpWTJ4cFpXNTBJaXdpWm1sc1pYTWlMQ0pHYVd4bGN5SXNJbDlrWldaaGRXeDBJaXdpWlhod2IzSjBjeUlzSW0xdlpIVnNaU0lzSW1SbFptRjFiSFFpWFN3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12WVcxaFpHVjFjeTl1WVcxbGMzQmhZMlZ6TDIxbFpHbGhMbXB6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCR2FXeGxjeUJtY205dElDY3VMMjFsWkdsaEwyWnBiR1Z6Snp0Y2JseHVMeW9xWEc0Z0tpQkJJRzVoYldWemNHRmpaV1FnWTJ4cFpXNTBJR1p2Y2lCMGFHVmNiaUFxSUdBdmRqSXZiV1ZrYVdGZ0lHVnVaSEJ2YVc1MGMxeHVJQ3BjYmlBcUlFRmpZMlZ6Y3lCMmFXRWdkR2hsSUh0QWJHbHVheUJCYldGa1pYVnpmU0J2WW1wbFkzUmNiaUFxWEc0Z0tpQmdZR0JxYzF4dUlDb2diR1YwSUdGdFlXUmxkWE1nUFNCdVpYY2dRVzFoWkdWMWN5Z3BPMXh1SUNvZ1lXMWhaR1YxY3k1dFpXUnBZVHRjYmlBcUlHQmdZRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdRMnhwWlc1MGZTQmpiR2xsYm5SY2JpQXFJRUJ3Y205d1pYSjBlU0I3Um1sc1pYTjlJR1pwYkdWelhHNGdLaTljYm1Oc1lYTnpJRTFsWkdsaElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb1kyeHBaVzUwS1NCN1hHNGdJQ0FnZEdocGN5NWpiR2xsYm5RZ1BTQmpiR2xsYm5RN1hHNGdJQ0FnZEdocGN5NW1hV3hsY3lBOUlHNWxkeUJHYVd4bGN5aGpiR2xsYm5RcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFMWxaR2xoTzF4dUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPMEZCUVVFc1NVRkJRVUVzVFVGQlFTeEhRVUZCUXl4elFrRkJRU3hEUVVGQlF5eFBRVUZCTzBGQlFXdERMRk5CUVVGRUxIVkNRVUZCUlN4RFFVRkJMRmRCUVVGQkxFTkJRVUVzU1VGQlFVRXNRMEZCUVN4RFFVRkJReXhWUVVGQkxFZEJRVUZFTEVOQlFVRXNaMEpCUVVGQkxFTkJRVUU3UVVGQlFTeFRRVUZCUlN4clFrRkJRVVlzUTBGQlFTeEZRVUZCUnl4RFFVRkJMR0ZCUVVGRExFTkJRVUVzVFVGQlFVRXNRMEZCUVN4SFFVRkJSQ3hEUVVGQkxFTkJRVUZGTEUxQlFVRXNSVUZCUVVRc1EwRkJRU3hWUVVGQlJTeERRVUZCTEVkQlFVRklMRU5CUVVFc1EwRkJRVU1zUTBGQlFTeEhRVUZCUlN4RFFVRkJMRU5CUVVGRExGVkJRVUVzUjBGQlFVUXNRMEZCUVN4RFFVRkJReXhWUVVGQkxGRkJRVUZFTEVOQlFVRXNRMEZCUVVVc1dVRkJRU3hyUWtGQlFVWXNRMEZCUVN4TFFVRkJRU3hEUVVGQkxFTkJRVUZITEZGQlFVRXNVVUZCUVVNc1RVRkJRU3hEUVVGQlF5eGpRVUZCTEVOQlFVRllMRU5CUVVFc1JVRkJRVmtzWTBGQlFTeERRVUZCVGl4RFFVRkJMRU5CUVVGUExFZEJRVUVzUjBGQlFWQXNRMEZCUVR0QlFVRkJMRk5CUVVGUkxHRkJRVUZrTEVOQlFVRXNSVUZCUVVjc1EwRkJRU3hGUVVGQlF5eERRVUZCTEZkQlFVRkVMRU5CUVVFc1NVRkJRVVFzYVVKQlFVRXNRMEZCUVVZc1EwRkJRU3hEUVVGQlpTeFRRVUZCTEVWQlFVRmFMRU5CUVVFc1IwRkJRVU1zUTBGQlFTeEpRVUZCUml4cFFrRkJRU3hEUVVGQlJpeERRVUZCTEVWQlFVRkpMRU5CUVVFc1IwRkJRVTBzVFVGQlFTeERRVUZCUXl4alFVRkJMRU5CUVVGWUxFTkJRVUVzYVVKQlFVRlRMRkZCUVVFc1UwRkJRVlFzUTBGQlFUdEJRVUZCTEZOQlFVRlpMR1ZCUVVGU0xFTkJRVUVzVVVGQlFWa3NRMEZCUVN4SFFVRkJReXhaUVVGQkxFTkJRVUZpTEVOQlFVRXNaME5CUVVGakxFOUJRVUVzUTBGQlFVWXNRMEZCUVN4SlFVRkJRU3hEUVVGQkxFZEJRVUZCTEVOQlFVRTdRVUZCUVN4VFFVRkJReXhoUVVGQllpeERRVUZCTEVWQlFVRkVMRU5CUVVFc2IwSkJRVUZsTEU5QlFVRXNRMEZCUVdRc1EwRkJRU3hOUVVGQlFTeERRVUZCTEZOQlFVRkJMRU5CUVVFc1RVRkJRVW9zUTBGQlFTeEhRVUZCU1N4RFFVRkJMRU5CUVVGbExFMUJRVUVzUTBGQlFVTXNWMEZCUVN4clFrRkJRWEJDTEVOQlFVRXNVVUZCUVdkQ0xFTkJRVUVzUjBGQlFXaENMRU5CUVVFc1EwRkJRWEZDTEVsQlFVRXNRMEZCUVdwQ0xFTkJRVUVzUlVGQlFVUXNRMEZCUVN4blEwRkJRV1VzVDBGQlFTeERRVUZCUml4RFFVRkJMRlZCUVVGQkxFTkJRVUVzV1VGQlFVMHNVMEZCUVN4NVJVRkJRVzVDTEVOQlFVRXNSMEZCUVc5Q0xFMUJRVUVzUjBGQlFVTXNUVUZCUVN4RlFVRkJjRUlzUTBGQlFUdEJRVUZCTEZOQlFVRnhRaXhuUWtGQlFVTXNRMEZCUVN4RlFVRkJReXhEUVVGQkxGVkJRVUZFTEVOQlFVRXNXVUZCUVVNc1EwRkJRU3hoUVVGQlRDeFRRVUZCTzBGQlJXeERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGaVFTeEpRV05OVFN4TFFVRkxMR2RDUVVGQlpDeFpRVUZCTEVOQlExUXNVMEZCUVdNc1RVRkJXVU1zVFVGQlRTeEZRVUZGTzBWQlFVRktMR1ZCUVVFc1QwRkJRVWNzUzBGQlFUdEZRVU5zUWl4SlFVRkpMRU5CUVVORExFMUJRVTBzUjBGQlIwRXNUVUZCVFR0RlFVTndRaXhKUVVGSkxFTkJRVU5ETEV0QlFVc3NSMEZCUnl4SlFVRkpReXhwUWtGQlN5eERRVUZEUml4TlFVRk5MRU5CUVVNN1FVRkRhRU1zUTBGQlF6dEJRVUZCTEVsQlFVRkhMRkZCUVVFc1IwRkJRVU1zVDBGQlFTeGpRVWRaVEN4TFFVRkxPMEZCUVVGTkxFMUJRVUVzUTBGQlFVUXNUMEZCUVN4SFFVRkJRU3hQUVVGQkxFTkJRVUZGTEU5QlFVRWlMQ0pwWjI1dmNtVk1hWE4wSWpwYlhYMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/media.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/media/files.js":
/*!********************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/media/files.js ***!
  \********************************************************************/
/***/ ((module, exports) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v2/media/files` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.media.files;\n * ```\n *\n * @param {Client} client\n */\nvar Files = /*#__PURE__*/_createClass(function Files(client) {\n  _classCallCheck(this, Files);\n  this.client = client;\n});\nvar _default = exports[\"default\"] = Files;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaWxlcyIsIl9jcmVhdGVDbGFzcyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL21lZGlhL2ZpbGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL21lZGlhL2ZpbGVzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMubWVkaWEuZmlsZXM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIEZpbGVzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsZXM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsS0FBSyxnQkFBQUMsWUFBQSxDQUNULFNBQUFELE1BQVlFLE1BQU0sRUFBRTtFQUFBQyxlQUFBLE9BQUFILEtBQUE7RUFDbEIsSUFBSSxDQUFDRSxNQUFNLEdBQUdBLE1BQU07QUFDdEIsQ0FBQztBQUFBLElBQUFFLFFBQUEsR0FBQUMsT0FBQSxjQUdZTCxLQUFLO0FBQUFNLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL21lZGlhL2ZpbGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsZUFBZSxrQkFBa0I7QUFDakM7QUFDQSwyQ0FBMkMsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXRyYXZlbC1hZ2VuY3kvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL21lZGlhL2ZpbGVzLmpzPzNmYTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL21lZGlhL2ZpbGVzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMubWVkaWEuZmlsZXM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbnZhciBGaWxlcyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlQ2xhc3MoZnVuY3Rpb24gRmlsZXMoY2xpZW50KSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlcyk7XG4gIHRoaXMuY2xpZW50ID0gY2xpZW50O1xufSk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IEZpbGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SkdhV3hsY3lJc0lsOWpjbVZoZEdWRGJHRnpjeUlzSW1Oc2FXVnVkQ0lzSWw5amJHRnpjME5oYkd4RGFHVmpheUlzSWw5a1pXWmhkV3gwSWl3aVpYaHdiM0owY3lJc0ltMXZaSFZzWlNJc0ltUmxabUYxYkhRaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5emNtTXZZVzFoWkdWMWN5OXVZVzFsYzNCaFkyVnpMMjFsWkdsaEwyWnBiR1Z6TG1weklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRU0J1WVcxbGMzQmhZMlZrSUdOc2FXVnVkQ0JtYjNJZ2RHaGxYRzRnS2lCZ0wzWXlMMjFsWkdsaEwyWnBiR1Z6WUNCbGJtUndiMmx1ZEhOY2JpQXFYRzRnS2lCQlkyTmxjM01nZG1saElIUm9aU0I3UUd4cGJtc2dRVzFoWkdWMWMzMGdiMkpxWldOMFhHNGdLbHh1SUNvZ1lHQmdhbk5jYmlBcUlHeGxkQ0JoYldGa1pYVnpJRDBnYm1WM0lFRnRZV1JsZFhNb0tUdGNiaUFxSUdGdFlXUmxkWE11YldWa2FXRXVabWxzWlhNN1hHNGdLaUJnWUdCY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBOc2FXVnVkSDBnWTJ4cFpXNTBYRzRnS2k5Y2JtTnNZWE56SUVacGJHVnpJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9ZMnhwWlc1MEtTQjdYRzRnSUNBZ2RHaHBjeTVqYkdsbGJuUWdQU0JqYkdsbGJuUTdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdSbWxzWlhNN1hHNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096dEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCV2tFc1NVRmhUVUVzUzBGQlN5eG5Ra0ZCUVVNc1dVRkJRU3hEUVVOVUxGTkJRVUZFTEUxQlFWbEZMRTFCUVUwc1JVRkJSVHRGUVVGQlF5eGxRVUZCTEU5QlFVRklMRXRCUVVFN1JVRkRiRUlzU1VGQlNTeERRVUZEUlN4TlFVRk5MRWRCUVVkQkxFMUJRVTA3UVVGRGRFSXNRMEZCUXp0QlFVRkJMRWxCUVVGRkxGRkJRVUVzUjBGQlFVTXNUMEZCUVN4alFVZFpUQ3hMUVVGTE8wRkJRVUZOTEUxQlFVRXNRMEZCUVVRc1QwRkJRU3hIUVVGQlFTeFBRVUZCTEVOQlFVRkZMRTlCUVVFaUxDSnBaMjV2Y21WTWFYTjBJanBiWFgwPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/media/files.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering.js":
/*!*****************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/ordering.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _transfer_orders = _interopRequireDefault(__webpack_require__(/*! ./ordering/transfer_orders */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders.js\"));\nvar _transfer_order = _interopRequireDefault(__webpack_require__(/*! ./ordering/transfer_order */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_order.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/ordering` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.ordering;\n * ```\n *\n * @param {Client} client\n * @property {TransferOrders} transferOrders\n * @property {TransferOrder} transferOrder\n */\nvar Ordering = /*#__PURE__*/_createClass(function Ordering(client) {\n  _classCallCheck(this, Ordering);\n  this.client = client;\n  this.transferOrders = new _transfer_orders[\"default\"](client);\n  this.transferOrder = function (orderId) {\n    return new _transfer_order[\"default\"](client, orderId);\n  };\n});\nvar _default = exports[\"default\"] = Ordering;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHJhbnNmZXJfb3JkZXJzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdHJhbnNmZXJfb3JkZXIiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJPcmRlcmluZyIsImNsaWVudCIsInRyYW5zZmVyT3JkZXJzIiwiVHJhbnNmZXJPcmRlcnMiLCJ0cmFuc2Zlck9yZGVyIiwib3JkZXJJZCIsIlRyYW5zZmVyT3JkZXIiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9vcmRlcmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVHJhbnNmZXJPcmRlcnMgZnJvbSAnLi9vcmRlcmluZy90cmFuc2Zlcl9vcmRlcnMnO1xuaW1wb3J0IFRyYW5zZmVyT3JkZXIgZnJvbSAnLi9vcmRlcmluZy90cmFuc2Zlcl9vcmRlcic7XG5cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL29yZGVyaW5nYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMub3JkZXJpbmc7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge1RyYW5zZmVyT3JkZXJzfSB0cmFuc2Zlck9yZGVyc1xuICogQHByb3BlcnR5IHtUcmFuc2Zlck9yZGVyfSB0cmFuc2Zlck9yZGVyXG4gKi9cbmNsYXNzIE9yZGVyaW5nIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy50cmFuc2Zlck9yZGVycyA9IG5ldyBUcmFuc2Zlck9yZGVycyhjbGllbnQpO1xuICAgIHRoaXMudHJhbnNmZXJPcmRlciA9IChvcmRlcklkKSA9PiBuZXcgVHJhbnNmZXJPcmRlcihjbGllbnQsIG9yZGVySWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9yZGVyaW5nOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLGdCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBc0QsU0FBQUQsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEEsSUFlTU0sUUFBUSxnQkFBQWQsWUFBQSxDQUNaLFNBQUFjLFNBQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLFFBQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDcEIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSUMsMkJBQWMsQ0FBQ0YsTUFBTSxDQUFDO0VBQ2hELElBQUksQ0FBQ0csYUFBYSxHQUFHLFVBQUNDLE9BQU87SUFBQSxPQUFLLElBQUlDLDBCQUFhLENBQUNMLE1BQU0sRUFBRUksT0FBTyxDQUFDO0VBQUE7QUFDdEUsQ0FBQztBQUFBLElBQUFFLFFBQUEsR0FBQUMsT0FBQSxjQUdZUixRQUFRO0FBQUFTLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_order.js":
/*!********************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_order.js ***!
  \********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _transfers = _interopRequireDefault(__webpack_require__(/*! ./transfer_orders/transfers */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders/transfers.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/ordering/transfer-orders/XXXXX` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.ordering.transferOrder('XXX');\n * ```\n *\n * @param {Client} client\n * @param {string} orderId\n */\nvar TransferOrder = /*#__PURE__*/_createClass(function TransferOrder(client, orderId) {\n  _classCallCheck(this, TransferOrder);\n  this.client = client;\n  this.orderId = orderId;\n  this.transfers = new _transfers[\"default\"](client, orderId);\n});\nvar _default = exports[\"default\"] = TransferOrder;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHJhbnNmZXJzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJUcmFuc2Zlck9yZGVyIiwiY2xpZW50Iiwib3JkZXJJZCIsInRyYW5zZmVycyIsIlRyYW5zZmVycyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL29yZGVyaW5nL3RyYW5zZmVyX29yZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUcmFuc2ZlcnMgZnJvbSAnLi90cmFuc2Zlcl9vcmRlcnMvdHJhbnNmZXJzJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvb3JkZXJpbmcvdHJhbnNmZXItb3JkZXJzL1hYWFhYYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMub3JkZXJpbmcudHJhbnNmZXJPcmRlcignWFhYJyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gb3JkZXJJZFxuICovXG5jbGFzcyBUcmFuc2Zlck9yZGVyIHtcbiAgY29uc3RydWN0b3IoY2xpZW50LCBvcmRlcklkKSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5vcmRlcklkID0gb3JkZXJJZDtcbiAgICB0aGlzLnRyYW5zZmVycyA9IG5ldyBUcmFuc2ZlcnMoY2xpZW50LCBvcmRlcklkKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmFuc2Zlck9yZGVyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUFvRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLGdCQUFBQSxDQUFBO0FBQUEsU0FBQUUsa0JBQUFGLENBQUEsRUFBQUcsQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUQsQ0FBQSxDQUFBRSxNQUFBLEVBQUFELENBQUEsVUFBQUUsQ0FBQSxHQUFBSCxDQUFBLENBQUFDLENBQUEsR0FBQUUsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsQ0FBQUMsVUFBQSxRQUFBRCxDQUFBLENBQUFFLFlBQUEsa0JBQUFGLENBQUEsS0FBQUEsQ0FBQSxDQUFBRyxRQUFBLFFBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLEVBQUFZLGNBQUEsQ0FBQU4sQ0FBQSxDQUFBTyxHQUFBLEdBQUFQLENBQUE7QUFBQSxTQUFBUSxhQUFBZCxDQUFBLEVBQUFHLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFGLENBQUEsQ0FBQWUsU0FBQSxFQUFBWixDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQUYsQ0FBQSxFQUFBSSxDQUFBLEdBQUFNLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLGlCQUFBUyxRQUFBLFNBQUFULENBQUE7QUFBQSxTQUFBWSxlQUFBUixDQUFBLFFBQUFZLENBQUEsR0FBQUMsWUFBQSxDQUFBYixDQUFBLGdDQUFBYyxPQUFBLENBQUFGLENBQUEsSUFBQUEsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQUMsYUFBQWIsQ0FBQSxFQUFBRCxDQUFBLG9CQUFBZSxPQUFBLENBQUFkLENBQUEsTUFBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFKLENBQUEsR0FBQUksQ0FBQSxDQUFBZSxNQUFBLENBQUFDLFdBQUEsa0JBQUFwQixDQUFBLFFBQUFnQixDQUFBLEdBQUFoQixDQUFBLENBQUFxQixJQUFBLENBQUFqQixDQUFBLEVBQUFELENBQUEsZ0NBQUFlLE9BQUEsQ0FBQUYsQ0FBQSxVQUFBQSxDQUFBLFlBQUFNLFNBQUEseUVBQUFuQixDQUFBLEdBQUFvQixNQUFBLEdBQUFDLE1BQUEsRUFBQXBCLENBQUE7QUFBQSxTQUFBcUIsZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUwsU0FBQTtBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEsSUFjTU0sYUFBYSxnQkFBQWQsWUFBQSxDQUNqQixTQUFBYyxjQUFZQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtFQUFBTCxlQUFBLE9BQUFHLGFBQUE7RUFDM0IsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDcEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBLE9BQU87RUFDdEIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUMscUJBQVMsQ0FBQ0gsTUFBTSxFQUFFQyxPQUFPLENBQUM7QUFDakQsQ0FBQztBQUFBLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxjQUdZTixhQUFhO0FBQUFPLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_order.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders.js ***!
  \*********************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/ordering/transfer-orders` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.ordering.transferOrders;\n * ```\n *\n * @param {Client} client\n */\nvar TransferOrders = /*#__PURE__*/function () {\n  function TransferOrders(client) {\n    _classCallCheck(this, TransferOrders);\n    this.client = client;\n  }\n\n  /**\n   * To book the selected transfer-offer and create a transfer-order\n   *\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To book the transfer-offer(s) suggested by transferOffers and create a transfer-order\n   *\n   * ```js\n   * amadeus.ordering.transferOrders.post(body, '2094123123');;\n   * ```\n   */\n  return _createClass(TransferOrders, [{\n    key: \"post\",\n    value: function post(body, offerId) {\n      return this.client.post(\"/v1/ordering/transfer-orders?offerId=\".concat(offerId), body);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = TransferOrders;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUcmFuc2Zlck9yZGVycyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwicG9zdCIsImJvZHkiLCJvZmZlcklkIiwiY29uY2F0IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvb3JkZXJpbmcvdHJhbnNmZXJfb3JkZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL29yZGVyaW5nL3RyYW5zZmVyLW9yZGVyc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLm9yZGVyaW5nLnRyYW5zZmVyT3JkZXJzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBUcmFuc2Zlck9yZGVycyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuXG4gIH1cblxuICAvKipcbiAgICogVG8gYm9vayB0aGUgc2VsZWN0ZWQgdHJhbnNmZXItb2ZmZXIgYW5kIGNyZWF0ZSBhIHRyYW5zZmVyLW9yZGVyXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gYm9vayB0aGUgdHJhbnNmZXItb2ZmZXIocykgc3VnZ2VzdGVkIGJ5IHRyYW5zZmVyT2ZmZXJzIGFuZCBjcmVhdGUgYSB0cmFuc2Zlci1vcmRlclxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLm9yZGVyaW5nLnRyYW5zZmVyT3JkZXJzLnBvc3QoYm9keSwgJzIwOTQxMjMxMjMnKTs7XG4gICAqIGBgYFxuICAgKi9cbiAgcG9zdChib2R5LCBvZmZlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoYC92MS9vcmRlcmluZy90cmFuc2Zlci1vcmRlcnM/b2ZmZXJJZD0ke29mZmVySWR9YCwgYm9keSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJhbnNmZXJPcmRlcnM7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLGNBQWM7RUFDbEIsU0FBQUEsZUFBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsY0FBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUV0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBVkUsT0FBQUUsWUFBQSxDQUFBSCxjQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQVdBLFNBQUFDLEtBQUtDLElBQUksRUFBRUMsT0FBTyxFQUFFO01BQ2xCLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLElBQUkseUNBQUFHLE1BQUEsQ0FBeUNELE9BQU8sR0FBSUQsSUFBSSxDQUFDO0lBQ2xGO0VBQUM7QUFBQTtBQUFBLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxjQUdZWCxjQUFjO0FBQUFZLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL29yZGVyaW5nL3RyYW5zZmVyX29yZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtDQUFrQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsMkNBQTJDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10cmF2ZWwtYWdlbmN5Ly4vbm9kZV9tb2R1bGVzL2FtYWRldXMvbGliL2FtYWRldXMvbmFtZXNwYWNlcy9vcmRlcmluZy90cmFuc2Zlcl9vcmRlcnMuanM/YjM0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvb3JkZXJpbmcvdHJhbnNmZXItb3JkZXJzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMub3JkZXJpbmcudHJhbnNmZXJPcmRlcnM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbnZhciBUcmFuc2Zlck9yZGVycyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRyYW5zZmVyT3JkZXJzKGNsaWVudCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2Zlck9yZGVycyk7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogVG8gYm9vayB0aGUgc2VsZWN0ZWQgdHJhbnNmZXItb2ZmZXIgYW5kIGNyZWF0ZSBhIHRyYW5zZmVyLW9yZGVyXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gYm9vayB0aGUgdHJhbnNmZXItb2ZmZXIocykgc3VnZ2VzdGVkIGJ5IHRyYW5zZmVyT2ZmZXJzIGFuZCBjcmVhdGUgYSB0cmFuc2Zlci1vcmRlclxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLm9yZGVyaW5nLnRyYW5zZmVyT3JkZXJzLnBvc3QoYm9keSwgJzIwOTQxMjMxMjMnKTs7XG4gICAqIGBgYFxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhUcmFuc2Zlck9yZGVycywgW3tcbiAgICBrZXk6IFwicG9zdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0KGJvZHksIG9mZmVySWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KFwiL3YxL29yZGVyaW5nL3RyYW5zZmVyLW9yZGVycz9vZmZlcklkPVwiLmNvbmNhdChvZmZlcklkKSwgYm9keSk7XG4gICAgfVxuICB9XSk7XG59KCk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IFRyYW5zZmVyT3JkZXJzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SlVjbUZ1YzJabGNrOXlaR1Z5Y3lJc0ltTnNhV1Z1ZENJc0lsOWpiR0Z6YzBOaGJHeERhR1ZqYXlJc0lsOWpjbVZoZEdWRGJHRnpjeUlzSW10bGVTSXNJblpoYkhWbElpd2ljRzl6ZENJc0ltSnZaSGtpTENKdlptWmxja2xrSWl3aVkyOXVZMkYwSWl3aVgyUmxabUYxYkhRaUxDSmxlSEJ2Y25Seklpd2liVzlrZFd4bElpd2laR1ZtWVhWc2RDSmRMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwzTnlZeTloYldGa1pYVnpMMjVoYldWemNHRmpaWE12YjNKa1pYSnBibWN2ZEhKaGJuTm1aWEpmYjNKa1pYSnpMbXB6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1FTQnVZVzFsYzNCaFkyVmtJR05zYVdWdWRDQm1iM0lnZEdobFhHNGdLaUJnTDNZeEwyOXlaR1Z5YVc1bkwzUnlZVzV6Wm1WeUxXOXlaR1Z5YzJBZ1pXNWtjRzlwYm5SelhHNGdLbHh1SUNvZ1FXTmpaWE56SUhacFlTQjBhR1VnZTBCc2FXNXJJRUZ0WVdSbGRYTjlJRzlpYW1WamRGeHVJQ3BjYmlBcUlHQmdZR3B6WEc0Z0tpQnNaWFFnWVcxaFpHVjFjeUE5SUc1bGR5QkJiV0ZrWlhWektDazdYRzRnS2lCaGJXRmtaWFZ6TG05eVpHVnlhVzVuTG5SeVlXNXpabVZ5VDNKa1pYSnpPMXh1SUNvZ1lHQmdYRzRnS2x4dUlDb2dRSEJoY21GdElIdERiR2xsYm5SOUlHTnNhV1Z1ZEZ4dUlDb3ZYRzVqYkdGemN5QlVjbUZ1YzJabGNrOXlaR1Z5Y3lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0dOc2FXVnVkQ2tnZTF4dUlDQWdJSFJvYVhNdVkyeHBaVzUwSUQwZ1kyeHBaVzUwTzF4dVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWRzhnWW05dmF5QjBhR1VnYzJWc1pXTjBaV1FnZEhKaGJuTm1aWEl0YjJabVpYSWdZVzVrSUdOeVpXRjBaU0JoSUhSeVlXNXpabVZ5TFc5eVpHVnlYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlV1UEZKbGMzQnZibk5sTEZKbGMzQnZibk5sUlhKeWIzSStmU0JoSUZCeWIyMXBjMlZjYmlBZ0lDcGNiaUFnSUNvZ1ZHOGdZbTl2YXlCMGFHVWdkSEpoYm5ObVpYSXRiMlptWlhJb2N5a2djM1ZuWjJWemRHVmtJR0o1SUhSeVlXNXpabVZ5VDJabVpYSnpJR0Z1WkNCamNtVmhkR1VnWVNCMGNtRnVjMlpsY2kxdmNtUmxjbHh1SUNBZ0tseHVJQ0FnS2lCZ1lHQnFjMXh1SUNBZ0tpQmhiV0ZrWlhWekxtOXlaR1Z5YVc1bkxuUnlZVzV6Wm1WeVQzSmtaWEp6TG5CdmMzUW9ZbTlrZVN3Z0p6SXdPVFF4TWpNeE1qTW5LVHM3WEc0Z0lDQXFJR0JnWUZ4dUlDQWdLaTljYmlBZ2NHOXpkQ2hpYjJSNUxDQnZabVpsY2tsa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMnhwWlc1MExuQnZjM1FvWUM5Mk1TOXZjbVJsY21sdVp5OTBjbUZ1YzJabGNpMXZjbVJsY25NL2IyWm1aWEpKWkQwa2UyOW1abVZ5U1dSOVlDd2dZbTlrZVNrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1ZISmhibk5tWlhKUGNtUmxjbk03SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFWcEJMRWxCWVUxQkxHTkJRV003UlVGRGJFSXNVMEZCUVVFc1pVRkJXVU1zVFVGQlRTeEZRVUZGTzBsQlFVRkRMR1ZCUVVFc1QwRkJRVVlzWTBGQlFUdEpRVU5zUWl4SlFVRkpMRU5CUVVORExFMUJRVTBzUjBGQlIwRXNUVUZCVFR0RlFVVjBRanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlZrVXNUMEZCUVVVc1dVRkJRU3hEUVVGQlNDeGpRVUZCTzBsQlFVRkpMRWRCUVVFN1NVRkJRVU1zUzBGQlFTeEZRVmRCTEZOQlFVRkRMRXRCUVV0RExFbEJRVWtzUlVGQlJVTXNUMEZCVHl4RlFVRkZPMDFCUTJ4Q0xFOUJRVThzU1VGQlNTeERRVUZEVUN4TlFVRk5MRU5CUVVOTExFbEJRVWtzZVVOQlFVRkhMRTFCUVVFc1EwRkJlVU5FTEU5QlFVOHNSMEZCU1VRc1NVRkJTU3hEUVVGRE8wbEJRMnhHTzBWQlFVTTdRVUZCUVR0QlFVRkJMRWxCUVVGSExGRkJRVUVzUjBGQlFVTXNUMEZCUVN4alFVZFpXQ3hqUVVGak8wRkJRVUZaTEUxQlFVRXNRMEZCUVVRc1QwRkJRU3hIUVVGQlFTeFBRVUZCTEVOQlFVRkZMRTlCUVVFaUxDSnBaMjV2Y21WTWFYTjBJanBiWFgwPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders/transfers.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders/transfers.js ***!
  \*******************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _cancellation = _interopRequireDefault(__webpack_require__(/*! ./transfers/cancellation */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders/transfers/cancellation.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/ordering/transfer-orders/XXXXX/transfers` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.ordering.transferOrders('XXX').transfers;\n * ```\n *\n * @param {Client} client\n */\nvar Transfers = /*#__PURE__*/_createClass(function Transfers(client, orderId) {\n  _classCallCheck(this, Transfers);\n  this.client = client;\n  this.orderId = orderId;\n  this.cancellation = new _cancellation[\"default\"](client, orderId);\n});\nvar _default = exports[\"default\"] = Transfers;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2FuY2VsbGF0aW9uIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJUcmFuc2ZlcnMiLCJjbGllbnQiLCJvcmRlcklkIiwiY2FuY2VsbGF0aW9uIiwiQ2FuY2VsbGF0aW9uIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvb3JkZXJpbmcvdHJhbnNmZXJfb3JkZXJzL3RyYW5zZmVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2FuY2VsbGF0aW9uIGZyb20gJy4vdHJhbnNmZXJzL2NhbmNlbGxhdGlvbic7XG5cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL29yZGVyaW5nL3RyYW5zZmVyLW9yZGVycy9YWFhYWC90cmFuc2ZlcnNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5vcmRlcmluZy50cmFuc2Zlck9yZGVycygnWFhYJykudHJhbnNmZXJzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBUcmFuc2ZlcnMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG9yZGVySWQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLm9yZGVySWQgPSBvcmRlcklkO1xuICAgIHRoaXMuY2FuY2VsbGF0aW9uID0gbmV3IENhbmNlbGxhdGlvbihjbGllbnQsIG9yZGVySWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyYW5zZmVyczsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBb0QsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNTSxTQUFTLGdCQUFBZCxZQUFBLENBQ2IsU0FBQWMsVUFBWUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7RUFBQUwsZUFBQSxPQUFBRyxTQUFBO0VBQzNCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3BCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0VBQ3RCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlDLHdCQUFZLENBQUNILE1BQU0sRUFBRUMsT0FBTyxDQUFDO0FBQ3ZELENBQUM7QUFBQSxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsY0FHWU4sU0FBUztBQUFBTyxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders/transfers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders/transfers/cancellation.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders/transfers/cancellation.js ***!
  \********************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/ordering/transfer-orders/XXX/transfers/cancellation` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.ordering.transferOrder('XXX').transfers.cancellation.post(JSON.stringify({}), '12345');;\n * ```\n *\n * @param {Client} client\n */\nvar Cancellation = /*#__PURE__*/function () {\n  function Cancellation(client, orderId) {\n    _classCallCheck(this, Cancellation);\n    this.client = client;\n    this.orderId = orderId;\n  }\n\n  /**\n   * To cancel a transfer order based on its id\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To cancel a transfer order with ID 'XXX' and confirmation number '12345'\n   *\n   * ```js\n   * amadeus.ordering.transferOrder('XXX').transfers.cancellation.post(JSON.stringify({}), '12345');;\n   * ```\n   */\n  return _createClass(Cancellation, [{\n    key: \"post\",\n    value: function post(body, confirmNbr) {\n      return this.client.post(\"/v1/ordering/transfer-orders/\".concat(this.orderId, \"/transfers/cancellation?confirmNbr=\").concat(confirmNbr), body);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Cancellation;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYW5jZWxsYXRpb24iLCJjbGllbnQiLCJvcmRlcklkIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJwb3N0IiwiYm9keSIsImNvbmZpcm1OYnIiLCJjb25jYXQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9vcmRlcmluZy90cmFuc2Zlcl9vcmRlcnMvdHJhbnNmZXJzL2NhbmNlbGxhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9vcmRlcmluZy90cmFuc2Zlci1vcmRlcnMvWFhYL3RyYW5zZmVycy9jYW5jZWxsYXRpb25gIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5vcmRlcmluZy50cmFuc2Zlck9yZGVyKCdYWFgnKS50cmFuc2ZlcnMuY2FuY2VsbGF0aW9uLnBvc3QoSlNPTi5zdHJpbmdpZnkoe30pLCAnMTIzNDUnKTs7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIENhbmNlbGxhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgb3JkZXJJZCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySWQ7XG4gIH1cblxuICAvKipcbiAgICogVG8gY2FuY2VsIGEgdHJhbnNmZXIgb3JkZXIgYmFzZWQgb24gaXRzIGlkXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gY2FuY2VsIGEgdHJhbnNmZXIgb3JkZXIgd2l0aCBJRCAnWFhYJyBhbmQgY29uZmlybWF0aW9uIG51bWJlciAnMTIzNDUnXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMub3JkZXJpbmcudHJhbnNmZXJPcmRlcignWFhYJykudHJhbnNmZXJzLmNhbmNlbGxhdGlvbi5wb3N0KEpTT04uc3RyaW5naWZ5KHt9KSwgJzEyMzQ1Jyk7O1xuICAgKiBgYGBcbiAgICovXG4gIHBvc3QoYm9keSwgY29uZmlybU5icikge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KFxuICAgICAgYC92MS9vcmRlcmluZy90cmFuc2Zlci1vcmRlcnMvJHt0aGlzLm9yZGVySWR9L3RyYW5zZmVycy9jYW5jZWxsYXRpb24/Y29uZmlybU5icj0ke2NvbmZpcm1OYnJ9YCwgYm9keSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsbGF0aW9uOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxZQUFZO0VBQ2hCLFNBQUFBLGFBQVlDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO0lBQUFDLGVBQUEsT0FBQUgsWUFBQTtJQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTztFQUN4Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQVRFLE9BQUFFLFlBQUEsQ0FBQUosWUFBQTtJQUFBSyxHQUFBO0lBQUFDLEtBQUEsRUFVQSxTQUFBQyxLQUFLQyxJQUFJLEVBQUVDLFVBQVUsRUFBRTtNQUNyQixPQUFPLElBQUksQ0FBQ1IsTUFBTSxDQUFDTSxJQUFJLGlDQUFBRyxNQUFBLENBQ1csSUFBSSxDQUFDUixPQUFPLHlDQUFBUSxNQUFBLENBQXNDRCxVQUFVLEdBQUlELElBQUksQ0FBQztJQUN6RztFQUFDO0FBQUE7QUFBQSxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsY0FHWVosWUFBWTtBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/ordering/transfer_orders/transfers/cancellation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data.js":
/*!***********************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _urls = _interopRequireDefault(__webpack_require__(/*! ./reference_data/urls */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/urls.js\"));\nvar _locations = _interopRequireDefault(__webpack_require__(/*! ./reference_data/locations */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations.js\"));\nvar _location = _interopRequireDefault(__webpack_require__(/*! ./reference_data/location */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/location.js\"));\nvar _airlines = _interopRequireDefault(__webpack_require__(/*! ./reference_data/airlines */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/airlines.js\"));\nvar _recommended_locations = _interopRequireDefault(__webpack_require__(/*! ./reference_data/recommended_locations */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/recommended_locations.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/reference-data` endpoints\n *\n * Access via the {Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.urls;\n * ```\n *\n * @param {Client} client\n * @property {Urls} urls\n * @protected\n */\nvar ReferenceData = /*#__PURE__*/function () {\n  function ReferenceData(client) {\n    _classCallCheck(this, ReferenceData);\n    this.client = client;\n    this.urls = new _urls[\"default\"](client);\n    this.locations = new _locations[\"default\"](client);\n    this.airlines = new _airlines[\"default\"](client);\n    this.recommendedLocations = new _recommended_locations[\"default\"](client);\n  }\n\n  /**\n   * The namespace for the Location APIs - accessing a specific location\n   *\n   * @param  {string} [locationId]  The ID of the location to search for\n   * @return {Location}\n   **/\n  return _createClass(ReferenceData, [{\n    key: \"location\",\n    value: function location(locationId) {\n      return new _location[\"default\"](this.client, locationId);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = ReferenceData;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXJscyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2xvY2F0aW9ucyIsIl9sb2NhdGlvbiIsIl9haXJsaW5lcyIsIl9yZWNvbW1lbmRlZF9sb2NhdGlvbnMiLCJlIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJyIiwidCIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiU3RyaW5nIiwiTnVtYmVyIiwiUmVmZXJlbmNlRGF0YSIsImNsaWVudCIsInVybHMiLCJVcmxzIiwibG9jYXRpb25zIiwiTG9jYXRpb25zIiwiYWlybGluZXMiLCJBaXJsaW5lcyIsInJlY29tbWVuZGVkTG9jYXRpb25zIiwiUmVjb21tZW5kZWRMb2NhdGlvbnMiLCJ2YWx1ZSIsImxvY2F0aW9uIiwibG9jYXRpb25JZCIsIkxvY2F0aW9uIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVybHMgICAgICBmcm9tICcuL3JlZmVyZW5jZV9kYXRhL3VybHMnO1xuaW1wb3J0IExvY2F0aW9ucyBmcm9tICcuL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucyc7XG5pbXBvcnQgTG9jYXRpb24gIGZyb20gJy4vcmVmZXJlbmNlX2RhdGEvbG9jYXRpb24nO1xuaW1wb3J0IEFpcmxpbmVzIGZyb20gJy4vcmVmZXJlbmNlX2RhdGEvYWlybGluZXMnO1xuaW1wb3J0IFJlY29tbWVuZGVkTG9jYXRpb25zIGZyb20gJy4vcmVmZXJlbmNlX2RhdGEvcmVjb21tZW5kZWRfbG9jYXRpb25zJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjIvcmVmZXJlbmNlLWRhdGFgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLnVybHM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge1VybHN9IHVybHNcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuY2xhc3MgUmVmZXJlbmNlRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ICAgID0gY2xpZW50O1xuICAgIHRoaXMudXJscyAgICAgID0gbmV3IFVybHMoY2xpZW50KTtcbiAgICB0aGlzLmxvY2F0aW9ucyA9IG5ldyBMb2NhdGlvbnMoY2xpZW50KTtcbiAgICB0aGlzLmFpcmxpbmVzICA9IG5ldyBBaXJsaW5lcyhjbGllbnQpO1xuICAgIHRoaXMucmVjb21tZW5kZWRMb2NhdGlvbnMgPSBuZXcgUmVjb21tZW5kZWRMb2NhdGlvbnMoY2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZXNwYWNlIGZvciB0aGUgTG9jYXRpb24gQVBJcyAtIGFjY2Vzc2luZyBhIHNwZWNpZmljIGxvY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gW2xvY2F0aW9uSWRdICBUaGUgSUQgb2YgdGhlIGxvY2F0aW9uIHRvIHNlYXJjaCBmb3JcbiAgICogQHJldHVybiB7TG9jYXRpb259XG4gICAqKi9cbiAgbG9jYXRpb24obG9jYXRpb25JZCkge1xuICAgIHJldHVybiBuZXcgTG9jYXRpb24odGhpcy5jbGllbnQsIGxvY2F0aW9uSWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZmVyZW5jZURhdGE7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLHNCQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBMEUsU0FBQUQsdUJBQUFNLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLFFBQUFDLENBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGtCQUFBQSxDQUFBLGdCQUFBQSxDQUFBLFdBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsS0FBQUQsT0FBQSxDQUFBQyxDQUFBO0FBQUEsU0FBQUssZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUMsU0FBQTtBQUFBLFNBQUFDLGtCQUFBWixDQUFBLEVBQUFhLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFYLENBQUEsR0FBQVUsQ0FBQSxDQUFBQyxDQUFBLEdBQUFYLENBQUEsQ0FBQWEsVUFBQSxHQUFBYixDQUFBLENBQUFhLFVBQUEsUUFBQWIsQ0FBQSxDQUFBYyxZQUFBLGtCQUFBZCxDQUFBLEtBQUFBLENBQUEsQ0FBQWUsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQXBCLENBQUEsRUFBQXFCLGNBQUEsQ0FBQWxCLENBQUEsQ0FBQW1CLEdBQUEsR0FBQW5CLENBQUE7QUFBQSxTQUFBb0IsYUFBQXZCLENBQUEsRUFBQWEsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQVosQ0FBQSxDQUFBTyxTQUFBLEVBQUFNLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBWixDQUFBLEVBQUFjLENBQUEsR0FBQUssTUFBQSxDQUFBQyxjQUFBLENBQUFwQixDQUFBLGlCQUFBa0IsUUFBQSxTQUFBbEIsQ0FBQTtBQUFBLFNBQUFxQixlQUFBUCxDQUFBLFFBQUFVLENBQUEsR0FBQUMsWUFBQSxDQUFBWCxDQUFBLGdDQUFBWixPQUFBLENBQUFzQixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFYLENBQUEsRUFBQUQsQ0FBQSxvQkFBQVgsT0FBQSxDQUFBWSxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBZCxDQUFBLEdBQUFjLENBQUEsQ0FBQVYsTUFBQSxDQUFBc0IsV0FBQSxrQkFBQTFCLENBQUEsUUFBQXdCLENBQUEsR0FBQXhCLENBQUEsQ0FBQTJCLElBQUEsQ0FBQWIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBWCxPQUFBLENBQUFzQixDQUFBLFVBQUFBLENBQUEsWUFBQWIsU0FBQSx5RUFBQUUsQ0FBQSxHQUFBZSxNQUFBLEdBQUFDLE1BQUEsRUFBQWYsQ0FBQTtBQUUxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFkQSxJQWVNZ0IsYUFBYTtFQUNqQixTQUFBQSxjQUFZQyxNQUFNLEVBQUU7SUFBQXZCLGVBQUEsT0FBQXNCLGFBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQU1BLE1BQU07SUFDdkIsSUFBSSxDQUFDQyxJQUFJLEdBQVEsSUFBSUMsZ0JBQUksQ0FBQ0YsTUFBTSxDQUFDO0lBQ2pDLElBQUksQ0FBQ0csU0FBUyxHQUFHLElBQUlDLHFCQUFTLENBQUNKLE1BQU0sQ0FBQztJQUN0QyxJQUFJLENBQUNLLFFBQVEsR0FBSSxJQUFJQyxvQkFBUSxDQUFDTixNQUFNLENBQUM7SUFDckMsSUFBSSxDQUFDTyxvQkFBb0IsR0FBRyxJQUFJQyxpQ0FBb0IsQ0FBQ1IsTUFBTSxDQUFDO0VBQzlEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxFLE9BQUFSLFlBQUEsQ0FBQU8sYUFBQTtJQUFBUixHQUFBO0lBQUFrQixLQUFBLEVBTUEsU0FBQUMsU0FBU0MsVUFBVSxFQUFFO01BQ25CLE9BQU8sSUFBSUMsb0JBQVEsQ0FBQyxJQUFJLENBQUNaLE1BQU0sRUFBRVcsVUFBVSxDQUFDO0lBQzlDO0VBQUM7QUFBQTtBQUFBLElBQUFFLFFBQUEsR0FBQUMsT0FBQSxjQUdZZixhQUFhO0FBQUFnQixNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/airlines.js":
/*!********************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/airlines.js ***!
  \********************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/airlines` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.airlines;\n * ```\n *\n * @param {Client} client\n */\nvar Airlines = /*#__PURE__*/function () {\n  function Airlines(client) {\n    _classCallCheck(this, Airlines);\n    this.client = client;\n  }\n\n  /**\n   * Returns the airline name and code.\n   *\n   * @param {Object} params\n   * @param {string} params.airlineCodes Code of the airline following IATA or ICAO standard.\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find to which airlines belongs IATA Code BA\n   *\n   * ```js\n   * amadeus.referenceData.airlines.get({\n   *   airlineCodes : 'BA'\n   * });\n   * ```\n   */\n  return _createClass(Airlines, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/airlines', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Airlines;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBaXJsaW5lcyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvYWlybGluZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvcmVmZXJlbmNlLWRhdGEvYWlybGluZXNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmFpcmxpbmVzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBBaXJsaW5lc3tcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWlybGluZSBuYW1lIGFuZCBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuYWlybGluZUNvZGVzIENvZGUgb2YgdGhlIGFpcmxpbmUgZm9sbG93aW5nIElBVEEgb3IgSUNBTyBzdGFuZGFyZC5cbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBGaW5kIHRvIHdoaWNoIGFpcmxpbmVzIGJlbG9uZ3MgSUFUQSBDb2RlIEJBXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5haXJsaW5lcy5nZXQoe1xuICAgKiAgIGFpcmxpbmVDb2RlcyA6ICdCQSdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3JlZmVyZW5jZS1kYXRhL2FpcmxpbmVzJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBaXJsaW5lcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxRQUFRO0VBQ1osU0FBQUEsU0FBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsUUFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFkRSxPQUFBRSxZQUFBLENBQUFILFFBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBZUEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLDZCQUE2QixFQUFFQyxNQUFNLENBQUM7SUFDL0Q7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLFFBQVE7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2FpcmxpbmVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxrQ0FBa0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsMkNBQTJDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10cmF2ZWwtYWdlbmN5Ly4vbm9kZV9tb2R1bGVzL2FtYWRldXMvbGliL2FtYWRldXMvbmFtZXNwYWNlcy9yZWZlcmVuY2VfZGF0YS9haXJsaW5lcy5qcz81YTk2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9yZWZlcmVuY2UtZGF0YS9haXJsaW5lc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEuYWlybGluZXM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbnZhciBBaXJsaW5lcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFpcmxpbmVzKGNsaWVudCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBaXJsaW5lcyk7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWlybGluZSBuYW1lIGFuZCBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuYWlybGluZUNvZGVzIENvZGUgb2YgdGhlIGFpcmxpbmUgZm9sbG93aW5nIElBVEEgb3IgSUNBTyBzdGFuZGFyZC5cbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBGaW5kIHRvIHdoaWNoIGFpcmxpbmVzIGJlbG9uZ3MgSUFUQSBDb2RlIEJBXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5haXJsaW5lcy5nZXQoe1xuICAgKiAgIGFpcmxpbmVDb2RlcyA6ICdCQSdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhBaXJsaW5lcywgW3tcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3JlZmVyZW5jZS1kYXRhL2FpcmxpbmVzJywgcGFyYW1zKTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQWlybGluZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKQmFYSnNhVzVsY3lJc0ltTnNhV1Z1ZENJc0lsOWpiR0Z6YzBOaGJHeERhR1ZqYXlJc0lsOWpjbVZoZEdWRGJHRnpjeUlzSW10bGVTSXNJblpoYkhWbElpd2laMlYwSWl3aWNHRnlZVzF6SWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2lkVzVrWldacGJtVmtJaXdpWDJSbFptRjFiSFFpTENKbGVIQnZjblJ6SWl3aWJXOWtkV3hsSWl3aVpHVm1ZWFZzZENKZExDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDNOeVl5OWhiV0ZrWlhWekwyNWhiV1Z6Y0dGalpYTXZjbVZtWlhKbGJtTmxYMlJoZEdFdllXbHliR2x1WlhNdWFuTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJCSUc1aGJXVnpjR0ZqWldRZ1kyeHBaVzUwSUdadmNpQjBhR1ZjYmlBcUlHQXZkakV2Y21WbVpYSmxibU5sTFdSaGRHRXZZV2x5YkdsdVpYTmdJR1Z1WkhCdmFXNTBjMXh1SUNwY2JpQXFJRUZqWTJWemN5QjJhV0VnZEdobElIdEFiR2x1YXlCQmJXRmtaWFZ6ZlNCdlltcGxZM1JjYmlBcVhHNGdLaUJnWUdCcWMxeHVJQ29nYkdWMElHRnRZV1JsZFhNZ1BTQnVaWGNnUVcxaFpHVjFjeWdwTzF4dUlDb2dZVzFoWkdWMWN5NXlaV1psY21WdVkyVkVZWFJoTG1GcGNteHBibVZ6TzF4dUlDb2dZR0JnWEc0Z0tseHVJQ29nUUhCaGNtRnRJSHREYkdsbGJuUjlJR05zYVdWdWRGeHVJQ292WEc1amJHRnpjeUJCYVhKc2FXNWxjM3RjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9ZMnhwWlc1MEtTQjdYRzRnSUNBZ2RHaHBjeTVqYkdsbGJuUWdQU0JqYkdsbGJuUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ1lXbHliR2x1WlNCdVlXMWxJR0Z1WkNCamIyUmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnY0dGeVlXMXpYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCd1lYSmhiWE11WVdseWJHbHVaVU52WkdWeklFTnZaR1VnYjJZZ2RHaGxJR0ZwY214cGJtVWdabTlzYkc5M2FXNW5JRWxCVkVFZ2IzSWdTVU5CVHlCemRHRnVaR0Z5WkM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaUzQ4VW1WemNHOXVjMlVzVW1WemNHOXVjMlZGY25KdmNqNTlJR0VnVUhKdmJXbHpaVnh1SUNBZ0tseHVJQ0FnS2lCR2FXNWtJSFJ2SUhkb2FXTm9JR0ZwY214cGJtVnpJR0psYkc5dVozTWdTVUZVUVNCRGIyUmxJRUpCWEc0Z0lDQXFYRzRnSUNBcUlHQmdZR3B6WEc0Z0lDQXFJR0Z0WVdSbGRYTXVjbVZtWlhKbGJtTmxSR0YwWVM1aGFYSnNhVzVsY3k1blpYUW9lMXh1SUNBZ0tpQWdJR0ZwY214cGJtVkRiMlJsY3lBNklDZENRU2RjYmlBZ0lDb2dmU2s3WEc0Z0lDQXFJR0JnWUZ4dUlDQWdLaTljYmlBZ1oyVjBLSEJoY21GdGN5QTlJSHQ5S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeHBaVzUwTG1kbGRDZ25MM1l4TDNKbFptVnlaVzVqWlMxa1lYUmhMMkZwY214cGJtVnpKeXdnY0dGeVlXMXpLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JCYVhKc2FXNWxjenRjYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3TzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRmFRU3hKUVdGTlFTeFJRVUZSTzBWQlExb3NVMEZCUVVFc1UwRkJXVU1zVFVGQlRTeEZRVUZGTzBsQlFVRkRMR1ZCUVVFc1QwRkJRVVlzVVVGQlFUdEpRVU5zUWl4SlFVRkpMRU5CUVVORExFMUJRVTBzUjBGQlIwRXNUVUZCVFR0RlFVTjBRanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRmtSU3hQUVVGQlJTeFpRVUZCTEVOQlFVRklMRkZCUVVFN1NVRkJRVWtzUjBGQlFUdEpRVUZCUXl4TFFVRkJMRVZCWlVFc1UwRkJRVU1zU1VGQlFTeEZRVUZwUWp0TlFVRkJMRWxCUVdKRExFMUJRVTBzUjBGQlFVTXNVMEZCUVN4RFFVRkJReXhOUVVGQkxGRkJRVUZFTEZOQlFVRXNVVUZCUVVVc1UwRkJRU3hIUVVGQlJpeFRRVUZCTEUxQlFVY3NRMEZCUXl4RFFVRkRPMDFCUTJJc1QwRkJUeXhKUVVGSkxFTkJRVU5RTEUxQlFVMHNRMEZCUTBzc1IwRkJSeXhEUVVGRExEWkNRVUUyUWl4RlFVRkZReXhOUVVGTkxFTkJRVU03U1VGREwwUTdSVUZCUXp0QlFVRkJPMEZCUVVFc1NVRkJRVWtzVVVGQlFTeEhRVUZCUXl4UFFVRkJMR05CUjFsYUxGRkJRVkU3UVVGQlFXRXNUVUZCUVN4RFFVRkJSQ3hQUVVGQkxFZEJRVUZCTEU5QlFVRXNRMEZCUVVVc1QwRkJRU0lzSW1sbmJtOXlaVXhwYzNRaU9sdGRmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/airlines.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/location.js":
/*!********************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/location.js ***!
  \********************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/reference-data/locations/:location_id` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations('ALHR');\n * ```\n *\n * @param {Client} client\n * @property {number} locationId\n */\nvar Location = /*#__PURE__*/function () {\n  function Location(client, locationId) {\n    _classCallCheck(this, Location);\n    this.client = client;\n    this.locationId = locationId;\n  }\n\n  /**\n   * Returns details for a specific airport\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find details for location with ID 'ALHR'\n   *\n   * ```js\n   * amadeus.referenceData.location('ALHR').get();\n   * ```\n   */\n  return _createClass(Location, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get(\"/v1/reference-data/locations/\".concat(this.locationId), params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Location;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMb2NhdGlvbiIsImNsaWVudCIsImxvY2F0aW9uSWQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImNvbmNhdCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy86bG9jYXRpb25faWRgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucygnQUxIUicpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvY2F0aW9uSWRcbiAqL1xuY2xhc3MgTG9jYXRpb24ge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGxvY2F0aW9uSWQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmxvY2F0aW9uSWQgPSBsb2NhdGlvbklkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZGV0YWlscyBmb3IgYSBzcGVjaWZpYyBhaXJwb3J0XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBGaW5kIGRldGFpbHMgZm9yIGxvY2F0aW9uIHdpdGggSUQgJ0FMSFInXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbignQUxIUicpLmdldCgpO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoXG4gICAgICBgL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy8ke3RoaXMubG9jYXRpb25JZH1gLCBwYXJhbXNcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvY2F0aW9uO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEsSUFjTUEsUUFBUTtFQUNaLFNBQUFBLFNBQVlDLE1BQU0sRUFBRUMsVUFBVSxFQUFFO0lBQUFDLGVBQUEsT0FBQUgsUUFBQTtJQUM5QixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTtFQUM5Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFYRSxPQUFBRSxZQUFBLENBQUFKLFFBQUE7SUFBQUssR0FBQTtJQUFBQyxLQUFBLEVBWUEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNSLE1BQU0sQ0FBQ00sR0FBRyxpQ0FBQUssTUFBQSxDQUNZLElBQUksQ0FBQ1YsVUFBVSxHQUFJTSxNQUNyRCxDQUFDO0lBQ0g7RUFBQztBQUFBO0FBQUEsSUFBQUssUUFBQSxHQUFBQyxPQUFBLGNBR1lkLFFBQVE7QUFBQWUsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLGtDQUFrQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsZUFBZSxrQkFBa0I7QUFDakM7QUFDQSwyQ0FBMkMsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXRyYXZlbC1hZ2VuY3kvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9uLmpzP2E1M2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy86bG9jYXRpb25faWRgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucygnQUxIUicpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvY2F0aW9uSWRcbiAqL1xudmFyIExvY2F0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTG9jYXRpb24oY2xpZW50LCBsb2NhdGlvbklkKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2F0aW9uKTtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmxvY2F0aW9uSWQgPSBsb2NhdGlvbklkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZGV0YWlscyBmb3IgYSBzcGVjaWZpYyBhaXJwb3J0XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBGaW5kIGRldGFpbHMgZm9yIGxvY2F0aW9uIHdpdGggSUQgJ0FMSFInXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbignQUxIUicpLmdldCgpO1xuICAgKiBgYGBcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTG9jYXRpb24sIFt7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoXCIvdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL1wiLmNvbmNhdCh0aGlzLmxvY2F0aW9uSWQpLCBwYXJhbXMpO1xuICAgIH1cbiAgfV0pO1xufSgpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBMb2NhdGlvbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpNYjJOaGRHbHZiaUlzSW1Oc2FXVnVkQ0lzSW14dlkyRjBhVzl1U1dRaUxDSmZZMnhoYzNORFlXeHNRMmhsWTJzaUxDSmZZM0psWVhSbFEyeGhjM01pTENKclpYa2lMQ0oyWVd4MVpTSXNJbWRsZENJc0luQmhjbUZ0Y3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJblZ1WkdWbWFXNWxaQ0lzSW1OdmJtTmhkQ0lzSWw5a1pXWmhkV3gwSWl3aVpYaHdiM0owY3lJc0ltMXZaSFZzWlNJc0ltUmxabUYxYkhRaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5emNtTXZZVzFoWkdWMWN5OXVZVzFsYzNCaFkyVnpMM0psWm1WeVpXNWpaVjlrWVhSaEwyeHZZMkYwYVc5dUxtcHpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUVNCdVlXMWxjM0JoWTJWa0lHTnNhV1Z1ZENCbWIzSWdkR2hsWEc0Z0tpQmdMM1l5TDNKbFptVnlaVzVqWlMxa1lYUmhMMnh2WTJGMGFXOXVjeTg2Ykc5allYUnBiMjVmYVdSZ0lHVnVaSEJ2YVc1MGMxeHVJQ3BjYmlBcUlFRmpZMlZ6Y3lCMmFXRWdkR2hsSUh0QWJHbHVheUJCYldGa1pYVnpmU0J2WW1wbFkzUmNiaUFxWEc0Z0tpQmdZR0JxYzF4dUlDb2diR1YwSUdGdFlXUmxkWE1nUFNCdVpYY2dRVzFoWkdWMWN5Z3BPMXh1SUNvZ1lXMWhaR1YxY3k1eVpXWmxjbVZ1WTJWRVlYUmhMbXh2WTJGMGFXOXVjeWduUVV4SVVpY3BPMXh1SUNvZ1lHQmdYRzRnS2x4dUlDb2dRSEJoY21GdElIdERiR2xsYm5SOUlHTnNhV1Z1ZEZ4dUlDb2dRSEJ5YjNCbGNuUjVJSHR1ZFcxaVpYSjlJR3h2WTJGMGFXOXVTV1JjYmlBcUwxeHVZMnhoYzNNZ1RHOWpZWFJwYjI0Z2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loamJHbGxiblFzSUd4dlkyRjBhVzl1U1dRcElIdGNiaUFnSUNCMGFHbHpMbU5zYVdWdWRDQTlJR05zYVdWdWREdGNiaUFnSUNCMGFHbHpMbXh2WTJGMGFXOXVTV1FnUFNCc2IyTmhkR2x2Ymtsa08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdaR1YwWVdsc2N5Qm1iM0lnWVNCemNHVmphV1pwWXlCaGFYSndiM0owWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCd1lYSmhiWE5jYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpTNDhVbVZ6Y0c5dWMyVXNVbVZ6Y0c5dWMyVkZjbkp2Y2o1OUlHRWdVSEp2YldselpWeHVJQ0FnS2x4dUlDQWdLaUJHYVc1a0lHUmxkR0ZwYkhNZ1ptOXlJR3h2WTJGMGFXOXVJSGRwZEdnZ1NVUWdKMEZNU0ZJblhHNGdJQ0FxWEc0Z0lDQXFJR0JnWUdwelhHNGdJQ0FxSUdGdFlXUmxkWE11Y21WbVpYSmxibU5sUkdGMFlTNXNiMk5oZEdsdmJpZ25RVXhJVWljcExtZGxkQ2dwTzF4dUlDQWdLaUJnWUdCY2JpQWdJQ292WEc0Z0lHZGxkQ2h3WVhKaGJYTWdQU0I3ZlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNhV1Z1ZEM1blpYUW9YRzRnSUNBZ0lDQmdMM1l4TDNKbFptVnlaVzVqWlMxa1lYUmhMMnh2WTJGMGFXOXVjeThrZTNSb2FYTXViRzlqWVhScGIyNUpaSDFnTENCd1lYSmhiWE5jYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRXh2WTJGMGFXOXVPMXh1SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCWWtFc1NVRmpUVUVzVVVGQlVUdEZRVU5hTEZOQlFVRkJMRk5CUVZsRExFMUJRVTBzUlVGQlJVTXNWVUZCVlN4RlFVRkZPMGxCUVVGRExHVkJRVUVzVDBGQlFVZ3NVVUZCUVR0SlFVTTVRaXhKUVVGSkxFTkJRVU5ETEUxQlFVMHNSMEZCUjBFc1RVRkJUVHRKUVVOd1FpeEpRVUZKTEVOQlFVTkRMRlZCUVZVc1IwRkJSMEVzVlVGQlZUdEZRVU01UWpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGWVJTeFBRVUZCUlN4WlFVRkJMRU5CUVVGS0xGRkJRVUU3U1VGQlFVc3NSMEZCUVR0SlFVRkJReXhMUVVGQkxFVkJXVUVzVTBGQlFVTXNTVUZCUVN4RlFVRnBRanROUVVGQkxFbEJRV0pETEUxQlFVMHNSMEZCUVVNc1UwRkJRU3hEUVVGQlF5eE5RVUZCTEZGQlFVRkVMRk5CUVVFc1VVRkJRVVVzVTBGQlFTeEhRVUZCUml4VFFVRkJMRTFCUVVjc1EwRkJReXhEUVVGRE8wMUJRMklzVDBGQlR5eEpRVUZKTEVOQlFVTlNMRTFCUVUwc1EwRkJRMDBzUjBGQlJ5eHBRMEZCUVVzc1RVRkJRU3hEUVVOWkxFbEJRVWtzUTBGQlExWXNWVUZCVlN4SFFVRkpUU3hOUVVOeVJDeERRVUZETzBsQlEwZzdSVUZCUXp0QlFVRkJPMEZCUVVFc1NVRkJRVXNzVVVGQlFTeEhRVUZCUXl4UFFVRkJMR05CUjFsa0xGRkJRVkU3UVVGQlFXVXNUVUZCUVN4RFFVRkJSQ3hQUVVGQkxFZEJRVUZCTEU5QlFVRXNRMEZCUVVVc1QwRkJRU0lzSW1sbmJtOXlaVXhwYzNRaU9sdGRmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/location.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations.js ***!
  \*********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _airports = _interopRequireDefault(__webpack_require__(/*! ./locations/airports */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/airports.js\"));\nvar _cities = _interopRequireDefault(__webpack_require__(/*! ./locations/cities */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/cities.js\"));\nvar _hotel = _interopRequireDefault(__webpack_require__(/*! ./locations/hotel */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotel.js\"));\nvar _hotels = _interopRequireDefault(__webpack_require__(/*! ./locations/hotels */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels.js\"));\nvar _poi = _interopRequireDefault(__webpack_require__(/*! ./locations/poi */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/poi.js\"));\nvar _pois = _interopRequireDefault(__webpack_require__(/*! ./locations/pois */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/pois.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/reference-data/locations` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations;\n * ```\n *\n * @param {Client} client\n * @property {Airports} airports\n */\nvar Locations = /*#__PURE__*/function () {\n  function Locations(client) {\n    _classCallCheck(this, Locations);\n    this.client = client;\n    this.airports = new _airports[\"default\"](client);\n    this.cities = new _cities[\"default\"](client);\n    this.hotel = new _hotel[\"default\"](client);\n    this.hotels = new _hotels[\"default\"](client);\n    this.pointsOfInterest = new _pois[\"default\"](client);\n  }\n\n  /**\n   * Returns a list of airports and cities matching a given keyword.\n   *\n   * @param {Object} params\n   * @param {string} params.keyword keyword that should represent the start of\n   *   a word in a city or airport name or code\n   * @param {string} params.subType the type of location to search for\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find any location starting with 'lon'\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'lon',\n   *   subType: Amadeus.location.any\n   * });\n   * ```\n   */\n  return _createClass(Locations, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations', params);\n    }\n  }, {\n    key: \"pointOfInterest\",\n    value: function pointOfInterest(poiId) {\n      return new _poi[\"default\"](this.client, poiId);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Locations;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYWlycG9ydHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jaXRpZXMiLCJfaG90ZWwiLCJfaG90ZWxzIiwiX3BvaSIsIl9wb2lzIiwiZSIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJhIiwibiIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiaSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlN0cmluZyIsIk51bWJlciIsIkxvY2F0aW9ucyIsImNsaWVudCIsImFpcnBvcnRzIiwiQWlycG9ydHMiLCJjaXRpZXMiLCJDaXRpZXMiLCJob3RlbCIsIkhvdGVsIiwiaG90ZWxzIiwiSG90ZWxzIiwicG9pbnRzT2ZJbnRlcmVzdCIsIlBvaW50c09mSW50ZXJlc3QiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInBvaW50T2ZJbnRlcmVzdCIsInBvaUlkIiwiUG9pbnRPZkludGVyZXN0IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBaXJwb3J0cyBmcm9tICcuL2xvY2F0aW9ucy9haXJwb3J0cyc7XG5pbXBvcnQgQ2l0aWVzIGZyb20gJy4vbG9jYXRpb25zL2NpdGllcyc7XG5pbXBvcnQgSG90ZWwgZnJvbSAnLi9sb2NhdGlvbnMvaG90ZWwnO1xuaW1wb3J0IEhvdGVscyBmcm9tICcuL2xvY2F0aW9ucy9ob3RlbHMnO1xuaW1wb3J0IFBvaW50T2ZJbnRlcmVzdCBmcm9tICcuL2xvY2F0aW9ucy9wb2knO1xuaW1wb3J0IFBvaW50c09mSW50ZXJlc3QgZnJvbSAnLi9sb2NhdGlvbnMvcG9pcyc7XG5cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9uc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQHByb3BlcnR5IHtBaXJwb3J0c30gYWlycG9ydHNcbiAqL1xuY2xhc3MgTG9jYXRpb25zIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5haXJwb3J0cyA9IG5ldyBBaXJwb3J0cyhjbGllbnQpO1xuICAgIHRoaXMuY2l0aWVzID0gbmV3IENpdGllcyhjbGllbnQpO1xuICAgIHRoaXMuaG90ZWwgPSBuZXcgSG90ZWwoY2xpZW50KTtcbiAgICB0aGlzLmhvdGVscyA9IG5ldyBIb3RlbHMoY2xpZW50KTtcbiAgICB0aGlzLnBvaW50c09mSW50ZXJlc3QgPSBuZXcgUG9pbnRzT2ZJbnRlcmVzdChjbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIGFpcnBvcnRzIGFuZCBjaXRpZXMgbWF0Y2hpbmcgYSBnaXZlbiBrZXl3b3JkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMua2V5d29yZCBrZXl3b3JkIHRoYXQgc2hvdWxkIHJlcHJlc2VudCB0aGUgc3RhcnQgb2ZcbiAgICogICBhIHdvcmQgaW4gYSBjaXR5IG9yIGFpcnBvcnQgbmFtZSBvciBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuc3ViVHlwZSB0aGUgdHlwZSBvZiBsb2NhdGlvbiB0byBzZWFyY2ggZm9yXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogRmluZCBhbnkgbG9jYXRpb24gc3RhcnRpbmcgd2l0aCAnbG9uJ1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmdldCh7XG4gICAqICAga2V5d29yZDogJ2xvbicsXG4gICAqICAgc3ViVHlwZTogQW1hZGV1cy5sb2NhdGlvbi5hbnlcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucycsIHBhcmFtcyk7XG4gIH1cblxuICBwb2ludE9mSW50ZXJlc3QocG9pSWQpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50T2ZJbnRlcmVzdCh0aGlzLmNsaWVudCwgcG9pSWQpO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9jYXRpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxJQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxLQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBZ0QsU0FBQUQsdUJBQUFPLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLFFBQUFDLENBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGtCQUFBQSxDQUFBLGdCQUFBQSxDQUFBLFdBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsS0FBQUQsT0FBQSxDQUFBQyxDQUFBO0FBQUEsU0FBQUssZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUMsU0FBQTtBQUFBLFNBQUFDLGtCQUFBWixDQUFBLEVBQUFhLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFYLENBQUEsR0FBQVUsQ0FBQSxDQUFBQyxDQUFBLEdBQUFYLENBQUEsQ0FBQWEsVUFBQSxHQUFBYixDQUFBLENBQUFhLFVBQUEsUUFBQWIsQ0FBQSxDQUFBYyxZQUFBLGtCQUFBZCxDQUFBLEtBQUFBLENBQUEsQ0FBQWUsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQXBCLENBQUEsRUFBQXFCLGNBQUEsQ0FBQWxCLENBQUEsQ0FBQW1CLEdBQUEsR0FBQW5CLENBQUE7QUFBQSxTQUFBb0IsYUFBQXZCLENBQUEsRUFBQWEsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQVosQ0FBQSxDQUFBTyxTQUFBLEVBQUFNLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBWixDQUFBLEVBQUFjLENBQUEsR0FBQUssTUFBQSxDQUFBQyxjQUFBLENBQUFwQixDQUFBLGlCQUFBa0IsUUFBQSxTQUFBbEIsQ0FBQTtBQUFBLFNBQUFxQixlQUFBUCxDQUFBLFFBQUFVLENBQUEsR0FBQUMsWUFBQSxDQUFBWCxDQUFBLGdDQUFBWixPQUFBLENBQUFzQixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFYLENBQUEsRUFBQUQsQ0FBQSxvQkFBQVgsT0FBQSxDQUFBWSxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBZCxDQUFBLEdBQUFjLENBQUEsQ0FBQVYsTUFBQSxDQUFBc0IsV0FBQSxrQkFBQTFCLENBQUEsUUFBQXdCLENBQUEsR0FBQXhCLENBQUEsQ0FBQTJCLElBQUEsQ0FBQWIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBWCxPQUFBLENBQUFzQixDQUFBLFVBQUFBLENBQUEsWUFBQWIsU0FBQSx5RUFBQUUsQ0FBQSxHQUFBZSxNQUFBLEdBQUFDLE1BQUEsRUFBQWYsQ0FBQTtBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEsSUFjTWdCLFNBQVM7RUFDYixTQUFBQSxVQUFZQyxNQUFNLEVBQUU7SUFBQXZCLGVBQUEsT0FBQXNCLFNBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSUMsb0JBQVEsQ0FBQ0YsTUFBTSxDQUFDO0lBQ3BDLElBQUksQ0FBQ0csTUFBTSxHQUFHLElBQUlDLGtCQUFNLENBQUNKLE1BQU0sQ0FBQztJQUNoQyxJQUFJLENBQUNLLEtBQUssR0FBRyxJQUFJQyxpQkFBSyxDQUFDTixNQUFNLENBQUM7SUFDOUIsSUFBSSxDQUFDTyxNQUFNLEdBQUcsSUFBSUMsa0JBQU0sQ0FBQ1IsTUFBTSxDQUFDO0lBQ2hDLElBQUksQ0FBQ1MsZ0JBQWdCLEdBQUcsSUFBSUMsZ0JBQWdCLENBQUNWLE1BQU0sQ0FBQztFQUN0RDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFqQkUsT0FBQVIsWUFBQSxDQUFBTyxTQUFBO0lBQUFSLEdBQUE7SUFBQW9CLEtBQUEsRUFrQkEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBOUIsTUFBQSxRQUFBOEIsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ2QsTUFBTSxDQUFDWSxHQUFHLENBQUMsOEJBQThCLEVBQUVDLE1BQU0sQ0FBQztJQUNoRTtFQUFDO0lBQUF0QixHQUFBO0lBQUFvQixLQUFBLEVBRUQsU0FBQUssZ0JBQWdCQyxLQUFLLEVBQUU7TUFDckIsT0FBTyxJQUFJQyxlQUFlLENBQUMsSUFBSSxDQUFDbEIsTUFBTSxFQUFFaUIsS0FBSyxDQUFDO0lBQ2hEO0VBQUM7QUFBQTtBQUFBLElBQUFFLFFBQUEsR0FBQUMsT0FBQSxjQUlZckIsU0FBUztBQUFBc0IsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/airports.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/airports.js ***!
  \******************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/reference-data/locations/airports` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.airports;\n * ```\n *\n * @param {Client} client\n */\nvar Airports = /*#__PURE__*/function () {\n  function Airports(client) {\n    _classCallCheck(this, Airports);\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of relevant airports near to a given point.\n   *\n   * @param {Object} params\n   * @param {Double} params.latitude latitude location to be at the center of\n   *   the search circle - required\n   * @param {Double} params.longitude longitude location to be at the center of\n   *   the search circle - required\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find the nearest airport to the 49.0000,2.55 lat/long\n   *\n   * ```js\n   * amadeus.referenceData.locations.airports.get({\n   *   longitude: 49.0000,\n   *   latitude: 2.55\n   * });\n   * ```\n   */\n  return _createClass(Airports, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations/airports', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Airports;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBaXJwb3J0cyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zL2FpcnBvcnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9haXJwb3J0c2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmFpcnBvcnRzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBBaXJwb3J0cyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIHJlbGV2YW50IGFpcnBvcnRzIG5lYXIgdG8gYSBnaXZlbiBwb2ludC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmxhdGl0dWRlIGxhdGl0dWRlIGxvY2F0aW9uIHRvIGJlIGF0IHRoZSBjZW50ZXIgb2ZcbiAgICogICB0aGUgc2VhcmNoIGNpcmNsZSAtIHJlcXVpcmVkXG4gICAqIEBwYXJhbSB7RG91YmxlfSBwYXJhbXMubG9uZ2l0dWRlIGxvbmdpdHVkZSBsb2NhdGlvbiB0byBiZSBhdCB0aGUgY2VudGVyIG9mXG4gICAqICAgdGhlIHNlYXJjaCBjaXJjbGUgLSByZXF1aXJlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIEZpbmQgdGhlIG5lYXJlc3QgYWlycG9ydCB0byB0aGUgNDkuMDAwMCwyLjU1IGxhdC9sb25nXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMuYWlycG9ydHMuZ2V0KHtcbiAgICogICBsb25naXR1ZGU6IDQ5LjAwMDAsXG4gICAqICAgbGF0aXR1ZGU6IDIuNTVcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9haXJwb3J0cycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWlycG9ydHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsUUFBUTtFQUNaLFNBQUFBLFNBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFFBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFsQkUsT0FBQUUsWUFBQSxDQUFBSCxRQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQW1CQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsdUNBQXVDLEVBQUVDLE1BQU0sQ0FBQztJQUN6RTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosUUFBUTtBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/airports.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/cities.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/cities.js ***!
  \****************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/reference-data/locations/cities` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.cities;\n * ```\n *\n * @param {Client} client\n */\nvar Cities = /*#__PURE__*/function () {\n  function Cities(client) {\n    _classCallCheck(this, Cities);\n    this.client = client;\n  }\n\n  /**\n   * Return a list of cities matching a given keyword..\n   *\n   * @param {Object} params\n   * @param {string} params.keyword keyword that should represent\n   * the start of a word in a city name\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Return a list of cities matching a keyword 'France'\n   *\n   * ```js\n   * amadeus.referenceData.locations.cities.get({\n   *   keyword: 'FRANCE'\n   * });\n   * ```\n   */\n  return _createClass(Cities, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations/cities', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Cities;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaXRpZXMiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucy9jaXRpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjIvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL2NpdGllc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmNpdGllcztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgQ2l0aWVzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgbGlzdCBvZiBjaXRpZXMgbWF0Y2hpbmcgYSBnaXZlbiBrZXl3b3JkLi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmtleXdvcmQga2V5d29yZCB0aGF0IHNob3VsZCByZXByZXNlbnRcbiAgICogdGhlIHN0YXJ0IG9mIGEgd29yZCBpbiBhIGNpdHkgbmFtZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIFJldHVybiBhIGxpc3Qgb2YgY2l0aWVzIG1hdGNoaW5nIGEga2V5d29yZCAnRnJhbmNlJ1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmNpdGllcy5nZXQoe1xuICAgKiAgIGtleXdvcmQ6ICdGUkFOQ0UnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvY2l0aWVzJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDaXRpZXM7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLE1BQU07RUFDVixTQUFBQSxPQUFZQyxNQUFNLEVBQUU7SUFBQUMsZUFBQSxPQUFBRixNQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBZkUsT0FBQUUsWUFBQSxDQUFBSCxNQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQWdCQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMscUNBQXFDLEVBQUVDLE1BQU0sQ0FBQztJQUN2RTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosTUFBTTtBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/cities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotel.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotel.js ***!
  \***************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/locations/hotel` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.hotel;\n * ```\n *\n * @param {Client} client\n */\nvar Hotel = /*#__PURE__*/function () {\n  function Hotel(client) {\n    _classCallCheck(this, Hotel);\n    this.client = client;\n  }\n  /**\n   * Returns a list of hotels for a given area.\n   *\n   * @param {Object} params\n   * @param {string} params.keyword Location query keyword Example: PARI\n   * @param {string} params.subType Category of search - To enter several value, repeat the query parameter    * Use HOTEL_LEISURE to target aggregators or HOTEL_GDS to target directly the chains\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   *  Find relevant points of interest within an area in Barcelona\n   * ```js\n   * amadeus.referenceData.locations.hotel.get({\n   *   keyword: 'PARI',\n   *   subType: 'HOTEL_GDS'\n   * })\n    */\n  return _createClass(Hotel, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations/hotel', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Hotel;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIb3RlbCIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zL2hvdGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9ob3RlbGAgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmhvdGVsO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBIb3RlbCB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBob3RlbHMgZm9yIGEgZ2l2ZW4gYXJlYS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmtleXdvcmQgTG9jYXRpb24gcXVlcnkga2V5d29yZCBFeGFtcGxlOiBQQVJJXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuc3ViVHlwZSBDYXRlZ29yeSBvZiBzZWFyY2ggLSBUbyBlbnRlciBzZXZlcmFsIHZhbHVlLCByZXBlYXQgdGhlIHF1ZXJ5IHBhcmFtZXRlciAgICAqIFVzZSBIT1RFTF9MRUlTVVJFIHRvIHRhcmdldCBhZ2dyZWdhdG9ycyBvciBIT1RFTF9HRFMgdG8gdGFyZ2V0IGRpcmVjdGx5IHRoZSBjaGFpbnNcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiAgRmluZCByZWxldmFudCBwb2ludHMgb2YgaW50ZXJlc3Qgd2l0aGluIGFuIGFyZWEgaW4gQmFyY2Vsb25hXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMuaG90ZWwuZ2V0KHtcbiAgICogICBrZXl3b3JkOiAnUEFSSScsXG4gICAqICAgc3ViVHlwZTogJ0hPVEVMX0dEUydcbiAgICogfSlcbiAgICAqL1xuICBnZXQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KCcvdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL2hvdGVsJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb3RlbDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxLQUFLO0VBQ1QsU0FBQUEsTUFBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsS0FBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0QjtFQUNBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQWRFLE9BQUFFLFlBQUEsQ0FBQUgsS0FBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFlQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsb0NBQW9DLEVBQUVDLE1BQU0sQ0FBQztJQUN0RTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosS0FBSztBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucy9ob3RlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsa0NBQWtDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsZUFBZSxrQkFBa0I7QUFDakM7QUFDQSwyQ0FBMkMsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXRyYXZlbC1hZ2VuY3kvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucy9ob3RlbC5qcz8xMGVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvaG90ZWxgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5ob3RlbDtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xudmFyIEhvdGVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSG90ZWwoY2xpZW50KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhvdGVsKTtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgaG90ZWxzIGZvciBhIGdpdmVuIGFyZWEuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5rZXl3b3JkIExvY2F0aW9uIHF1ZXJ5IGtleXdvcmQgRXhhbXBsZTogUEFSSVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLnN1YlR5cGUgQ2F0ZWdvcnkgb2Ygc2VhcmNoIC0gVG8gZW50ZXIgc2V2ZXJhbCB2YWx1ZSwgcmVwZWF0IHRoZSBxdWVyeSBwYXJhbWV0ZXIgICAgKiBVc2UgSE9URUxfTEVJU1VSRSB0byB0YXJnZXQgYWdncmVnYXRvcnMgb3IgSE9URUxfR0RTIHRvIHRhcmdldCBkaXJlY3RseSB0aGUgY2hhaW5zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogIEZpbmQgcmVsZXZhbnQgcG9pbnRzIG9mIGludGVyZXN0IHdpdGhpbiBhbiBhcmVhIGluIEJhcmNlbG9uYVxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmhvdGVsLmdldCh7XG4gICAqICAga2V5d29yZDogJ1BBUkknLFxuICAgKiAgIHN1YlR5cGU6ICdIT1RFTF9HRFMnXG4gICAqIH0pXG4gICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhIb3RlbCwgW3tcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9ob3RlbCcsIHBhcmFtcyk7XG4gICAgfVxuICB9XSk7XG59KCk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IEhvdGVsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SkliM1JsYkNJc0ltTnNhV1Z1ZENJc0lsOWpiR0Z6YzBOaGJHeERhR1ZqYXlJc0lsOWpjbVZoZEdWRGJHRnpjeUlzSW10bGVTSXNJblpoYkhWbElpd2laMlYwSWl3aWNHRnlZVzF6SWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2lkVzVrWldacGJtVmtJaXdpWDJSbFptRjFiSFFpTENKbGVIQnZjblJ6SWl3aWJXOWtkV3hsSWl3aVpHVm1ZWFZzZENKZExDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1THk0dUwzTnlZeTloYldGa1pYVnpMMjVoYldWemNHRmpaWE12Y21WbVpYSmxibU5sWDJSaGRHRXZiRzlqWVhScGIyNXpMMmh2ZEdWc0xtcHpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUVNCdVlXMWxjM0JoWTJWa0lHTnNhV1Z1ZENCbWIzSWdkR2hsWEc0Z0tpQmdMM1l4TDNKbFptVnlaVzVqWlMxa1lYUmhMMnh2WTJGMGFXOXVjeTlvYjNSbGJHQWdaVzVrY0c5cGJuUnpYRzRnS2x4dUlDb2dRV05qWlhOeklIWnBZU0IwYUdVZ2UwQnNhVzVySUVGdFlXUmxkWE45SUc5aWFtVmpkRnh1SUNwY2JpQXFJR0JnWUdwelhHNGdLaUJzWlhRZ1lXMWhaR1YxY3lBOUlHNWxkeUJCYldGa1pYVnpLQ2s3WEc0Z0tpQmhiV0ZrWlhWekxuSmxabVZ5Wlc1alpVUmhkR0V1Ykc5allYUnBiMjV6TG1odmRHVnNPMXh1SUNvZ1lHQmdYRzRnS2x4dUlDb2dRSEJoY21GdElIdERiR2xsYm5SOUlHTnNhV1Z1ZEZ4dUlDb3ZYRzVqYkdGemN5QkliM1JsYkNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0dOc2FXVnVkQ2tnZTF4dUlDQWdJSFJvYVhNdVkyeHBaVzUwSUQwZ1kyeHBaVzUwTzF4dUlDQjlYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUdFZ2JHbHpkQ0J2WmlCb2IzUmxiSE1nWm05eUlHRWdaMmwyWlc0Z1lYSmxZUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhCaGNtRnRjMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NHRnlZVzF6TG10bGVYZHZjbVFnVEc5allYUnBiMjRnY1hWbGNua2dhMlY1ZDI5eVpDQkZlR0Z0Y0d4bE9pQlFRVkpKWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQndZWEpoYlhNdWMzVmlWSGx3WlNCRFlYUmxaMjl5ZVNCdlppQnpaV0Z5WTJnZ0xTQlVieUJsYm5SbGNpQnpaWFpsY21Gc0lIWmhiSFZsTENCeVpYQmxZWFFnZEdobElIRjFaWEo1SUhCaGNtRnRaWFJsY2lBZ0lDQXFJRlZ6WlNCSVQxUkZURjlNUlVsVFZWSkZJSFJ2SUhSaGNtZGxkQ0JoWjJkeVpXZGhkRzl5Y3lCdmNpQklUMVJGVEY5SFJGTWdkRzhnZEdGeVoyVjBJR1JwY21WamRHeDVJSFJvWlNCamFHRnBibk5jYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpTNDhVbVZ6Y0c5dWMyVXNVbVZ6Y0c5dWMyVkZjbkp2Y2o1OUlHRWdVSEp2YldselpWeHVJQ0FnS2x4dUlDQWdLaUFnUm1sdVpDQnlaV3hsZG1GdWRDQndiMmx1ZEhNZ2IyWWdhVzUwWlhKbGMzUWdkMmwwYUdsdUlHRnVJR0Z5WldFZ2FXNGdRbUZ5WTJWc2IyNWhYRzRnSUNBcUlHQmdZR3B6WEc0Z0lDQXFJR0Z0WVdSbGRYTXVjbVZtWlhKbGJtTmxSR0YwWVM1c2IyTmhkR2x2Ym5NdWFHOTBaV3d1WjJWMEtIdGNiaUFnSUNvZ0lDQnJaWGwzYjNKa09pQW5VRUZTU1Njc1hHNGdJQ0FxSUNBZ2MzVmlWSGx3WlRvZ0owaFBWRVZNWDBkRVV5ZGNiaUFnSUNvZ2ZTbGNiaUFnSUNBcUwxeHVJQ0JuWlhRb2NHRnlZVzF6SUQwZ2UzMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYkdsbGJuUXVaMlYwS0NjdmRqRXZjbVZtWlhKbGJtTmxMV1JoZEdFdmJHOWpZWFJwYjI1ekwyaHZkR1ZzSnl3Z2NHRnlZVzF6S1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCSWIzUmxiRHRjYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3TzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRmFRU3hKUVdGTlFTeExRVUZMTzBWQlExUXNVMEZCUVVFc1RVRkJXVU1zVFVGQlRTeEZRVUZGTzBsQlFVRkRMR1ZCUVVFc1QwRkJRVVlzUzBGQlFUdEpRVU5zUWl4SlFVRkpMRU5CUVVORExFMUJRVTBzUjBGQlIwRXNUVUZCVFR0RlFVTjBRanRGUVVOQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFXUkZMRTlCUVVGRkxGbEJRVUVzUTBGQlFVZ3NTMEZCUVR0SlFVRkJTU3hIUVVGQk8wbEJRVUZETEV0QlFVRXNSVUZsUVN4VFFVRkJReXhKUVVGQkxFVkJRV2xDTzAxQlFVRXNTVUZCWWtNc1RVRkJUU3hIUVVGQlF5eFRRVUZCTEVOQlFVRkRMRTFCUVVFc1VVRkJRVVFzVTBGQlFTeFJRVUZCUlN4VFFVRkJMRWRCUVVGR0xGTkJRVUVzVFVGQlJ5eERRVUZETEVOQlFVTTdUVUZEWWl4UFFVRlBMRWxCUVVrc1EwRkJRMUFzVFVGQlRTeERRVUZEU3l4SFFVRkhMRU5CUVVNc2IwTkJRVzlETEVWQlFVVkRMRTFCUVUwc1EwRkJRenRKUVVOMFJUdEZRVUZETzBGQlFVRTdRVUZCUVN4SlFVRkJTU3hSUVVGQkxFZEJRVUZETEU5QlFVRXNZMEZIV1Zvc1MwRkJTenRCUVVGQllTeE5RVUZCTEVOQlFVRkVMRTlCUVVFc1IwRkJRVUVzVDBGQlFTeERRVUZCUlN4UFFVRkJJaXdpYVdkdWIzSmxUR2x6ZENJNlcxMTkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels.js ***!
  \****************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _byCity = _interopRequireDefault(__webpack_require__(/*! ./hotels/by-city.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-city.js\"));\nvar _byGeocode = _interopRequireDefault(__webpack_require__(/*! ./hotels/by-geocode.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-geocode.js\"));\nvar _byHotels = _interopRequireDefault(__webpack_require__(/*! ./hotels/by-hotels.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-hotels.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/locations/hotels` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.hotels;\n * ```\n *\n * @param {Client} client\n */\nvar Hotels = /*#__PURE__*/_createClass(function Hotels(client) {\n  _classCallCheck(this, Hotels);\n  this.client = client;\n  this.byCity = new _byCity[\"default\"](client);\n  this.byGeocode = new _byGeocode[\"default\"](client);\n  this.byHotels = new _byHotels[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Hotels;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYnlDaXR5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYnlHZW9jb2RlIiwiX2J5SG90ZWxzIiwiZSIsIl9fZXNNb2R1bGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwibyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b3R5cGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiX3R5cGVvZiIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiSG90ZWxzIiwiY2xpZW50IiwiYnlDaXR5IiwiYnlHZW9jb2RlIiwiYnlIb3RlbHMiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9yZWZlcmVuY2VfZGF0YS9sb2NhdGlvbnMvaG90ZWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBieUNpdHkgZnJvbSAnLi9ob3RlbHMvYnktY2l0eS5qcyc7XG5pbXBvcnQgYnlHZW9jb2RlIGZyb20gJy4vaG90ZWxzL2J5LWdlb2NvZGUuanMnO1xuaW1wb3J0IGJ5SG90ZWxzIGZyb20gJy4vaG90ZWxzL2J5LWhvdGVscy5qcyc7XG5cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9ob3RlbHNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5ob3RlbHM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIEhvdGVscyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuYnlDaXR5ID0gbmV3IGJ5Q2l0eShjbGllbnQpO1xuICAgIHRoaXMuYnlHZW9jb2RlID0gbmV3IGJ5R2VvY29kZShjbGllbnQpO1xuICAgIHRoaXMuYnlIb3RlbHMgPSBuZXcgYnlIb3RlbHMoY2xpZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb3RlbHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBNkMsU0FBQUQsdUJBQUFJLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNTSxNQUFNLGdCQUFBZCxZQUFBLENBQ1YsU0FBQWMsT0FBWUMsTUFBTSxFQUFFO0VBQUFKLGVBQUEsT0FBQUcsTUFBQTtFQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUNwQixJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJQSxrQkFBTSxDQUFDRCxNQUFNLENBQUM7RUFDaEMsSUFBSSxDQUFDRSxTQUFTLEdBQUcsSUFBSUEscUJBQVMsQ0FBQ0YsTUFBTSxDQUFDO0VBQ3RDLElBQUksQ0FBQ0csUUFBUSxHQUFHLElBQUlBLG9CQUFRLENBQUNILE1BQU0sQ0FBQztBQUN0QyxDQUFDO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1lOLE1BQU07QUFBQU8sTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-city.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-city.js ***!
  \************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/locations/hotels/by-city` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.hotels.byCity;\n * ```\n *\n * @param {Client} client\n */\nvar byCity = /*#__PURE__*/function () {\n  function byCity(client) {\n    _classCallCheck(this, byCity);\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of hotels for a given area.\n   *\n   * @param {Object} params\n   * @param {string} params.cityCode City IATA code\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find list of hotels in Barcelona\n   *\n   * ```js\n   * amadeus.referenceData.locations.hotels.byCity.get({\n   *   cityCode: 'BCN'\n   * });\n   * ```\n   */\n  return _createClass(byCity, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations/hotels/by-city', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = byCity;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJieUNpdHkiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucy9ob3RlbHMvYnktY2l0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvaG90ZWxzL2J5LWNpdHlgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5ob3RlbHMuYnlDaXR5O1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBieUNpdHkge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBob3RlbHMgZm9yIGEgZ2l2ZW4gYXJlYS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmNpdHlDb2RlIENpdHkgSUFUQSBjb2RlXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogRmluZCBsaXN0IG9mIGhvdGVscyBpbiBCYXJjZWxvbmFcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5ob3RlbHMuYnlDaXR5LmdldCh7XG4gICAqICAgY2l0eUNvZGU6ICdCQ04nXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvaG90ZWxzL2J5LWNpdHknLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ5Q2l0eTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsTUFBTTtFQUNWLFNBQUFBLE9BQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLE1BQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBZEUsT0FBQUUsWUFBQSxDQUFBSCxNQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQWVBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQyw2Q0FBNkMsRUFBRUMsTUFBTSxDQUFDO0lBQy9FO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixNQUFNO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucy9ob3RlbHMvYnktY2l0eS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsa0NBQWtDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxlQUFlLGtCQUFrQjtBQUNqQztBQUNBLDJDQUEyQyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdHJhdmVsLWFnZW5jeS8uL25vZGVfbW9kdWxlcy9hbWFkZXVzL2xpYi9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zL2hvdGVscy9ieS1jaXR5LmpzP2I1NzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9ob3RlbHMvYnktY2l0eWAgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmhvdGVscy5ieUNpdHk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbnZhciBieUNpdHkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBieUNpdHkoY2xpZW50KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGJ5Q2l0eSk7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgaG90ZWxzIGZvciBhIGdpdmVuIGFyZWEuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5jaXR5Q29kZSBDaXR5IElBVEEgY29kZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIEZpbmQgbGlzdCBvZiBob3RlbHMgaW4gQmFyY2Vsb25hXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMuaG90ZWxzLmJ5Q2l0eS5nZXQoe1xuICAgKiAgIGNpdHlDb2RlOiAnQkNOJ1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKGJ5Q2l0eSwgW3tcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9ob3RlbHMvYnktY2l0eScsIHBhcmFtcyk7XG4gICAgfVxuICB9XSk7XG59KCk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGJ5Q2l0eTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUppZVVOcGRIa2lMQ0pqYkdsbGJuUWlMQ0pmWTJ4aGMzTkRZV3hzUTJobFkyc2lMQ0pmWTNKbFlYUmxRMnhoYzNNaUxDSnJaWGtpTENKMllXeDFaU0lzSW1kbGRDSXNJbkJoY21GdGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW5WdVpHVm1hVzVsWkNJc0lsOWtaV1poZFd4MElpd2laWGh3YjNKMGN5SXNJbTF2WkhWc1pTSXNJbVJsWm1GMWJIUWlYU3dpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOHVMaTh1TGk5emNtTXZZVzFoWkdWMWN5OXVZVzFsYzNCaFkyVnpMM0psWm1WeVpXNWpaVjlrWVhSaEwyeHZZMkYwYVc5dWN5OW9iM1JsYkhNdllua3RZMmwwZVM1cWN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRUVnYm1GdFpYTndZV05sWkNCamJHbGxiblFnWm05eUlIUm9aVnh1SUNvZ1lDOTJNUzl5WldabGNtVnVZMlV0WkdGMFlTOXNiMk5oZEdsdmJuTXZhRzkwWld4ekwySjVMV05wZEhsZ0lHVnVaSEJ2YVc1MGMxeHVJQ3BjYmlBcUlFRmpZMlZ6Y3lCMmFXRWdkR2hsSUh0QWJHbHVheUJCYldGa1pYVnpmU0J2WW1wbFkzUmNiaUFxWEc0Z0tpQmdZR0JxYzF4dUlDb2diR1YwSUdGdFlXUmxkWE1nUFNCdVpYY2dRVzFoWkdWMWN5Z3BPMXh1SUNvZ1lXMWhaR1YxY3k1eVpXWmxjbVZ1WTJWRVlYUmhMbXh2WTJGMGFXOXVjeTVvYjNSbGJITXVZbmxEYVhSNU8xeHVJQ29nWUdCZ1hHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0RGJHbGxiblI5SUdOc2FXVnVkRnh1SUNvdlhHNWpiR0Z6Y3lCaWVVTnBkSGtnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhqYkdsbGJuUXBJSHRjYmlBZ0lDQjBhR2x6TG1Oc2FXVnVkQ0E5SUdOc2FXVnVkRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUdFZ2JHbHpkQ0J2WmlCb2IzUmxiSE1nWm05eUlHRWdaMmwyWlc0Z1lYSmxZUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhCaGNtRnRjMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NHRnlZVzF6TG1OcGRIbERiMlJsSUVOcGRIa2dTVUZVUVNCamIyUmxYRzRnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJVdVBGSmxjM0J2Ym5ObExGSmxjM0J2Ym5ObFJYSnliM0krZlNCaElGQnliMjFwYzJWY2JpQWdJQ3BjYmlBZ0lDb2dSbWx1WkNCc2FYTjBJRzltSUdodmRHVnNjeUJwYmlCQ1lYSmpaV3h2Ym1GY2JpQWdJQ3BjYmlBZ0lDb2dZR0JnYW5OY2JpQWdJQ29nWVcxaFpHVjFjeTV5WldabGNtVnVZMlZFWVhSaExteHZZMkYwYVc5dWN5NW9iM1JsYkhNdVlubERhWFI1TG1kbGRDaDdYRzRnSUNBcUlDQWdZMmwwZVVOdlpHVTZJQ2RDUTA0blhHNGdJQ0FxSUgwcE8xeHVJQ0FnS2lCZ1lHQmNiaUFnSUNvdlhHNGdJR2RsZENod1lYSmhiWE1nUFNCN2ZTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5zYVdWdWRDNW5aWFFvSnk5Mk1TOXlaV1psY21WdVkyVXRaR0YwWVM5c2IyTmhkR2x2Ym5NdmFHOTBaV3h6TDJKNUxXTnBkSGtuTENCd1lYSmhiWE1wTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdKNVEybDBlVHNpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQldrRXNTVUZoVFVFc1RVRkJUVHRGUVVOV0xGTkJRVUZCTEU5QlFWbERMRTFCUVUwc1JVRkJSVHRKUVVGQlF5eGxRVUZCTEU5QlFVRkdMRTFCUVVFN1NVRkRiRUlzU1VGQlNTeERRVUZEUXl4TlFVRk5MRWRCUVVkQkxFMUJRVTA3UlVGRGRFSTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlpFVXNUMEZCUVVVc1dVRkJRU3hEUVVGQlNDeE5RVUZCTzBsQlFVRkpMRWRCUVVFN1NVRkJRVU1zUzBGQlFTeEZRV1ZCTEZOQlFVRkRMRWxCUVVFc1JVRkJhVUk3VFVGQlFTeEpRVUZpUXl4TlFVRk5MRWRCUVVGRExGTkJRVUVzUTBGQlFVTXNUVUZCUVN4UlFVRkJSQ3hUUVVGQkxGRkJRVUZGTEZOQlFVRXNSMEZCUVVZc1UwRkJRU3hOUVVGSExFTkJRVU1zUTBGQlF6dE5RVU5pTEU5QlFVOHNTVUZCU1N4RFFVRkRVQ3hOUVVGTkxFTkJRVU5MTEVkQlFVY3NRMEZCUXl3MlEwRkJOa01zUlVGQlJVTXNUVUZCVFN4RFFVRkRPMGxCUXk5Rk8wVkJRVU03UVVGQlFUdEJRVUZCTEVsQlFVRkpMRkZCUVVFc1IwRkJRVU1zVDBGQlFTeGpRVWRaV2l4TlFVRk5PMEZCUVVGaExFMUJRVUVzUTBGQlFVUXNUMEZCUVN4SFFVRkJRU3hQUVVGQkxFTkJRVUZGTEU5QlFVRWlMQ0pwWjI1dmNtVk1hWE4wSWpwYlhYMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-city.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-geocode.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-geocode.js ***!
  \***************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/locations/hotels/by-geocode` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.hotels.byGeocode;\n * ```\n *\n * @param {Client} client\n */\nvar byGeocode = /*#__PURE__*/function () {\n  function byGeocode(client) {\n    _classCallCheck(this, byGeocode);\n    this.client = client;\n  }\n\n  /**\n   *  Returns a list of hotels for a given area.\n   *\n   * @param {Object} params\n   * @param {Double} params.latitude latitude location to be at the center of\n   * the search circle - required\n   * @param {Double} params.longitude longitude location to be at the center of\n   * the search circle - required\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   *  Returns a list of hotels within an area in Barcelona\n   *\n   * ```js\n   * amadeus.referenceData.locations.hotels.byGeocode.get({\n      latitude: 48.83152,\n      longitude: 2.24691\n   * });\n   * ```\n   */\n  return _createClass(byGeocode, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations/hotels/by-geocode', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = byGeocode;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJieUdlb2NvZGUiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucy9ob3RlbHMvYnktZ2VvY29kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvaG90ZWxzL2J5LWdlb2NvZGVgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5ob3RlbHMuYnlHZW9jb2RlO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBieUdlb2NvZGUge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiAgUmV0dXJucyBhIGxpc3Qgb2YgaG90ZWxzIGZvciBhIGdpdmVuIGFyZWEuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtEb3VibGV9IHBhcmFtcy5sYXRpdHVkZSBsYXRpdHVkZSBsb2NhdGlvbiB0byBiZSBhdCB0aGUgY2VudGVyIG9mXG4gICAqIHRoZSBzZWFyY2ggY2lyY2xlIC0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtEb3VibGV9IHBhcmFtcy5sb25naXR1ZGUgbG9uZ2l0dWRlIGxvY2F0aW9uIHRvIGJlIGF0IHRoZSBjZW50ZXIgb2ZcbiAgICogdGhlIHNlYXJjaCBjaXJjbGUgLSByZXF1aXJlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqICBSZXR1cm5zIGEgbGlzdCBvZiBob3RlbHMgd2l0aGluIGFuIGFyZWEgaW4gQmFyY2Vsb25hXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMuaG90ZWxzLmJ5R2VvY29kZS5nZXQoe1xuICAgICAgbGF0aXR1ZGU6IDQ4LjgzMTUyLFxuICAgICAgbG9uZ2l0dWRlOiAyLjI0NjkxXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvaG90ZWxzL2J5LWdlb2NvZGUnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ5R2VvY29kZTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsU0FBUztFQUNiLFNBQUFBLFVBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFNBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFsQkUsT0FBQUUsWUFBQSxDQUFBSCxTQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQW1CQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsZ0RBQWdELEVBQUVDLE1BQU0sQ0FBQztJQUNsRjtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosU0FBUztBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-geocode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-hotels.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-hotels.js ***!
  \**************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/locations/hotels/by-hotels` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.hotels.byHotels;\n * ```\n *\n * @param {Client} client\n */\nvar byHotels = /*#__PURE__*/function () {\n  function byHotels(client) {\n    _classCallCheck(this, byHotels);\n    this.client = client;\n  }\n\n  /**\n  * Returns a list of hotels for a given area.\n  *\n  * @param {Object} params\n  * @param {string} params.hotelIds Comma separated list of Amadeus hotel\n  *   codes to request. Example: XKPARC12\n  * @return {Promise.<Response,ResponseError>} a Promise\n  *\n  * Find relevant points of interest within an area in Barcelona\n  * ```js\n  * amadeus.referenceData.locations.hotels.byHotels.get({\n  *   hotelIds: 'ACPAR245'\n  * })\n  * ```\n  */\n  return _createClass(byHotels, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations/hotels/by-hotels', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = byHotels;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJieUhvdGVscyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zL2hvdGVscy9ieS1ob3RlbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL2hvdGVscy9ieS1ob3RlbHNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5ob3RlbHMuYnlIb3RlbHM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIGJ5SG90ZWxzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgKiBSZXR1cm5zIGEgbGlzdCBvZiBob3RlbHMgZm9yIGEgZ2l2ZW4gYXJlYS5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmhvdGVsSWRzIENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIEFtYWRldXMgaG90ZWxcbiAgKiAgIGNvZGVzIHRvIHJlcXVlc3QuIEV4YW1wbGU6IFhLUEFSQzEyXG4gICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAqXG4gICogRmluZCByZWxldmFudCBwb2ludHMgb2YgaW50ZXJlc3Qgd2l0aGluIGFuIGFyZWEgaW4gQmFyY2Vsb25hXG4gICogYGBganNcbiAgKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmhvdGVscy5ieUhvdGVscy5nZXQoe1xuICAqICAgaG90ZWxJZHM6ICdBQ1BBUjI0NSdcbiAgKiB9KVxuICAqIGBgYFxuICAqL1xuICBnZXQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KCcvdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL2hvdGVscy9ieS1ob3RlbHMnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ5SG90ZWxzOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxRQUFRO0VBQ1osU0FBQUEsU0FBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsUUFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFkRSxPQUFBRSxZQUFBLENBQUFILFFBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBZUEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLCtDQUErQyxFQUFFQyxNQUFNLENBQUM7SUFDakY7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLFFBQVE7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/hotels/by-hotels.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/poi.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/poi.js ***!
  \*************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/locations/pois` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.pointOfInterest;\n * ```\n *\n * @param {Client} client\n */\nvar PointOfInterest = /*#__PURE__*/function () {\n  function PointOfInterest(client, poiId) {\n    _classCallCheck(this, PointOfInterest);\n    this.client = client;\n    this._poiId = poiId;\n  }\n\n  /**\n   * Extracts the information about point of interest with given ID\n   *\n   * Extract the information about point of interest with ID '9CB40CB5D0'\n   * ```js\n   * amadeus.referenceData.locations.pointOfInterest('9CB40CB5D0').get();\n   * ```\n   */\n  return _createClass(PointOfInterest, [{\n    key: \"get\",\n    value: function get() {\n      return this.client.get(\"/v1/reference-data/locations/pois/\".concat(this._poiId));\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = PointOfInterest;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb2ludE9mSW50ZXJlc3QiLCJjbGllbnQiLCJwb2lJZCIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb2lJZCIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwiY29uY2F0IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zL3BvaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvcG9pc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLnBvaW50T2ZJbnRlcmVzdDtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgUG9pbnRPZkludGVyZXN0IHtcbiAgY29uc3RydWN0b3IoY2xpZW50LCBwb2lJZCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuX3BvaUlkID0gcG9pSWQ7XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdHMgdGhlIGluZm9ybWF0aW9uIGFib3V0IHBvaW50IG9mIGludGVyZXN0IHdpdGggZ2l2ZW4gSURcbiAgICpcbiAgICogRXh0cmFjdCB0aGUgaW5mb3JtYXRpb24gYWJvdXQgcG9pbnQgb2YgaW50ZXJlc3Qgd2l0aCBJRCAnOUNCNDBDQjVEMCdcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5wb2ludE9mSW50ZXJlc3QoJzlDQjQwQ0I1RDAnKS5nZXQoKTtcbiAgICogYGBgXG4gICAqL1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChgL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9wb2lzLyR7dGhpcy5fcG9pSWR9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9pbnRPZkludGVyZXN0O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLGVBQWU7RUFDbkIsU0FBQUEsZ0JBQVlDLE1BQU0sRUFBRUMsS0FBSyxFQUFFO0lBQUFDLGVBQUEsT0FBQUgsZUFBQTtJQUN6QixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNHLE1BQU0sR0FBR0YsS0FBSztFQUNyQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBUEUsT0FBQUcsWUFBQSxDQUFBTCxlQUFBO0lBQUFNLEdBQUE7SUFBQUMsS0FBQSxFQVFBLFNBQUFDLElBQUEsRUFBTTtNQUNKLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNPLEdBQUcsc0NBQUFDLE1BQUEsQ0FBc0MsSUFBSSxDQUFDTCxNQUFNLENBQUUsQ0FBQztJQUM1RTtFQUFDO0FBQUE7QUFBQSxJQUFBTSxRQUFBLEdBQUFDLE9BQUEsY0FHWVgsZUFBZTtBQUFBWSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucy9wb2kuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3UTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixlQUFlO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsZUFBZSxrQkFBa0I7QUFDakM7QUFDQSwyQ0FBMkMsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXRyYXZlbC1hZ2VuY3kvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL2xvY2F0aW9ucy9wb2kuanM/NGY4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL3BvaXNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5wb2ludE9mSW50ZXJlc3Q7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbnZhciBQb2ludE9mSW50ZXJlc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQb2ludE9mSW50ZXJlc3QoY2xpZW50LCBwb2lJZCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb2ludE9mSW50ZXJlc3QpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuX3BvaUlkID0gcG9pSWQ7XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdHMgdGhlIGluZm9ybWF0aW9uIGFib3V0IHBvaW50IG9mIGludGVyZXN0IHdpdGggZ2l2ZW4gSURcbiAgICpcbiAgICogRXh0cmFjdCB0aGUgaW5mb3JtYXRpb24gYWJvdXQgcG9pbnQgb2YgaW50ZXJlc3Qgd2l0aCBJRCAnOUNCNDBDQjVEMCdcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5wb2ludE9mSW50ZXJlc3QoJzlDQjQwQ0I1RDAnKS5nZXQoKTtcbiAgICogYGBgXG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFBvaW50T2ZJbnRlcmVzdCwgW3tcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoXCIvdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL3BvaXMvXCIuY29uY2F0KHRoaXMuX3BvaUlkKSk7XG4gICAgfVxuICB9XSk7XG59KCk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IFBvaW50T2ZJbnRlcmVzdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpRYjJsdWRFOW1TVzUwWlhKbGMzUWlMQ0pqYkdsbGJuUWlMQ0p3YjJsSlpDSXNJbDlqYkdGemMwTmhiR3hEYUdWamF5SXNJbDl3YjJsSlpDSXNJbDlqY21WaGRHVkRiR0Z6Y3lJc0ltdGxlU0lzSW5aaGJIVmxJaXdpWjJWMElpd2lZMjl1WTJGMElpd2lYMlJsWm1GMWJIUWlMQ0psZUhCdmNuUnpJaXdpYlc5a2RXeGxJaXdpWkdWbVlYVnNkQ0pkTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMeTR1TDNOeVl5OWhiV0ZrWlhWekwyNWhiV1Z6Y0dGalpYTXZjbVZtWlhKbGJtTmxYMlJoZEdFdmJHOWpZWFJwYjI1ekwzQnZhUzVxY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFRWdibUZ0WlhOd1lXTmxaQ0JqYkdsbGJuUWdabTl5SUhSb1pWeHVJQ29nWUM5Mk1TOXlaV1psY21WdVkyVXRaR0YwWVM5c2IyTmhkR2x2Ym5NdmNHOXBjMkFnWlc1a2NHOXBiblJ6WEc0Z0tseHVJQ29nUVdOalpYTnpJSFpwWVNCMGFHVWdlMEJzYVc1cklFRnRZV1JsZFhOOUlHOWlhbVZqZEZ4dUlDcGNiaUFxSUdCZ1lHcHpYRzRnS2lCc1pYUWdZVzFoWkdWMWN5QTlJRzVsZHlCQmJXRmtaWFZ6S0NrN1hHNGdLaUJoYldGa1pYVnpMbkpsWm1WeVpXNWpaVVJoZEdFdWJHOWpZWFJwYjI1ekxuQnZhVzUwVDJaSmJuUmxjbVZ6ZER0Y2JpQXFJR0JnWUZ4dUlDcGNiaUFxSUVCd1lYSmhiU0I3UTJ4cFpXNTBmU0JqYkdsbGJuUmNiaUFxTDF4dVkyeGhjM01nVUc5cGJuUlBaa2x1ZEdWeVpYTjBJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9ZMnhwWlc1MExDQndiMmxKWkNrZ2UxeHVJQ0FnSUhSb2FYTXVZMnhwWlc1MElEMGdZMnhwWlc1ME8xeHVJQ0FnSUhSb2FYTXVYM0J2YVVsa0lEMGdjRzlwU1dRN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSWGgwY21GamRITWdkR2hsSUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUhCdmFXNTBJRzltSUdsdWRHVnlaWE4wSUhkcGRHZ2daMmwyWlc0Z1NVUmNiaUFnSUNwY2JpQWdJQ29nUlhoMGNtRmpkQ0IwYUdVZ2FXNW1iM0p0WVhScGIyNGdZV0p2ZFhRZ2NHOXBiblFnYjJZZ2FXNTBaWEpsYzNRZ2QybDBhQ0JKUkNBbk9VTkNOREJEUWpWRU1DZGNiaUFnSUNvZ1lHQmdhbk5jYmlBZ0lDb2dZVzFoWkdWMWN5NXlaV1psY21WdVkyVkVZWFJoTG14dlkyRjBhVzl1Y3k1d2IybHVkRTltU1c1MFpYSmxjM1FvSnpsRFFqUXdRMEkxUkRBbktTNW5aWFFvS1R0Y2JpQWdJQ29nWUdCZ1hHNGdJQ0FxTDF4dUlDQm5aWFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeHBaVzUwTG1kbGRDaGdMM1l4TDNKbFptVnlaVzVqWlMxa1lYUmhMMnh2WTJGMGFXOXVjeTl3YjJsekx5UjdkR2hwY3k1ZmNHOXBTV1I5WUNrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VHOXBiblJQWmtsdWRHVnlaWE4wTzF4dUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVnBCTEVsQllVMUJMR1ZCUVdVN1JVRkRia0lzVTBGQlFVRXNaMEpCUVZsRExFMUJRVTBzUlVGQlJVTXNTMEZCU3l4RlFVRkZPMGxCUVVGRExHVkJRVUVzVDBGQlFVZ3NaVUZCUVR0SlFVTjZRaXhKUVVGSkxFTkJRVU5ETEUxQlFVMHNSMEZCUjBFc1RVRkJUVHRKUVVOd1FpeEpRVUZKTEVOQlFVTkhMRTFCUVUwc1IwRkJSMFlzUzBGQlN6dEZRVU55UWpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCVUVVc1QwRkJRVWNzV1VGQlFTeERRVUZCVEN4bFFVRkJPMGxCUVVGTkxFZEJRVUU3U1VGQlFVTXNTMEZCUVN4RlFWRkJMRk5CUVVGRExFbEJRVUVzUlVGQlRUdE5RVU5LTEU5QlFVOHNTVUZCU1N4RFFVRkRVQ3hOUVVGTkxFTkJRVU5QTEVkQlFVY3NjME5CUVVGRExFMUJRVUVzUTBGQmMwTXNTVUZCU1N4RFFVRkRUQ3hOUVVGTkxFTkJRVVVzUTBGQlF6dEpRVU0xUlR0RlFVRkRPMEZCUVVFN1FVRkJRU3hKUVVGQlRTeFJRVUZCTEVkQlFVRkRMRTlCUVVFc1kwRkhXVmdzWlVGQlpUdEJRVUZCV1N4TlFVRkJMRU5CUVVGRUxFOUJRVUVzUjBGQlFVRXNUMEZCUVN4RFFVRkJSU3hQUVVGQklpd2lhV2R1YjNKbFRHbHpkQ0k2VzExOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/poi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/points_of_interest/by-square.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/points_of_interest/by-square.js ***!
  \**************************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/locations/pois/by-square` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.pointsOfInterest.bySquare;\n * ```\n *\n * @param {Client} client\n */\nvar bySquare = /*#__PURE__*/function () {\n  function bySquare(client) {\n    _classCallCheck(this, bySquare);\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of relevant points of interest for a given area.\n   *\n   * @param {Object} params\n   * @param {Double} params.north latitude north of bounding box - required\n   * @param {Double} params.west  longitude west of bounding box - required\n   * @param {Double} params.south latitude south of bounding box - required\n   * @param {Double} params.east  longitude east of bounding box - required\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find relevant points of interest within an area in Barcelona\n   *\n   * ```js\n   * amadeus.referenceData.locations.pointsOfInterest.bySquare.get({\n   *   north: 41.397158,\n   *   west: 2.160873,\n   *   south: 41.394582,\n   *   east: 2.177181\n   * });\n   * ```\n   */\n  return _createClass(bySquare, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations/pois/by-square', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = bySquare;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJieVNxdWFyZSIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zL3BvaW50c19vZl9pbnRlcmVzdC9ieS1zcXVhcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL3BvaXMvYnktc3F1YXJlYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMucG9pbnRzT2ZJbnRlcmVzdC5ieVNxdWFyZTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgYnlTcXVhcmUge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiByZWxldmFudCBwb2ludHMgb2YgaW50ZXJlc3QgZm9yIGEgZ2l2ZW4gYXJlYS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLm5vcnRoIGxhdGl0dWRlIG5vcnRoIG9mIGJvdW5kaW5nIGJveCAtIHJlcXVpcmVkXG4gICAqIEBwYXJhbSB7RG91YmxlfSBwYXJhbXMud2VzdCAgbG9uZ2l0dWRlIHdlc3Qgb2YgYm91bmRpbmcgYm94IC0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtEb3VibGV9IHBhcmFtcy5zb3V0aCBsYXRpdHVkZSBzb3V0aCBvZiBib3VuZGluZyBib3ggLSByZXF1aXJlZFxuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmVhc3QgIGxvbmdpdHVkZSBlYXN0IG9mIGJvdW5kaW5nIGJveCAtIHJlcXVpcmVkXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogRmluZCByZWxldmFudCBwb2ludHMgb2YgaW50ZXJlc3Qgd2l0aGluIGFuIGFyZWEgaW4gQmFyY2Vsb25hXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMucG9pbnRzT2ZJbnRlcmVzdC5ieVNxdWFyZS5nZXQoe1xuICAgKiAgIG5vcnRoOiA0MS4zOTcxNTgsXG4gICAqICAgd2VzdDogMi4xNjA4NzMsXG4gICAqICAgc291dGg6IDQxLjM5NDU4MixcbiAgICogICBlYXN0OiAyLjE3NzE4MVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBnZXQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KCcvdjEvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zL3BvaXMvYnktc3F1YXJlJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBieVNxdWFyZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxRQUFRO0VBQ1osU0FBQUEsU0FBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsUUFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFwQkUsT0FBQUUsWUFBQSxDQUFBSCxRQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQXFCQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsNkNBQTZDLEVBQUVDLE1BQU0sQ0FBQztJQUMvRTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosUUFBUTtBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/points_of_interest/by-square.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/pois.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/pois.js ***!
  \**************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _bySquare = _interopRequireDefault(__webpack_require__(/*! ./points_of_interest/by-square */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/points_of_interest/by-square.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/locations/pois` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.locations.pointsOfInterest;\n * ```\n *\n * @param {Client} client\n */\nvar PointsOfInterest = /*#__PURE__*/function () {\n  function PointsOfInterest(client) {\n    _classCallCheck(this, PointsOfInterest);\n    this.client = client;\n    this.bySquare = new _bySquare[\"default\"](client);\n  }\n\n  /**\n   * Returns a list of relevant points of interest near to a given point\n   *\n   * @param {Object} params\n   * @param {Double} params.latitude latitude location to be at the center of\n   *   the search circle - required\n   * @param {Double} params.longitude longitude location to be at the center of\n   *   the search circle - required\n   * @param {Double} params.radius radius of the search in Kilometer - optional\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find relevant points of interest close to Barcelona\n   *\n   * ```js\n   * amadeus.referenceData.locations.pointsOfInterest.get({\n   *   longitude: 2.160873,\n   *   latitude: 41.397158\n   * });\n   * ```\n   */\n  return _createClass(PointsOfInterest, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/locations/pois', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = PointsOfInterest;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYnlTcXVhcmUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsIm8iLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsImkiLCJfdG9QcmltaXRpdmUiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJTdHJpbmciLCJOdW1iZXIiLCJQb2ludHNPZkludGVyZXN0IiwiY2xpZW50IiwiYnlTcXVhcmUiLCJCeVNxdWFyZSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zL3BvaXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJ5U3F1YXJlIGZyb20gJy4vcG9pbnRzX29mX2ludGVyZXN0L2J5LXNxdWFyZSc7XG5cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucy9wb2lzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMucG9pbnRzT2ZJbnRlcmVzdDtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgUG9pbnRzT2ZJbnRlcmVzdCB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuYnlTcXVhcmUgPSBuZXcgQnlTcXVhcmUoY2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiByZWxldmFudCBwb2ludHMgb2YgaW50ZXJlc3QgbmVhciB0byBhIGdpdmVuIHBvaW50XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtEb3VibGV9IHBhcmFtcy5sYXRpdHVkZSBsYXRpdHVkZSBsb2NhdGlvbiB0byBiZSBhdCB0aGUgY2VudGVyIG9mXG4gICAqICAgdGhlIHNlYXJjaCBjaXJjbGUgLSByZXF1aXJlZFxuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmxvbmdpdHVkZSBsb25naXR1ZGUgbG9jYXRpb24gdG8gYmUgYXQgdGhlIGNlbnRlciBvZlxuICAgKiAgIHRoZSBzZWFyY2ggY2lyY2xlIC0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtEb3VibGV9IHBhcmFtcy5yYWRpdXMgcmFkaXVzIG9mIHRoZSBzZWFyY2ggaW4gS2lsb21ldGVyIC0gb3B0aW9uYWxcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBGaW5kIHJlbGV2YW50IHBvaW50cyBvZiBpbnRlcmVzdCBjbG9zZSB0byBCYXJjZWxvbmFcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5wb2ludHNPZkludGVyZXN0LmdldCh7XG4gICAqICAgbG9uZ2l0dWRlOiAyLjE2MDg3MyxcbiAgICogICBsYXRpdHVkZTogNDEuMzk3MTU4XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9yZWZlcmVuY2UtZGF0YS9sb2NhdGlvbnMvcG9pcycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9pbnRzT2ZJbnRlcmVzdDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQXNELFNBQUFELHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxRQUFBQyxDQUFBLHNDQUFBRCxPQUFBLHdCQUFBRSxNQUFBLHVCQUFBQSxNQUFBLENBQUFDLFFBQUEsYUFBQUYsQ0FBQSxrQkFBQUEsQ0FBQSxnQkFBQUEsQ0FBQSxXQUFBQSxDQUFBLHlCQUFBQyxNQUFBLElBQUFELENBQUEsQ0FBQUcsV0FBQSxLQUFBRixNQUFBLElBQUFELENBQUEsS0FBQUMsTUFBQSxDQUFBRyxTQUFBLHFCQUFBSixDQUFBLEtBQUFELE9BQUEsQ0FBQUMsQ0FBQTtBQUFBLFNBQUFLLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFDLFNBQUE7QUFBQSxTQUFBQyxrQkFBQVosQ0FBQSxFQUFBYSxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBWCxDQUFBLEdBQUFVLENBQUEsQ0FBQUMsQ0FBQSxHQUFBWCxDQUFBLENBQUFhLFVBQUEsR0FBQWIsQ0FBQSxDQUFBYSxVQUFBLFFBQUFiLENBQUEsQ0FBQWMsWUFBQSxrQkFBQWQsQ0FBQSxLQUFBQSxDQUFBLENBQUFlLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFwQixDQUFBLEVBQUFxQixjQUFBLENBQUFsQixDQUFBLENBQUFtQixHQUFBLEdBQUFuQixDQUFBO0FBQUEsU0FBQW9CLGFBQUF2QixDQUFBLEVBQUFhLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFaLENBQUEsQ0FBQU8sU0FBQSxFQUFBTSxDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQVosQ0FBQSxFQUFBYyxDQUFBLEdBQUFLLE1BQUEsQ0FBQUMsY0FBQSxDQUFBcEIsQ0FBQSxpQkFBQWtCLFFBQUEsU0FBQWxCLENBQUE7QUFBQSxTQUFBcUIsZUFBQVAsQ0FBQSxRQUFBVSxDQUFBLEdBQUFDLFlBQUEsQ0FBQVgsQ0FBQSxnQ0FBQVosT0FBQSxDQUFBc0IsQ0FBQSxJQUFBQSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBQyxhQUFBWCxDQUFBLEVBQUFELENBQUEsb0JBQUFYLE9BQUEsQ0FBQVksQ0FBQSxNQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQWQsQ0FBQSxHQUFBYyxDQUFBLENBQUFWLE1BQUEsQ0FBQXNCLFdBQUEsa0JBQUExQixDQUFBLFFBQUF3QixDQUFBLEdBQUF4QixDQUFBLENBQUEyQixJQUFBLENBQUFiLENBQUEsRUFBQUQsQ0FBQSxnQ0FBQVgsT0FBQSxDQUFBc0IsQ0FBQSxVQUFBQSxDQUFBLFlBQUFiLFNBQUEseUVBQUFFLENBQUEsR0FBQWUsTUFBQSxHQUFBQyxNQUFBLEVBQUFmLENBQUE7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNZ0IsZ0JBQWdCO0VBQ3BCLFNBQUFBLGlCQUFZQyxNQUFNLEVBQUU7SUFBQXZCLGVBQUEsT0FBQXNCLGdCQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlDLG9CQUFRLENBQUNGLE1BQU0sQ0FBQztFQUN0Qzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBbkJFLE9BQUFSLFlBQUEsQ0FBQU8sZ0JBQUE7SUFBQVIsR0FBQTtJQUFBWSxLQUFBLEVBb0JBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQXRCLE1BQUEsUUFBQXNCLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNOLE1BQU0sQ0FBQ0ksR0FBRyxDQUFDLG1DQUFtQyxFQUFFQyxNQUFNLENBQUM7SUFDckU7RUFBQztBQUFBO0FBQUEsSUFBQUcsUUFBQSxHQUFBQyxPQUFBLGNBR1lWLGdCQUFnQjtBQUFBVyxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/locations/pois.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/recommended_locations.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/recommended_locations.js ***!
  \*********************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/reference-data/recommended-locations` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.recommendedLocations;\n * ```\n *\n * @param {Client} client\n */\nvar RecommendedLocations = /*#__PURE__*/function () {\n  function RecommendedLocations(client) {\n    _classCallCheck(this, RecommendedLocations);\n    this.client = client;\n  }\n\n  /**\n   * Returns the recommended locations (destinations).\n   *\n   * @param {Object} params\n   * @param {string} params.cityCodes Code of the city following IATA standard.\n   * @param {string} params.travelerCountryCode Origin country of the traveler following IATA standard.\n   * @param {string} params.destinationCountryCodes Country codes follow IATA standard.\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Get recommended destinations from a given origin\n   *\n   * ```js\n   * amadeus.referenceData.recommendedDestinations.get({\n   *   cityCodes: 'PAR',\n   *   travelerCountryCode: 'FR'\n   * });\n   * ```\n   */\n  return _createClass(RecommendedLocations, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/reference-data/recommended-locations', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = RecommendedLocations;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWNvbW1lbmRlZExvY2F0aW9ucyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvcmVjb21tZW5kZWRfbG9jYXRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3JlZmVyZW5jZS1kYXRhL3JlY29tbWVuZGVkLWxvY2F0aW9uc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEucmVjb21tZW5kZWRMb2NhdGlvbnM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIFJlY29tbWVuZGVkTG9jYXRpb25zIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcmVjb21tZW5kZWQgbG9jYXRpb25zIChkZXN0aW5hdGlvbnMpLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuY2l0eUNvZGVzIENvZGUgb2YgdGhlIGNpdHkgZm9sbG93aW5nIElBVEEgc3RhbmRhcmQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMudHJhdmVsZXJDb3VudHJ5Q29kZSBPcmlnaW4gY291bnRyeSBvZiB0aGUgdHJhdmVsZXIgZm9sbG93aW5nIElBVEEgc3RhbmRhcmQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGVzdGluYXRpb25Db3VudHJ5Q29kZXMgQ291bnRyeSBjb2RlcyBmb2xsb3cgSUFUQSBzdGFuZGFyZC5cbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBHZXQgcmVjb21tZW5kZWQgZGVzdGluYXRpb25zIGZyb20gYSBnaXZlbiBvcmlnaW5cbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLnJlY29tbWVuZGVkRGVzdGluYXRpb25zLmdldCh7XG4gICAqICAgY2l0eUNvZGVzOiAnUEFSJyxcbiAgICogICB0cmF2ZWxlckNvdW50cnlDb2RlOiAnRlInXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9yZWZlcmVuY2UtZGF0YS9yZWNvbW1lbmRlZC1sb2NhdGlvbnMnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlY29tbWVuZGVkTG9jYXRpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLG9CQUFvQjtFQUN4QixTQUFBQSxxQkFBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsb0JBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBakJFLE9BQUFFLFlBQUEsQ0FBQUgsb0JBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBa0JBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQywwQ0FBMEMsRUFBRUMsTUFBTSxDQUFDO0lBQzVFO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixvQkFBb0I7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/recommended_locations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/urls.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/urls.js ***!
  \****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _checkin_links = _interopRequireDefault(__webpack_require__(/*! ./urls/checkin_links */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/urls/checkin_links.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v2/reference-data/urls` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.urls;\n * ```\n *\n * @param {Client} client\n * @property {CheckinLinks} checkin_links\n * @protected\n */\nvar Urls = /*#__PURE__*/_createClass(function Urls(client) {\n  _classCallCheck(this, Urls);\n  this.client = client;\n  this.checkinLinks = new _checkin_links[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Urls;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2hlY2tpbl9saW5rcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZSIsIl9fZXNNb2R1bGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwibyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b3R5cGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiX3R5cGVvZiIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiVXJscyIsImNsaWVudCIsImNoZWNraW5MaW5rcyIsIkNoZWNraW5MaW5rcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL3VybHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENoZWNraW5MaW5rcyBmcm9tICcuL3VybHMvY2hlY2tpbl9saW5rcyc7XG5cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL3JlZmVyZW5jZS1kYXRhL3VybHNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLnVybHM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge0NoZWNraW5MaW5rc30gY2hlY2tpbl9saW5rc1xuICogQHByb3RlY3RlZFxuICovXG5jbGFzcyBVcmxzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5jaGVja2luTGlua3MgPSBuZXcgQ2hlY2tpbkxpbmtzKGNsaWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXJscztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUFnRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLGdCQUFBQSxDQUFBO0FBQUEsU0FBQUUsa0JBQUFGLENBQUEsRUFBQUcsQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUQsQ0FBQSxDQUFBRSxNQUFBLEVBQUFELENBQUEsVUFBQUUsQ0FBQSxHQUFBSCxDQUFBLENBQUFDLENBQUEsR0FBQUUsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsQ0FBQUMsVUFBQSxRQUFBRCxDQUFBLENBQUFFLFlBQUEsa0JBQUFGLENBQUEsS0FBQUEsQ0FBQSxDQUFBRyxRQUFBLFFBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLEVBQUFZLGNBQUEsQ0FBQU4sQ0FBQSxDQUFBTyxHQUFBLEdBQUFQLENBQUE7QUFBQSxTQUFBUSxhQUFBZCxDQUFBLEVBQUFHLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFGLENBQUEsQ0FBQWUsU0FBQSxFQUFBWixDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQUYsQ0FBQSxFQUFBSSxDQUFBLEdBQUFNLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWCxDQUFBLGlCQUFBUyxRQUFBLFNBQUFULENBQUE7QUFBQSxTQUFBWSxlQUFBUixDQUFBLFFBQUFZLENBQUEsR0FBQUMsWUFBQSxDQUFBYixDQUFBLGdDQUFBYyxPQUFBLENBQUFGLENBQUEsSUFBQUEsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQUMsYUFBQWIsQ0FBQSxFQUFBRCxDQUFBLG9CQUFBZSxPQUFBLENBQUFkLENBQUEsTUFBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFKLENBQUEsR0FBQUksQ0FBQSxDQUFBZSxNQUFBLENBQUFDLFdBQUEsa0JBQUFwQixDQUFBLFFBQUFnQixDQUFBLEdBQUFoQixDQUFBLENBQUFxQixJQUFBLENBQUFqQixDQUFBLEVBQUFELENBQUEsZ0NBQUFlLE9BQUEsQ0FBQUYsQ0FBQSxVQUFBQSxDQUFBLFlBQUFNLFNBQUEseUVBQUFuQixDQUFBLEdBQUFvQixNQUFBLEdBQUFDLE1BQUEsRUFBQXBCLENBQUE7QUFBQSxTQUFBcUIsZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUwsU0FBQTtBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFkQSxJQWVNTSxJQUFJLGdCQUFBZCxZQUFBLENBQ1IsU0FBQWMsS0FBWUMsTUFBTSxFQUFFO0VBQUFKLGVBQUEsT0FBQUcsSUFBQTtFQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUNwQixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJQyx5QkFBWSxDQUFDRixNQUFNLENBQUM7QUFDOUMsQ0FBQztBQUFBLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxjQUdZTCxJQUFJO0FBQUFNLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/urls.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/urls/checkin_links.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/reference_data/urls/checkin_links.js ***!
  \******************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/reference-data/urls/checkin-links` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.referenceData.urls.checkinLinks;\n * ```\n *\n * @param {Client} client\n */\nvar CheckinLinks = /*#__PURE__*/function () {\n  function CheckinLinks(client) {\n    _classCallCheck(this, CheckinLinks);\n    this.client = client;\n  }\n\n  /**\n   * Returns the checkin links for an airline, for the\n   * language of your choice\n   *\n   * @param {Object} params\n   * @param {string} params.airlineCode airline ID - required\n   * @param {string} [params.language=\"en-GB\"] the locale for the links\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find a the checkin links for Air France\n   *\n   * ```js\n   * amadeus.referenceData.urls.checkinLinks.get({\n   *   airlineCode: 'AF'\n   * });\n   * ```\n   */\n  return _createClass(CheckinLinks, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v2/reference-data/urls/checkin-links', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = CheckinLinks;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGVja2luTGlua3MiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhL3VybHMvY2hlY2tpbl9saW5rcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92Mi9yZWZlcmVuY2UtZGF0YS91cmxzL2NoZWNraW4tbGlua3NgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLnVybHMuY2hlY2tpbkxpbmtzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBDaGVja2luTGlua3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjaGVja2luIGxpbmtzIGZvciBhbiBhaXJsaW5lLCBmb3IgdGhlXG4gICAqIGxhbmd1YWdlIG9mIHlvdXIgY2hvaWNlXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5haXJsaW5lQ29kZSBhaXJsaW5lIElEIC0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMubGFuZ3VhZ2U9XCJlbi1HQlwiXSB0aGUgbG9jYWxlIGZvciB0aGUgbGlua3NcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBGaW5kIGEgdGhlIGNoZWNraW4gbGlua3MgZm9yIEFpciBGcmFuY2VcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLnVybHMuY2hlY2tpbkxpbmtzLmdldCh7XG4gICAqICAgYWlybGluZUNvZGU6ICdBRidcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YyL3JlZmVyZW5jZS1kYXRhL3VybHMvY2hlY2tpbi1saW5rcycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tpbkxpbmtzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLFlBQVk7RUFDaEIsU0FBQUEsYUFBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsWUFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBaEJFLE9BQUFFLFlBQUEsQ0FBQUgsWUFBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFpQkEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLHVDQUF1QyxFQUFFQyxNQUFNLENBQUM7SUFDekU7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLFlBQVk7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/reference_data/urls/checkin_links.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/schedule.js":
/*!*****************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/schedule.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _flights = _interopRequireDefault(__webpack_require__(/*! ./schedule/flights */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/schedule/flights.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v2/schedule` endpoints\n *\n * Access via the {Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.schedule.flights;\n * ```\n *\n * @param {Client} client\n * @property {Flights} flights\n * @protected\n */\nvar Schedule = /*#__PURE__*/_createClass(function Schedule(client) {\n  _classCallCheck(this, Schedule);\n  this.client = client;\n  this.flights = new _flights[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Schedule;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxpZ2h0cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZSIsIl9fZXNNb2R1bGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwibyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b3R5cGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiX3R5cGVvZiIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiU2NoZWR1bGUiLCJjbGllbnQiLCJmbGlnaHRzIiwiRmxpZ2h0cyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3NjaGVkdWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGbGlnaHRzIGZyb20gJy4vc2NoZWR1bGUvZmxpZ2h0cyc7XG5cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL3NjaGVkdWxlYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuc2NoZWR1bGUuZmxpZ2h0cztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqIEBwcm9wZXJ0eSB7RmxpZ2h0c30gZmxpZ2h0c1xuICogQHByb3RlY3RlZFxuICovXG5jbGFzcyBTY2hlZHVsZSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuZmxpZ2h0cyA9IG5ldyBGbGlnaHRzKGNsaWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NoZWR1bGU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBeUMsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEEsSUFlTU0sUUFBUSxnQkFBQWQsWUFBQSxDQUNaLFNBQUFjLFNBQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLFFBQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDcEIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSUMsbUJBQU8sQ0FBQ0YsTUFBTSxDQUFDO0FBQ3BDLENBQUM7QUFBQSxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsY0FHWUwsUUFBUTtBQUFBTSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/schedule.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/schedule/flights.js":
/*!*************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/schedule/flights.js ***!
  \*************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/schedule/flights` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.schedule.flights;\n * ```\n *\n * @param {Client} client\n */\nvar Flights = /*#__PURE__*/function () {\n  function Flights(client) {\n    _classCallCheck(this, Flights);\n    this.client = client;\n  }\n\n  /**\n   * Provides real-time flight schedule data including up-to-date departure and arrival times,\n   *  terminal and gate information, flight duration and real-time delay status\n   *\n   * @param {Object} params\n   * @param {Double} params.carrierCode 2 to 3-character IATA carrier code - required\n   * @param {Double} params.flightNumber 1 to 4-digit number of the flight. e.g. 4537 - required\n   * @param {Double} params.scheduledDepartureDate scheduled departure date of the flight, local to the departure airport - required\n   * @return {Promise.<Response,ResponseError>} a Promise\n   * What's the current status of my flight?\n   * ```js\n   * amadeus.schedule.flights.get({\n   * carrierCode: 'AZ',\n   * flightNumber: '319',\n   * scheduledDepartureDate: '2021-03-13'\n   * });\n   * ```\n   */\n  return _createClass(Flights, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v2/schedule/flights', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Flights;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHRzIiwiY2xpZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJnZXQiLCJwYXJhbXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9zY2hlZHVsZS9mbGlnaHRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL3NjaGVkdWxlL2ZsaWdodHNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zY2hlZHVsZS5mbGlnaHRzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBGbGlnaHRzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgcmVhbC10aW1lIGZsaWdodCBzY2hlZHVsZSBkYXRhIGluY2x1ZGluZyB1cC10by1kYXRlIGRlcGFydHVyZSBhbmQgYXJyaXZhbCB0aW1lcyxcbiAgICogIHRlcm1pbmFsIGFuZCBnYXRlIGluZm9ybWF0aW9uLCBmbGlnaHQgZHVyYXRpb24gYW5kIHJlYWwtdGltZSBkZWxheSBzdGF0dXNcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmNhcnJpZXJDb2RlIDIgdG8gMy1jaGFyYWN0ZXIgSUFUQSBjYXJyaWVyIGNvZGUgLSByZXF1aXJlZFxuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmZsaWdodE51bWJlciAxIHRvIDQtZGlnaXQgbnVtYmVyIG9mIHRoZSBmbGlnaHQuIGUuZy4gNDUzNyAtIHJlcXVpcmVkXG4gICAqIEBwYXJhbSB7RG91YmxlfSBwYXJhbXMuc2NoZWR1bGVkRGVwYXJ0dXJlRGF0ZSBzY2hlZHVsZWQgZGVwYXJ0dXJlIGRhdGUgb2YgdGhlIGZsaWdodCwgbG9jYWwgdG8gdGhlIGRlcGFydHVyZSBhaXJwb3J0IC0gcmVxdWlyZWRcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKiBXaGF0J3MgdGhlIGN1cnJlbnQgc3RhdHVzIG9mIG15IGZsaWdodD9cbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zY2hlZHVsZS5mbGlnaHRzLmdldCh7XG4gICAqIGNhcnJpZXJDb2RlOiAnQVonLFxuICAgKiBmbGlnaHROdW1iZXI6ICczMTknLFxuICAgKiBzY2hlZHVsZWREZXBhcnR1cmVEYXRlOiAnMjAyMS0wMy0xMydcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YyL3NjaGVkdWxlL2ZsaWdodHMnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZsaWdodHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsT0FBTztFQUNYLFNBQUFBLFFBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLE9BQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBakJFLE9BQUFFLFlBQUEsQ0FBQUgsT0FBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFrQkEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLHNCQUFzQixFQUFFQyxNQUFNLENBQUM7SUFDeEQ7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLE9BQU87QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/schedule/flights.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping.js":
/*!*****************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _flight_destinations = _interopRequireDefault(__webpack_require__(/*! ./shopping/flight_destinations */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_destinations.js\"));\nvar _flight_offers = _interopRequireDefault(__webpack_require__(/*! ./shopping/flight_offers */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers.js\"));\nvar _flight_offers_search = _interopRequireDefault(__webpack_require__(/*! ./shopping/flight_offers_search */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers_search.js\"));\nvar _flight_dates = _interopRequireDefault(__webpack_require__(/*! ./shopping/flight_dates */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_dates.js\"));\nvar _seatmaps = _interopRequireDefault(__webpack_require__(/*! ./shopping/seatmaps */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/seatmaps.js\"));\nvar _hotel_offer_search = _interopRequireDefault(__webpack_require__(/*! ./shopping/hotel_offer_search */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/hotel_offer_search.js\"));\nvar _hotel_offers_search = _interopRequireDefault(__webpack_require__(/*! ./shopping/hotel_offers_search */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/hotel_offers_search.js\"));\nvar _activities = _interopRequireDefault(__webpack_require__(/*! ./shopping/activities */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activities.js\"));\nvar _activity = _interopRequireDefault(__webpack_require__(/*! ./shopping/activity */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activity.js\"));\nvar _availability = _interopRequireDefault(__webpack_require__(/*! ./shopping/availability */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/availability.js\"));\nvar _transfer_offers = _interopRequireDefault(__webpack_require__(/*! ./shopping/transfer_offers */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/transfer_offers.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping`, `/v2/shopping` and `/v3/shopping` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping;\n * ```\n *\n * @param {Client} client\n * @property {FlightDestinations} flightDestinations\n * @property {FlightOffers} flightOffers\n * @property {FlightOffersSearch} flightOffersSearch\n * @property {FlightDates} flightDates\n * @property {Seatmaps} seatmaps\n * @property {HotelOfferSearch} hotelOffers\n * @property {HotelOffersSearch} hotelOffers\n * @property {Availability} availability\n * @property {TransferOffers} transferOffers\n */\nvar Shopping = /*#__PURE__*/function () {\n  function Shopping(client) {\n    _classCallCheck(this, Shopping);\n    this.client = client;\n    this.flightDestinations = new _flight_destinations[\"default\"](client);\n    this.flightOffers = new _flight_offers[\"default\"](client);\n    this.flightOffersSearch = new _flight_offers_search[\"default\"](client);\n    this.flightDates = new _flight_dates[\"default\"](client);\n    this.seatmaps = new _seatmaps[\"default\"](client);\n    this.hotelOffersSearch = new _hotel_offers_search[\"default\"](client);\n    this.activities = new _activities[\"default\"](client);\n    this.availability = new _availability[\"default\"](client);\n    this.transferOffers = new _transfer_offers[\"default\"](client);\n  }\n\n  /**\n   * Loads a namespaced path for a specific offer ID for Hotel Search V3\n   *\n   * @param  {string} [offerId]  The ID of the offer for a dedicated hotel\n   * @return {HotelOfferSearch}\n   **/\n  return _createClass(Shopping, [{\n    key: \"hotelOfferSearch\",\n    value: function hotelOfferSearch(offerId) {\n      return new _hotel_offer_search[\"default\"](this.client, offerId);\n    }\n\n    /**\n     * Loads a namespaced path for a specific activity ID\n     *\n     * @param  {string} [activityId]  The ID of the activity for a dedicated tour or activity\n     * @return {Activity}\n     **/\n  }, {\n    key: \"activity\",\n    value: function activity(activityId) {\n      return new _activity[\"default\"](this.client, activityId);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Shopping;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activities.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/activities.js ***!
  \****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _by_square = _interopRequireDefault(__webpack_require__(/*! ./activities/by_square */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activities/by_square.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/activities` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.activities\n * ```\n *\n * @param {Client} client\n */\nvar Activities = /*#__PURE__*/function () {\n  function Activities(client) {\n    _classCallCheck(this, Activities);\n    this.client = client;\n    this.bySquare = new _by_square[\"default\"](client);\n  }\n\n  /**\n   * /shopping/activities\n   *\n   * @param {Object} params\n   * @param {Double} params.latitude latitude location to be at the center of\n   *   the search circle - required\n   * @param {Double} params.longitude longitude location to be at the center of\n   *   the search circle - required\n   * @param {Double} params.radius radius of the search in Kilometer - optional\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * What are the best tours and activities in Barcelona? (based a geo location and a radius)\n   *\n   * ```js\n   * amadeus.shopping.activities.get({\n   *   longitude: 2.160873,\n   *   latitude: 41.397158\n   * });\n   * ```\n   */\n  return _createClass(Activities, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/shopping/activities', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Activities;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYnlfc3F1YXJlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJyIiwidCIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiU3RyaW5nIiwiTnVtYmVyIiwiQWN0aXZpdGllcyIsImNsaWVudCIsImJ5U3F1YXJlIiwiQnlTcXVhcmUiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL2FjdGl2aXRpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJ5U3F1YXJlIGZyb20gJy4vYWN0aXZpdGllcy9ieV9zcXVhcmUnO1xuXG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9zaG9wcGluZy9hY3Rpdml0aWVzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuc2hvcHBpbmcuYWN0aXZpdGllc1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBBY3Rpdml0aWVzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5ieVNxdWFyZSA9IG5ldyBCeVNxdWFyZShjbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIC9zaG9wcGluZy9hY3Rpdml0aWVzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtEb3VibGV9IHBhcmFtcy5sYXRpdHVkZSBsYXRpdHVkZSBsb2NhdGlvbiB0byBiZSBhdCB0aGUgY2VudGVyIG9mXG4gICAqICAgdGhlIHNlYXJjaCBjaXJjbGUgLSByZXF1aXJlZFxuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmxvbmdpdHVkZSBsb25naXR1ZGUgbG9jYXRpb24gdG8gYmUgYXQgdGhlIGNlbnRlciBvZlxuICAgKiAgIHRoZSBzZWFyY2ggY2lyY2xlIC0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtEb3VibGV9IHBhcmFtcy5yYWRpdXMgcmFkaXVzIG9mIHRoZSBzZWFyY2ggaW4gS2lsb21ldGVyIC0gb3B0aW9uYWxcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBXaGF0IGFyZSB0aGUgYmVzdCB0b3VycyBhbmQgYWN0aXZpdGllcyBpbiBCYXJjZWxvbmE/IChiYXNlZCBhIGdlbyBsb2NhdGlvbiBhbmQgYSByYWRpdXMpXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuc2hvcHBpbmcuYWN0aXZpdGllcy5nZXQoe1xuICAgKiAgIGxvbmdpdHVkZTogMi4xNjA4NzMsXG4gICAqICAgbGF0aXR1ZGU6IDQxLjM5NzE1OFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBnZXQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KCcvdjEvc2hvcHBpbmcvYWN0aXZpdGllcycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWN0aXZpdGllcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsVUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQThDLFNBQUFELHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxRQUFBQyxDQUFBLHNDQUFBRCxPQUFBLHdCQUFBRSxNQUFBLHVCQUFBQSxNQUFBLENBQUFDLFFBQUEsYUFBQUYsQ0FBQSxrQkFBQUEsQ0FBQSxnQkFBQUEsQ0FBQSxXQUFBQSxDQUFBLHlCQUFBQyxNQUFBLElBQUFELENBQUEsQ0FBQUcsV0FBQSxLQUFBRixNQUFBLElBQUFELENBQUEsS0FBQUMsTUFBQSxDQUFBRyxTQUFBLHFCQUFBSixDQUFBLEtBQUFELE9BQUEsQ0FBQUMsQ0FBQTtBQUFBLFNBQUFLLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFDLFNBQUE7QUFBQSxTQUFBQyxrQkFBQVosQ0FBQSxFQUFBYSxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBWCxDQUFBLEdBQUFVLENBQUEsQ0FBQUMsQ0FBQSxHQUFBWCxDQUFBLENBQUFhLFVBQUEsR0FBQWIsQ0FBQSxDQUFBYSxVQUFBLFFBQUFiLENBQUEsQ0FBQWMsWUFBQSxrQkFBQWQsQ0FBQSxLQUFBQSxDQUFBLENBQUFlLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFwQixDQUFBLEVBQUFxQixjQUFBLENBQUFsQixDQUFBLENBQUFtQixHQUFBLEdBQUFuQixDQUFBO0FBQUEsU0FBQW9CLGFBQUF2QixDQUFBLEVBQUFhLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLElBQUFELGlCQUFBLENBQUFaLENBQUEsQ0FBQU8sU0FBQSxFQUFBTSxDQUFBLEdBQUFDLENBQUEsSUFBQUYsaUJBQUEsQ0FBQVosQ0FBQSxFQUFBYyxDQUFBLEdBQUFLLE1BQUEsQ0FBQUMsY0FBQSxDQUFBcEIsQ0FBQSxpQkFBQWtCLFFBQUEsU0FBQWxCLENBQUE7QUFBQSxTQUFBcUIsZUFBQVAsQ0FBQSxRQUFBVSxDQUFBLEdBQUFDLFlBQUEsQ0FBQVgsQ0FBQSxnQ0FBQVosT0FBQSxDQUFBc0IsQ0FBQSxJQUFBQSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBQyxhQUFBWCxDQUFBLEVBQUFELENBQUEsb0JBQUFYLE9BQUEsQ0FBQVksQ0FBQSxNQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQWQsQ0FBQSxHQUFBYyxDQUFBLENBQUFWLE1BQUEsQ0FBQXNCLFdBQUEsa0JBQUExQixDQUFBLFFBQUF3QixDQUFBLEdBQUF4QixDQUFBLENBQUEyQixJQUFBLENBQUFiLENBQUEsRUFBQUQsQ0FBQSxnQ0FBQVgsT0FBQSxDQUFBc0IsQ0FBQSxVQUFBQSxDQUFBLFlBQUFiLFNBQUEseUVBQUFFLENBQUEsR0FBQWUsTUFBQSxHQUFBQyxNQUFBLEVBQUFmLENBQUE7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNZ0IsVUFBVTtFQUNkLFNBQUFBLFdBQVlDLE1BQU0sRUFBRTtJQUFBdkIsZUFBQSxPQUFBc0IsVUFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJQyxxQkFBUSxDQUFDRixNQUFNLENBQUM7RUFDdEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQW5CRSxPQUFBUixZQUFBLENBQUFPLFVBQUE7SUFBQVIsR0FBQTtJQUFBWSxLQUFBLEVBb0JBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQXRCLE1BQUEsUUFBQXNCLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNOLE1BQU0sQ0FBQ0ksR0FBRyxDQUFDLHlCQUF5QixFQUFFQyxNQUFNLENBQUM7SUFDM0Q7RUFBQztBQUFBO0FBQUEsSUFBQUcsUUFBQSxHQUFBQyxPQUFBLGNBR1lWLFVBQVU7QUFBQVcsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activities/by_square.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/activities/by_square.js ***!
  \**************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/activities/by-square` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.activities.bySquare;\n * ```\n *\n * @param {Client} client\n */\nvar bySquare = /*#__PURE__*/function () {\n  function bySquare(client) {\n    _classCallCheck(this, bySquare);\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of tours and activities a given area.\n   *\n   * @param {Object} params\n   * @param {Double} params.north latitude north of bounding box - required\n   * @param {Double} params.west  longitude west of bounding box - required\n   * @param {Double} params.south latitude south of bounding box - required\n   * @param {Double} params.east  longitude east of bounding box - required\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find relevant tours and activities within an area in Barcelona\n   *\n   * ```js\n   * amadeus.shopping.activities.bySquare.get({\n   *   north: 41.397158,\n   *   west: 2.160873,\n   *   south: 41.394582,\n   *   east: 2.177181\n   * });\n   * ```\n   */\n  return _createClass(bySquare, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/shopping/activities/by-square', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = bySquare;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJieVNxdWFyZSIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvYWN0aXZpdGllcy9ieV9zcXVhcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvYWN0aXZpdGllcy9ieS1zcXVhcmVgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5hY3Rpdml0aWVzLmJ5U3F1YXJlO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBieVNxdWFyZSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIHRvdXJzIGFuZCBhY3Rpdml0aWVzIGEgZ2l2ZW4gYXJlYS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLm5vcnRoIGxhdGl0dWRlIG5vcnRoIG9mIGJvdW5kaW5nIGJveCAtIHJlcXVpcmVkXG4gICAqIEBwYXJhbSB7RG91YmxlfSBwYXJhbXMud2VzdCAgbG9uZ2l0dWRlIHdlc3Qgb2YgYm91bmRpbmcgYm94IC0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtEb3VibGV9IHBhcmFtcy5zb3V0aCBsYXRpdHVkZSBzb3V0aCBvZiBib3VuZGluZyBib3ggLSByZXF1aXJlZFxuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmVhc3QgIGxvbmdpdHVkZSBlYXN0IG9mIGJvdW5kaW5nIGJveCAtIHJlcXVpcmVkXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogRmluZCByZWxldmFudCB0b3VycyBhbmQgYWN0aXZpdGllcyB3aXRoaW4gYW4gYXJlYSBpbiBCYXJjZWxvbmFcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zaG9wcGluZy5hY3Rpdml0aWVzLmJ5U3F1YXJlLmdldCh7XG4gICAqICAgbm9ydGg6IDQxLjM5NzE1OCxcbiAgICogICB3ZXN0OiAyLjE2MDg3MyxcbiAgICogICBzb3V0aDogNDEuMzk0NTgyLFxuICAgKiAgIGVhc3Q6IDIuMTc3MTgxXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9zaG9wcGluZy9hY3Rpdml0aWVzL2J5LXNxdWFyZScsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYnlTcXVhcmU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsUUFBUTtFQUNaLFNBQUFBLFNBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFFBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBcEJFLE9BQUFFLFlBQUEsQ0FBQUgsUUFBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFxQkEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLG1DQUFtQyxFQUFFQyxNQUFNLENBQUM7SUFDckU7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLFFBQVE7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activities/by_square.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activity.js":
/*!**************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/activity.js ***!
  \**************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/activities/{activityId}` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.activity\n * ```\n *\n * @param {Client} client\n */\nvar Activity = /*#__PURE__*/function () {\n  function Activity(client, activityId) {\n    _classCallCheck(this, Activity);\n    this.client = client;\n    this.activityId = activityId;\n  }\n\n  /**\n   * Retieve information of an activity by its Id.\n   *\n   * What is the activity information with Id 3216547684?\n   * ```js\n   * amadeus.shopping.activity('3216547684').get();\n   * ```\n   */\n  return _createClass(Activity, [{\n    key: \"get\",\n    value: function get() {\n      return this.client.get(\"/v1/shopping/activities/\".concat(this.activityId));\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Activity;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBY3Rpdml0eSIsImNsaWVudCIsImFjdGl2aXR5SWQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsImNvbmNhdCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL2FjdGl2aXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3Nob3BwaW5nL2FjdGl2aXRpZXMve2FjdGl2aXR5SWR9YCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuc2hvcHBpbmcuYWN0aXZpdHlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgQWN0aXZpdHkge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGFjdGl2aXR5SWQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmFjdGl2aXR5SWQgPSBhY3Rpdml0eUlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldGlldmUgaW5mb3JtYXRpb24gb2YgYW4gYWN0aXZpdHkgYnkgaXRzIElkLlxuICAgKlxuICAgKiBXaGF0IGlzIHRoZSBhY3Rpdml0eSBpbmZvcm1hdGlvbiB3aXRoIElkIDMyMTY1NDc2ODQ/XG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuc2hvcHBpbmcuYWN0aXZpdHkoJzMyMTY1NDc2ODQnKS5nZXQoKTtcbiAgICogYGBgXG4gICAqL1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChgL3YxL3Nob3BwaW5nL2FjdGl2aXRpZXMvJHt0aGlzLmFjdGl2aXR5SWR9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWN0aXZpdHk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsUUFBUTtFQUNaLFNBQUFBLFNBQVlDLE1BQU0sRUFBRUMsVUFBVSxFQUFFO0lBQUFDLGVBQUEsT0FBQUgsUUFBQTtJQUM5QixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTtFQUM5Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBUEUsT0FBQUUsWUFBQSxDQUFBSixRQUFBO0lBQUFLLEdBQUE7SUFBQUMsS0FBQSxFQVFBLFNBQUFDLElBQUEsRUFBTTtNQUNKLE9BQU8sSUFBSSxDQUFDTixNQUFNLENBQUNNLEdBQUcsNEJBQUFDLE1BQUEsQ0FBNEIsSUFBSSxDQUFDTixVQUFVLENBQUUsQ0FBQztJQUN0RTtFQUFDO0FBQUE7QUFBQSxJQUFBTyxRQUFBLEdBQUFDLE9BQUEsY0FHWVYsUUFBUTtBQUFBVyxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL2FjdGl2aXR5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBLDZCQUE2QixXQUFXO0FBQ3hDO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxlQUFlLGtCQUFrQjtBQUNqQztBQUNBLDJDQUEyQyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdHJhdmVsLWFnZW5jeS8uL25vZGVfbW9kdWxlcy9hbWFkZXVzL2xpYi9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvYWN0aXZpdHkuanM/N2Q2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvYWN0aXZpdGllcy97YWN0aXZpdHlJZH1gIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5hY3Rpdml0eVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG52YXIgQWN0aXZpdHkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBY3Rpdml0eShjbGllbnQsIGFjdGl2aXR5SWQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWN0aXZpdHkpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuYWN0aXZpdHlJZCA9IGFjdGl2aXR5SWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0aWV2ZSBpbmZvcm1hdGlvbiBvZiBhbiBhY3Rpdml0eSBieSBpdHMgSWQuXG4gICAqXG4gICAqIFdoYXQgaXMgdGhlIGFjdGl2aXR5IGluZm9ybWF0aW9uIHdpdGggSWQgMzIxNjU0NzY4ND9cbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zaG9wcGluZy5hY3Rpdml0eSgnMzIxNjU0NzY4NCcpLmdldCgpO1xuICAgKiBgYGBcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQWN0aXZpdHksIFt7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KFwiL3YxL3Nob3BwaW5nL2FjdGl2aXRpZXMvXCIuY29uY2F0KHRoaXMuYWN0aXZpdHlJZCkpO1xuICAgIH1cbiAgfV0pO1xufSgpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBBY3Rpdml0eTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpCWTNScGRtbDBlU0lzSW1Oc2FXVnVkQ0lzSW1GamRHbDJhWFI1U1dRaUxDSmZZMnhoYzNORFlXeHNRMmhsWTJzaUxDSmZZM0psWVhSbFEyeGhjM01pTENKclpYa2lMQ0oyWVd4MVpTSXNJbWRsZENJc0ltTnZibU5oZENJc0lsOWtaV1poZFd4MElpd2laWGh3YjNKMGN5SXNJbTF2WkhWc1pTSXNJbVJsWm1GMWJIUWlYU3dpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOXpjbU12WVcxaFpHVjFjeTl1WVcxbGMzQmhZMlZ6TDNOb2IzQndhVzVuTDJGamRHbDJhWFI1TG1weklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRU0J1WVcxbGMzQmhZMlZrSUdOc2FXVnVkQ0JtYjNJZ2RHaGxYRzRnS2lCZ0wzWXhMM05vYjNCd2FXNW5MMkZqZEdsMmFYUnBaWE12ZTJGamRHbDJhWFI1U1dSOVlDQmxibVJ3YjJsdWRITmNiaUFxWEc0Z0tpQkJZMk5sYzNNZ2RtbGhJSFJvWlNCN1FHeHBibXNnUVcxaFpHVjFjMzBnYjJKcVpXTjBYRzRnS2x4dUlDb2dZR0JnYW5OY2JpQXFJR3hsZENCaGJXRmtaWFZ6SUQwZ2JtVjNJRUZ0WVdSbGRYTW9LVHRjYmlBcUlHRnRZV1JsZFhNdWMyaHZjSEJwYm1jdVlXTjBhWFpwZEhsY2JpQXFJR0JnWUZ4dUlDcGNiaUFxSUVCd1lYSmhiU0I3UTJ4cFpXNTBmU0JqYkdsbGJuUmNiaUFxTDF4dVkyeGhjM01nUVdOMGFYWnBkSGtnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhqYkdsbGJuUXNJR0ZqZEdsMmFYUjVTV1FwSUh0Y2JpQWdJQ0IwYUdsekxtTnNhV1Z1ZENBOUlHTnNhV1Z1ZER0Y2JpQWdJQ0IwYUdsekxtRmpkR2wyYVhSNVNXUWdQU0JoWTNScGRtbDBlVWxrTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkR2xsZG1VZ2FXNW1iM0p0WVhScGIyNGdiMllnWVc0Z1lXTjBhWFpwZEhrZ1lua2dhWFJ6SUVsa0xseHVJQ0FnS2x4dUlDQWdLaUJYYUdGMElHbHpJSFJvWlNCaFkzUnBkbWwwZVNCcGJtWnZjbTFoZEdsdmJpQjNhWFJvSUVsa0lETXlNVFkxTkRjMk9EUS9YRzRnSUNBcUlHQmdZR3B6WEc0Z0lDQXFJR0Z0WVdSbGRYTXVjMmh2Y0hCcGJtY3VZV04wYVhacGRIa29Kek15TVRZMU5EYzJPRFFuS1M1blpYUW9LVHRjYmlBZ0lDb2dZR0JnWEc0Z0lDQXFMMXh1SUNCblpYUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTJ4cFpXNTBMbWRsZENoZ0wzWXhMM05vYjNCd2FXNW5MMkZqZEdsMmFYUnBaWE12Skh0MGFHbHpMbUZqZEdsMmFYUjVTV1I5WUNrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1FXTjBhWFpwZEhrN1hHNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096dEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCV2tFc1NVRmhUVUVzVVVGQlVUdEZRVU5hTEZOQlFVRkJMRk5CUVZsRExFMUJRVTBzUlVGQlJVTXNWVUZCVlN4RlFVRkZPMGxCUVVGRExHVkJRVUVzVDBGQlFVZ3NVVUZCUVR0SlFVTTVRaXhKUVVGSkxFTkJRVU5ETEUxQlFVMHNSMEZCUjBFc1RVRkJUVHRKUVVOd1FpeEpRVUZKTEVOQlFVTkRMRlZCUVZVc1IwRkJSMEVzVlVGQlZUdEZRVU01UWpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCVUVVc1QwRkJRVVVzV1VGQlFTeERRVUZCU2l4UlFVRkJPMGxCUVVGTExFZEJRVUU3U1VGQlFVTXNTMEZCUVN4RlFWRkJMRk5CUVVGRExFbEJRVUVzUlVGQlRUdE5RVU5LTEU5QlFVOHNTVUZCU1N4RFFVRkRUaXhOUVVGTkxFTkJRVU5OTEVkQlFVY3NORUpCUVVGRExFMUJRVUVzUTBGQk5FSXNTVUZCU1N4RFFVRkRUaXhWUVVGVkxFTkJRVVVzUTBGQlF6dEpRVU4wUlR0RlFVRkRPMEZCUVVFN1FVRkJRU3hKUVVGQlR5eFJRVUZCTEVkQlFVRkRMRTlCUVVFc1kwRkhXVllzVVVGQlVUdEJRVUZCVnl4TlFVRkJMRU5CUVVGRUxFOUJRVUVzUjBGQlFVRXNUMEZCUVN4RFFVRkJSU3hQUVVGQklpd2lhV2R1YjNKbFRHbHpkQ0k2VzExOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/activity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/availability.js":
/*!******************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/availability.js ***!
  \******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _flight_availabilities = _interopRequireDefault(__webpack_require__(/*! ./availability/flight_availabilities */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/availability/flight_availabilities.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/shopping/availability` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.availability;\n * ```\n *\n * @param {Client} client\n * @property {Availability} availability\n * @protected\n */\nvar Availability = /*#__PURE__*/_createClass(function Availability(client) {\n  _classCallCheck(this, Availability);\n  this.client = client;\n  this.flightAvailabilities = new _flight_availabilities[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Availability;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxpZ2h0X2F2YWlsYWJpbGl0aWVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJBdmFpbGFiaWxpdHkiLCJjbGllbnQiLCJmbGlnaHRBdmFpbGFiaWxpdGllcyIsIkZsaWdodEF2YWlsYWJpbGl0aWVzIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvYXZhaWxhYmlsaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGbGlnaHRBdmFpbGFiaWxpdGllcyBmcm9tICcuL2F2YWlsYWJpbGl0eS9mbGlnaHRfYXZhaWxhYmlsaXRpZXMnO1xuXG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9zaG9wcGluZy9hdmFpbGFiaWxpdHlgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5hdmFpbGFiaWxpdHk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge0F2YWlsYWJpbGl0eX0gYXZhaWxhYmlsaXR5XG4gKiBAcHJvdGVjdGVkXG4gKi9cbmNsYXNzIEF2YWlsYWJpbGl0eSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuZmxpZ2h0QXZhaWxhYmlsaXRpZXMgPSBuZXcgRmxpZ2h0QXZhaWxhYmlsaXRpZXMoY2xpZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBdmFpbGFiaWxpdHk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxzQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQXdFLFNBQUFELHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxrQkFBQUYsQ0FBQSxFQUFBRyxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxDQUFBLEdBQUFILENBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxDQUFBQyxVQUFBLFFBQUFELENBQUEsQ0FBQUUsWUFBQSxrQkFBQUYsQ0FBQSxLQUFBQSxDQUFBLENBQUFHLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsRUFBQVksY0FBQSxDQUFBTixDQUFBLENBQUFPLEdBQUEsR0FBQVAsQ0FBQTtBQUFBLFNBQUFRLGFBQUFkLENBQUEsRUFBQUcsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQUYsQ0FBQSxDQUFBZSxTQUFBLEVBQUFaLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBRixDQUFBLEVBQUFJLENBQUEsR0FBQU0sTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsaUJBQUFTLFFBQUEsU0FBQVQsQ0FBQTtBQUFBLFNBQUFZLGVBQUFSLENBQUEsUUFBQVksQ0FBQSxHQUFBQyxZQUFBLENBQUFiLENBQUEsZ0NBQUFjLE9BQUEsQ0FBQUYsQ0FBQSxJQUFBQSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBQyxhQUFBYixDQUFBLEVBQUFELENBQUEsb0JBQUFlLE9BQUEsQ0FBQWQsQ0FBQSxNQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUosQ0FBQSxHQUFBSSxDQUFBLENBQUFlLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQXBCLENBQUEsUUFBQWdCLENBQUEsR0FBQWhCLENBQUEsQ0FBQXFCLElBQUEsQ0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxnQ0FBQWUsT0FBQSxDQUFBRixDQUFBLFVBQUFBLENBQUEsWUFBQU0sU0FBQSx5RUFBQW5CLENBQUEsR0FBQW9CLE1BQUEsR0FBQUMsTUFBQSxFQUFBcEIsQ0FBQTtBQUFBLFNBQUFxQixnQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFVBQUFELENBQUEsWUFBQUMsQ0FBQSxhQUFBTCxTQUFBO0FBRXhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWRBLElBZU1NLFlBQVksZ0JBQUFkLFlBQUEsQ0FDaEIsU0FBQWMsYUFBWUMsTUFBTSxFQUFFO0VBQUFKLGVBQUEsT0FBQUcsWUFBQTtFQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUNwQixJQUFJLENBQUNDLG9CQUFvQixHQUFHLElBQUlDLGlDQUFvQixDQUFDRixNQUFNLENBQUM7QUFDOUQsQ0FBQztBQUFBLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxjQUdZTCxZQUFZO0FBQUFNLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/availability.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/availability/flight_availabilities.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/availability/flight_availabilities.js ***!
  \****************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/availability/flight-availabilities` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.availability.flightAvailabilities;\n * ```\n *\n * @param {Client} client\n */\nvar FlightAvailabilities = /*#__PURE__*/function () {\n  function FlightAvailabilities(client) {\n    _classCallCheck(this, FlightAvailabilities);\n    this.client = client;\n  }\n\n  /**\n   * Get available seats in different fare classes\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * ```js\n   * amadeus.shopping.availability.flightAvailabilities.post(body);\n   * ```\n   */\n  return _createClass(FlightAvailabilities, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v1/shopping/availability/flight-availabilities', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = FlightAvailabilities;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHRBdmFpbGFiaWxpdGllcyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwicG9zdCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL2F2YWlsYWJpbGl0eS9mbGlnaHRfYXZhaWxhYmlsaXRpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvYXZhaWxhYmlsaXR5L2ZsaWdodC1hdmFpbGFiaWxpdGllc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLmF2YWlsYWJpbGl0eS5mbGlnaHRBdmFpbGFiaWxpdGllcztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgRmxpZ2h0QXZhaWxhYmlsaXRpZXMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYXZhaWxhYmxlIHNlYXRzIGluIGRpZmZlcmVudCBmYXJlIGNsYXNzZXNcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuc2hvcHBpbmcuYXZhaWxhYmlsaXR5LmZsaWdodEF2YWlsYWJpbGl0aWVzLnBvc3QoYm9keSk7XG4gICAqIGBgYFxuICAgKi9cbiAgcG9zdChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KCcvdjEvc2hvcHBpbmcvYXZhaWxhYmlsaXR5L2ZsaWdodC1hdmFpbGFiaWxpdGllcycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmxpZ2h0QXZhaWxhYmlsaXRpZXM7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLG9CQUFvQjtFQUN4QixTQUFBQSxxQkFBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsb0JBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFURSxPQUFBRSxZQUFBLENBQUFILG9CQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQVVBLFNBQUFDLEtBQUEsRUFBa0I7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNkLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLElBQUksQ0FBQyxpREFBaUQsRUFBRUMsTUFBTSxDQUFDO0lBQ3BGO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixvQkFBb0I7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL2F2YWlsYWJpbGl0eS9mbGlnaHRfYXZhaWxhYmlsaXRpZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3UTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixlQUFlO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsa0NBQWtDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsMkNBQTJDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10cmF2ZWwtYWdlbmN5Ly4vbm9kZV9tb2R1bGVzL2FtYWRldXMvbGliL2FtYWRldXMvbmFtZXNwYWNlcy9zaG9wcGluZy9hdmFpbGFiaWxpdHkvZmxpZ2h0X2F2YWlsYWJpbGl0aWVzLmpzP2MxMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3Nob3BwaW5nL2F2YWlsYWJpbGl0eS9mbGlnaHQtYXZhaWxhYmlsaXRpZXNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5hdmFpbGFiaWxpdHkuZmxpZ2h0QXZhaWxhYmlsaXRpZXM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbnZhciBGbGlnaHRBdmFpbGFiaWxpdGllcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZsaWdodEF2YWlsYWJpbGl0aWVzKGNsaWVudCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbGlnaHRBdmFpbGFiaWxpdGllcyk7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGF2YWlsYWJsZSBzZWF0cyBpbiBkaWZmZXJlbnQgZmFyZSBjbGFzc2VzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnNob3BwaW5nLmF2YWlsYWJpbGl0eS5mbGlnaHRBdmFpbGFiaWxpdGllcy5wb3N0KGJvZHkpO1xuICAgKiBgYGBcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRmxpZ2h0QXZhaWxhYmlsaXRpZXMsIFt7XG4gICAga2V5OiBcInBvc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zdCgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoJy92MS9zaG9wcGluZy9hdmFpbGFiaWxpdHkvZmxpZ2h0LWF2YWlsYWJpbGl0aWVzJywgcGFyYW1zKTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRmxpZ2h0QXZhaWxhYmlsaXRpZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKR2JHbG5hSFJCZG1GcGJHRmlhV3hwZEdsbGN5SXNJbU5zYVdWdWRDSXNJbDlqYkdGemMwTmhiR3hEYUdWamF5SXNJbDlqY21WaGRHVkRiR0Z6Y3lJc0ltdGxlU0lzSW5aaGJIVmxJaXdpY0c5emRDSXNJbkJoY21GdGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW5WdVpHVm1hVzVsWkNJc0lsOWtaV1poZFd4MElpd2laWGh3YjNKMGN5SXNJbTF2WkhWc1pTSXNJbVJsWm1GMWJIUWlYU3dpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOHVMaTl6Y21NdllXMWhaR1YxY3k5dVlXMWxjM0JoWTJWekwzTm9iM0J3YVc1bkwyRjJZV2xzWVdKcGJHbDBlUzltYkdsbmFIUmZZWFpoYVd4aFltbHNhWFJwWlhNdWFuTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJCSUc1aGJXVnpjR0ZqWldRZ1kyeHBaVzUwSUdadmNpQjBhR1ZjYmlBcUlHQXZkakV2YzJodmNIQnBibWN2WVhaaGFXeGhZbWxzYVhSNUwyWnNhV2RvZEMxaGRtRnBiR0ZpYVd4cGRHbGxjMkFnWlc1a2NHOXBiblJ6WEc0Z0tseHVJQ29nUVdOalpYTnpJSFpwWVNCMGFHVWdlMEJzYVc1cklFRnRZV1JsZFhOOUlHOWlhbVZqZEZ4dUlDcGNiaUFxSUdCZ1lHcHpYRzRnS2lCc1pYUWdZVzFoWkdWMWN5QTlJRzVsZHlCQmJXRmtaWFZ6S0NrN1hHNGdLaUJoYldGa1pYVnpMbUYyWVdsc1lXSnBiR2wwZVM1bWJHbG5hSFJCZG1GcGJHRmlhV3hwZEdsbGN6dGNiaUFxSUdCZ1lGeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1EyeHBaVzUwZlNCamJHbGxiblJjYmlBcUwxeHVZMnhoYzNNZ1JteHBaMmgwUVhaaGFXeGhZbWxzYVhScFpYTWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaGpiR2xsYm5RcElIdGNiaUFnSUNCMGFHbHpMbU5zYVdWdWRDQTlJR05zYVdWdWREdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1lYWmhhV3hoWW14bElITmxZWFJ6SUdsdUlHUnBabVpsY21WdWRDQm1ZWEpsSUdOc1lYTnpaWE5jYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhCaGNtRnRjMXh1SUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObExqeFNaWE53YjI1elpTeFNaWE53YjI1elpVVnljbTl5UG4wZ1lTQlFjbTl0YVhObFhHNGdJQ0FxWEc0Z0lDQXFJR0JnWUdwelhHNGdJQ0FxSUdGdFlXUmxkWE11YzJodmNIQnBibWN1WVhaaGFXeGhZbWxzYVhSNUxtWnNhV2RvZEVGMllXbHNZV0pwYkdsMGFXVnpMbkJ2YzNRb1ltOWtlU2s3WEc0Z0lDQXFJR0JnWUZ4dUlDQWdLaTljYmlBZ2NHOXpkQ2h3WVhKaGJYTWdQU0I3ZlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNhV1Z1ZEM1d2IzTjBLQ2N2ZGpFdmMyaHZjSEJwYm1jdllYWmhhV3hoWW1sc2FYUjVMMlpzYVdkb2RDMWhkbUZwYkdGaWFXeHBkR2xsY3ljc0lIQmhjbUZ0Y3lrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1JteHBaMmgwUVhaaGFXeGhZbWxzYVhScFpYTTdJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVZwQkxFbEJZVTFCTEc5Q1FVRnZRanRGUVVONFFpeFRRVUZCUVN4eFFrRkJXVU1zVFVGQlRTeEZRVUZGTzBsQlFVRkRMR1ZCUVVFc1QwRkJRVVlzYjBKQlFVRTdTVUZEYkVJc1NVRkJTU3hEUVVGRFF5eE5RVUZOTEVkQlFVZEJMRTFCUVUwN1JVRkRkRUk3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZVUlN4UFFVRkJSU3haUVVGQkxFTkJRVUZJTEc5Q1FVRkJPMGxCUVVGSkxFZEJRVUU3U1VGQlFVTXNTMEZCUVN4RlFWVkJMRk5CUVVGRExFdEJRVUVzUlVGQmEwSTdUVUZCUVN4SlFVRmlReXhOUVVGTkxFZEJRVUZETEZOQlFVRXNRMEZCUVVNc1RVRkJRU3hSUVVGQlJDeFRRVUZCTEZGQlFVRkZMRk5CUVVFc1IwRkJRVVlzVTBGQlFTeE5RVUZITEVOQlFVTXNRMEZCUXp0TlFVTmtMRTlCUVU4c1NVRkJTU3hEUVVGRFVDeE5RVUZOTEVOQlFVTkxMRWxCUVVrc1EwRkJReXhwUkVGQmFVUXNSVUZCUlVNc1RVRkJUU3hEUVVGRE8wbEJRM0JHTzBWQlFVTTdRVUZCUVR0QlFVRkJMRWxCUVVGSkxGRkJRVUVzUjBGQlFVTXNUMEZCUVN4alFVZFpXaXh2UWtGQmIwSTdRVUZCUVdFc1RVRkJRU3hEUVVGQlJDeFBRVUZCTEVkQlFVRkJMRTlCUVVFc1EwRkJRVVVzVDBGQlFTSXNJbWxuYm05eVpVeHBjM1FpT2x0ZGZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/availability/flight_availabilities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_dates.js":
/*!******************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_dates.js ***!
  \******************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/flight-dates` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.flightDates;\n * ```\n *\n * @param {Client} client\n */\nvar FlightDates = /*#__PURE__*/function () {\n  function FlightDates(client) {\n    _classCallCheck(this, FlightDates);\n    this.client = client;\n  }\n\n  /**\n   * Find the cheapest flight dates from an origin to a destination.\n   *\n   * @param {Object} params\n   * @param {string} params.origin City/Airport IATA code from which the flight\n   *   will depart. BOS, for example.\n   * @param {string} params.destination City/Airport IATA code to which the\n   *   traveler is going. PAR, for example\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find the cheapest flight dates from New-York to Madrid\n   *\n   * ```js\n   * amadeus.shopping.flightDates.get({\n   *   origin: 'NYC',\n   *   destination: 'MAD'\n   * });\n   * ```\n   */\n  return _createClass(FlightDates, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/shopping/flight-dates', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = FlightDates;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHREYXRlcyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvZmxpZ2h0X2RhdGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3Nob3BwaW5nL2ZsaWdodC1kYXRlc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnNob3BwaW5nLmZsaWdodERhdGVzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBGbGlnaHREYXRlcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgdGhlIGNoZWFwZXN0IGZsaWdodCBkYXRlcyBmcm9tIGFuIG9yaWdpbiB0byBhIGRlc3RpbmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMub3JpZ2luIENpdHkvQWlycG9ydCBJQVRBIGNvZGUgZnJvbSB3aGljaCB0aGUgZmxpZ2h0XG4gICAqICAgd2lsbCBkZXBhcnQuIEJPUywgZm9yIGV4YW1wbGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGVzdGluYXRpb24gQ2l0eS9BaXJwb3J0IElBVEEgY29kZSB0byB3aGljaCB0aGVcbiAgICogICB0cmF2ZWxlciBpcyBnb2luZy4gUEFSLCBmb3IgZXhhbXBsZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIEZpbmQgdGhlIGNoZWFwZXN0IGZsaWdodCBkYXRlcyBmcm9tIE5ldy1Zb3JrIHRvIE1hZHJpZFxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnNob3BwaW5nLmZsaWdodERhdGVzLmdldCh7XG4gICAqICAgb3JpZ2luOiAnTllDJyxcbiAgICogICBkZXN0aW5hdGlvbjogJ01BRCdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3Nob3BwaW5nL2ZsaWdodC1kYXRlcycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmxpZ2h0RGF0ZXM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsV0FBVztFQUNmLFNBQUFBLFlBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFdBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFsQkUsT0FBQUUsWUFBQSxDQUFBSCxXQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQW1CQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsMkJBQTJCLEVBQUVDLE1BQU0sQ0FBQztJQUM3RDtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosV0FBVztBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_dates.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_destinations.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_destinations.js ***!
  \*************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/flight-destinations` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.flightDestinations;\n * ```\n *\n * @param {Client} client\n */\nvar FlightDestinations = /*#__PURE__*/function () {\n  function FlightDestinations(client) {\n    _classCallCheck(this, FlightDestinations);\n    this.client = client;\n  }\n\n  /**\n   * Find the cheapest destinations where you can fly to.\n   *\n   * @param {Object} params\n   * @param {string} params.origin City/Airport IATA code from which the flight\n   *   will depart. BOS, for example.\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find the cheapest destination from Madrid\n   *\n   * ```js\n   * amadeus.shopping.flightDestinations.get({\n   *   origin: 'MAD'\n   * });\n   * ```\n   */\n  return _createClass(FlightDestinations, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/shopping/flight-destinations', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = FlightDestinations;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHREZXN0aW5hdGlvbnMiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL2ZsaWdodF9kZXN0aW5hdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvZmxpZ2h0LWRlc3RpbmF0aW9uc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnNob3BwaW5nLmZsaWdodERlc3RpbmF0aW9ucztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgRmxpZ2h0RGVzdGluYXRpb25zIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCB0aGUgY2hlYXBlc3QgZGVzdGluYXRpb25zIHdoZXJlIHlvdSBjYW4gZmx5IHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMub3JpZ2luIENpdHkvQWlycG9ydCBJQVRBIGNvZGUgZnJvbSB3aGljaCB0aGUgZmxpZ2h0XG4gICAqICAgd2lsbCBkZXBhcnQuIEJPUywgZm9yIGV4YW1wbGUuXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogRmluZCB0aGUgY2hlYXBlc3QgZGVzdGluYXRpb24gZnJvbSBNYWRyaWRcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zaG9wcGluZy5mbGlnaHREZXN0aW5hdGlvbnMuZ2V0KHtcbiAgICogICBvcmlnaW46ICdNQUQnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9zaG9wcGluZy9mbGlnaHQtZGVzdGluYXRpb25zJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbGlnaHREZXN0aW5hdGlvbnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsa0JBQWtCO0VBQ3RCLFNBQUFBLG1CQUFZQyxNQUFNLEVBQUU7SUFBQUMsZUFBQSxPQUFBRixrQkFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQWZFLE9BQUFFLFlBQUEsQ0FBQUgsa0JBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBZ0JBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxrQ0FBa0MsRUFBRUMsTUFBTSxDQUFDO0lBQ3BFO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixrQkFBa0I7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_destinations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _flight_choice_prediction = _interopRequireDefault(__webpack_require__(/*! ./flight_offers/flight_choice_prediction.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/flight_choice_prediction.js\"));\nvar _pricing = _interopRequireDefault(__webpack_require__(/*! ./flight_offers/pricing.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/pricing.js\"));\nvar _upselling = _interopRequireDefault(__webpack_require__(/*! ./flight_offers/upselling.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/upselling.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/shopping/flight-offers` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.flightOffers;\n * ```\n *\n * @param {Client} client\n */\nvar FlightOffers = /*#__PURE__*/_createClass(function FlightOffers(client) {\n  _classCallCheck(this, FlightOffers);\n  this.client = client;\n  this.prediction = new _flight_choice_prediction[\"default\"](client);\n  this.pricing = new _pricing[\"default\"](client);\n  this.upselling = new _upselling[\"default\"](client);\n});\nvar _default = exports[\"default\"] = FlightOffers;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxpZ2h0X2Nob2ljZV9wcmVkaWN0aW9uIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcHJpY2luZyIsIl91cHNlbGxpbmciLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJGbGlnaHRPZmZlcnMiLCJjbGllbnQiLCJwcmVkaWN0aW9uIiwiRmxpZ2h0Q2hvaWNlUHJlZGljdGlvbiIsInByaWNpbmciLCJQcmljaW5nIiwidXBzZWxsaW5nIiwiVXBzZWxsaW5nIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvZmxpZ2h0X29mZmVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRmxpZ2h0Q2hvaWNlUHJlZGljdGlvbiBmcm9tICcuL2ZsaWdodF9vZmZlcnMvZmxpZ2h0X2Nob2ljZV9wcmVkaWN0aW9uLmpzJztcbmltcG9ydCBQcmljaW5nIGZyb20gJy4vZmxpZ2h0X29mZmVycy9wcmljaW5nLmpzJztcbmltcG9ydCBVcHNlbGxpbmcgZnJvbSAnLi9mbGlnaHRfb2ZmZXJzL3Vwc2VsbGluZy5qcyc7XG5cbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3Nob3BwaW5nL2ZsaWdodC1vZmZlcnNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5mbGlnaHRPZmZlcnM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIEZsaWdodE9mZmVycyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMucHJlZGljdGlvbiA9IG5ldyBGbGlnaHRDaG9pY2VQcmVkaWN0aW9uKGNsaWVudCk7XG4gICAgdGhpcy5wcmljaW5nID0gbmV3IFByaWNpbmcoY2xpZW50KTtcbiAgICB0aGlzLnVwc2VsbGluZyA9IG5ldyBVcHNlbGxpbmcoY2xpZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbGlnaHRPZmZlcnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSx5QkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXFELFNBQUFELHVCQUFBSSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxrQkFBQUYsQ0FBQSxFQUFBRyxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxDQUFBLEdBQUFILENBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxDQUFBQyxVQUFBLFFBQUFELENBQUEsQ0FBQUUsWUFBQSxrQkFBQUYsQ0FBQSxLQUFBQSxDQUFBLENBQUFHLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsRUFBQVksY0FBQSxDQUFBTixDQUFBLENBQUFPLEdBQUEsR0FBQVAsQ0FBQTtBQUFBLFNBQUFRLGFBQUFkLENBQUEsRUFBQUcsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQUYsQ0FBQSxDQUFBZSxTQUFBLEVBQUFaLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBRixDQUFBLEVBQUFJLENBQUEsR0FBQU0sTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsaUJBQUFTLFFBQUEsU0FBQVQsQ0FBQTtBQUFBLFNBQUFZLGVBQUFSLENBQUEsUUFBQVksQ0FBQSxHQUFBQyxZQUFBLENBQUFiLENBQUEsZ0NBQUFjLE9BQUEsQ0FBQUYsQ0FBQSxJQUFBQSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBQyxhQUFBYixDQUFBLEVBQUFELENBQUEsb0JBQUFlLE9BQUEsQ0FBQWQsQ0FBQSxNQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUosQ0FBQSxHQUFBSSxDQUFBLENBQUFlLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQXBCLENBQUEsUUFBQWdCLENBQUEsR0FBQWhCLENBQUEsQ0FBQXFCLElBQUEsQ0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxnQ0FBQWUsT0FBQSxDQUFBRixDQUFBLFVBQUFBLENBQUEsWUFBQU0sU0FBQSx5RUFBQW5CLENBQUEsR0FBQW9CLE1BQUEsR0FBQUMsTUFBQSxFQUFBcEIsQ0FBQTtBQUFBLFNBQUFxQixnQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFVBQUFELENBQUEsWUFBQUMsQ0FBQSxhQUFBTCxTQUFBO0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTU0sWUFBWSxnQkFBQWQsWUFBQSxDQUNoQixTQUFBYyxhQUFZQyxNQUFNLEVBQUU7RUFBQUosZUFBQSxPQUFBRyxZQUFBO0VBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3BCLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUlDLG9DQUFzQixDQUFDRixNQUFNLENBQUM7RUFDcEQsSUFBSSxDQUFDRyxPQUFPLEdBQUcsSUFBSUMsbUJBQU8sQ0FBQ0osTUFBTSxDQUFDO0VBQ2xDLElBQUksQ0FBQ0ssU0FBUyxHQUFHLElBQUlDLHFCQUFTLENBQUNOLE1BQU0sQ0FBQztBQUN4QyxDQUFDO0FBQUEsSUFBQU8sUUFBQSxHQUFBQyxPQUFBLGNBR1lULFlBQVk7QUFBQVUsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/flight_choice_prediction.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/flight_choice_prediction.js ***!
  \********************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/flight-offers/prediction` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.flightOffers.prediction;\n * ```\n *\n * @param {Client} client\n */\nvar FlightChoicePrediction = /*#__PURE__*/function () {\n  function FlightChoicePrediction(client) {\n    _classCallCheck(this, FlightChoicePrediction);\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of flight offers with the probability to be chosen.\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Returns flights from NYC to MAD with the probability to be chosen.\n   *\n   * ```js\n   * amadeus.shopping.flightOffersSearch.get({\n   *     originLocationCode: 'SYD',\n   *     destinationLocationCode: 'BKK',\n   *     departureDate: '2020-08-01',\n   *     adults: '2'\n   * }).then(function(response){\n   *     return amadeus.shopping.flightOffers.prediction.post(\n   *       JSON.stringify(response)\n   *     );\n   * }).then(function(response){\n   *     console.log(response.data);\n   * }).catch(function(responseError){\n   *     console.log(responseError);\n   * });\n   * ```\n   */\n  return _createClass(FlightChoicePrediction, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v2/shopping/flight-offers/prediction', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = FlightChoicePrediction;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHRDaG9pY2VQcmVkaWN0aW9uIiwiY2xpZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJwb3N0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvZmxpZ2h0X29mZmVycy9mbGlnaHRfY2hvaWNlX3ByZWRpY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvZmxpZ2h0LW9mZmVycy9wcmVkaWN0aW9uYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzLnByZWRpY3Rpb247XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIEZsaWdodENob2ljZVByZWRpY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBmbGlnaHQgb2ZmZXJzIHdpdGggdGhlIHByb2JhYmlsaXR5IHRvIGJlIGNob3Nlbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIFJldHVybnMgZmxpZ2h0cyBmcm9tIE5ZQyB0byBNQUQgd2l0aCB0aGUgcHJvYmFiaWxpdHkgdG8gYmUgY2hvc2VuLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnNob3BwaW5nLmZsaWdodE9mZmVyc1NlYXJjaC5nZXQoe1xuICAgKiAgICAgb3JpZ2luTG9jYXRpb25Db2RlOiAnU1lEJyxcbiAgICogICAgIGRlc3RpbmF0aW9uTG9jYXRpb25Db2RlOiAnQktLJyxcbiAgICogICAgIGRlcGFydHVyZURhdGU6ICcyMDIwLTA4LTAxJyxcbiAgICogICAgIGFkdWx0czogJzInXG4gICAqIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgKiAgICAgcmV0dXJuIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzLnByZWRpY3Rpb24ucG9zdChcbiAgICogICAgICAgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpXG4gICAqICAgICApO1xuICAgKiB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICogICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xuICAgKiB9KS5jYXRjaChmdW5jdGlvbihyZXNwb25zZUVycm9yKXtcbiAgICogICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlRXJyb3IpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBwb3N0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoJy92Mi9zaG9wcGluZy9mbGlnaHQtb2ZmZXJzL3ByZWRpY3Rpb24nLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZsaWdodENob2ljZVByZWRpY3Rpb247XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsc0JBQXNCO0VBQzFCLFNBQUFBLHVCQUFZQyxNQUFNLEVBQUU7SUFBQUMsZUFBQSxPQUFBRixzQkFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQXhCRSxPQUFBRSxZQUFBLENBQUFILHNCQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQXlCQSxTQUFBQyxLQUFBLEVBQWtCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDZCxPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxJQUFJLENBQUMsdUNBQXVDLEVBQUVDLE1BQU0sQ0FBQztJQUMxRTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosc0JBQXNCO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/flight_choice_prediction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/pricing.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/pricing.js ***!
  \***************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/flight-offers/pricing` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.flightOffers.pricing;\n * ```\n *\n * @param {Client} client\n */\nvar Pricing = /*#__PURE__*/function () {\n  function Pricing(client) {\n    _classCallCheck(this, Pricing);\n    this.client = client;\n  }\n\n  /**\n   * To get or confirm the price of a flight and obtain information\n   * about taxes and fees to be applied to the entire journey. It also\n   * retrieves ancillary information (e.g. additional bag or extra legroom\n   * seats pricing) and the payment information details requested at booking time.\n   *\n   * @param {Object} params\n   * @param {Object} params.data\n   * @param {string} params.data.type 'flight-offers-pricing' for Flight Offer Pricing\n   * @param {Array} params.data.flightOffers list of flight offers for which the\n   * pricing needs to be retrieved\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * ```js\n   * amadeus.shopping.flightOffers.pricing.post({\n   *  'data': {\n   *      'type': 'flight-offers-pricing',\n   *      'flightOffers': []\n   *  }\n   * });\n   * ```\n   */\n  return _createClass(Pricing, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var additionalParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Convert additionalParams object to query string\n      var queryString = Object.keys(additionalParams).map(function (key) {\n        return key + '=' + additionalParams[key];\n      }).join('&');\n\n      // Check if queryString is empty before appending it to the URL\n      var url = '/v1/shopping/flight-offers/pricing';\n      if (queryString !== '') {\n        url += '?' + queryString;\n      }\n      return this.client.post(url, params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Pricing;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmljaW5nIiwiY2xpZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJwb3N0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYWRkaXRpb25hbFBhcmFtcyIsInF1ZXJ5U3RyaW5nIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImpvaW4iLCJ1cmwiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9zaG9wcGluZy9mbGlnaHRfb2ZmZXJzL3ByaWNpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvZmxpZ2h0LW9mZmVycy9wcmljaW5nYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzLnByaWNpbmc7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIFByaWNpbmcge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBnZXQgb3IgY29uZmlybSB0aGUgcHJpY2Ugb2YgYSBmbGlnaHQgYW5kIG9idGFpbiBpbmZvcm1hdGlvblxuICAgKiBhYm91dCB0YXhlcyBhbmQgZmVlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBlbnRpcmUgam91cm5leS4gSXQgYWxzb1xuICAgKiByZXRyaWV2ZXMgYW5jaWxsYXJ5IGluZm9ybWF0aW9uIChlLmcuIGFkZGl0aW9uYWwgYmFnIG9yIGV4dHJhIGxlZ3Jvb21cbiAgICogc2VhdHMgcHJpY2luZykgYW5kIHRoZSBwYXltZW50IGluZm9ybWF0aW9uIGRldGFpbHMgcmVxdWVzdGVkIGF0IGJvb2tpbmcgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zLmRhdGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5kYXRhLnR5cGUgJ2ZsaWdodC1vZmZlcnMtcHJpY2luZycgZm9yIEZsaWdodCBPZmZlciBQcmljaW5nXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcy5kYXRhLmZsaWdodE9mZmVycyBsaXN0IG9mIGZsaWdodCBvZmZlcnMgZm9yIHdoaWNoIHRoZVxuICAgKiBwcmljaW5nIG5lZWRzIHRvIGJlIHJldHJpZXZlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzLnByaWNpbmcucG9zdCh7XG4gICAqICAnZGF0YSc6IHtcbiAgICogICAgICAndHlwZSc6ICdmbGlnaHQtb2ZmZXJzLXByaWNpbmcnLFxuICAgKiAgICAgICdmbGlnaHRPZmZlcnMnOiBbXVxuICAgKiAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBwb3N0KHBhcmFtcyA9IHt9LCBhZGRpdGlvbmFsUGFyYW1zID0ge30pIHtcbiAgICAvLyBDb252ZXJ0IGFkZGl0aW9uYWxQYXJhbXMgb2JqZWN0IHRvIHF1ZXJ5IHN0cmluZ1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gT2JqZWN0LmtleXMoYWRkaXRpb25hbFBhcmFtcykubWFwKGtleSA9PiBrZXkgKyAnPScgKyBhZGRpdGlvbmFsUGFyYW1zW2tleV0pLmpvaW4oJyYnKTtcblxuICAgIC8vIENoZWNrIGlmIHF1ZXJ5U3RyaW5nIGlzIGVtcHR5IGJlZm9yZSBhcHBlbmRpbmcgaXQgdG8gdGhlIFVSTFxuICAgIGxldCB1cmwgPSAnL3YxL3Nob3BwaW5nL2ZsaWdodC1vZmZlcnMvcHJpY2luZyc7XG4gICAgaWYgKHF1ZXJ5U3RyaW5nICE9PSAnJykge1xuICAgICAgdXJsICs9ICc/JyArIHF1ZXJ5U3RyaW5nO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KHVybCwgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmljaW5nOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxPQUFPO0VBQ1gsU0FBQUEsUUFBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsT0FBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQXJCRSxPQUFBRSxZQUFBLENBQUFILE9BQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBc0JBLFNBQUFDLEtBQUEsRUFBeUM7TUFBQSxJQUFwQ0MsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFBQSxJQUFFRyxnQkFBZ0IsR0FBQUgsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ3JDO01BQ0EsSUFBTUksV0FBVyxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQ0gsZ0JBQWdCLENBQUMsQ0FBQ0ksR0FBRyxDQUFDLFVBQUFYLEdBQUc7UUFBQSxPQUFJQSxHQUFHLEdBQUcsR0FBRyxHQUFHTyxnQkFBZ0IsQ0FBQ1AsR0FBRyxDQUFDO01BQUEsRUFBQyxDQUFDWSxJQUFJLENBQUMsR0FBRyxDQUFDOztNQUV6RztNQUNBLElBQUlDLEdBQUcsR0FBRyxvQ0FBb0M7TUFDOUMsSUFBSUwsV0FBVyxLQUFLLEVBQUUsRUFBRTtRQUN0QkssR0FBRyxJQUFJLEdBQUcsR0FBR0wsV0FBVztNQUMxQjtNQUVBLE9BQU8sSUFBSSxDQUFDWCxNQUFNLENBQUNLLElBQUksQ0FBQ1csR0FBRyxFQUFFVixNQUFNLENBQUM7SUFDdEM7RUFBQztBQUFBO0FBQUEsSUFBQVcsUUFBQSxHQUFBQyxPQUFBLGNBR1luQixPQUFPO0FBQUFvQixNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/pricing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/upselling.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/upselling.js ***!
  \*****************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/flight-offers/upselling` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.flightOffers.upselling;\n * ```\n *\n * @param {Client} client\n */\nvar Upselling = /*#__PURE__*/function () {\n  function Upselling(client) {\n    _classCallCheck(this, Upselling);\n    this.client = client;\n  }\n\n  /**\n   * Get available seats in different fare classes\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * ```js\n   * amadeus.shopping.flightOffers.upselling.post(body);\n   * ```\n   */\n  return _createClass(Upselling, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v1/shopping/flight-offers/upselling', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Upselling;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVcHNlbGxpbmciLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsInBvc3QiLCJwYXJhbXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9zaG9wcGluZy9mbGlnaHRfb2ZmZXJzL3Vwc2VsbGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9zaG9wcGluZy9mbGlnaHQtb2ZmZXJzL3Vwc2VsbGluZ2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnNob3BwaW5nLmZsaWdodE9mZmVycy51cHNlbGxpbmc7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIFVwc2VsbGluZyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhdmFpbGFibGUgc2VhdHMgaW4gZGlmZmVyZW50IGZhcmUgY2xhc3Nlc1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zaG9wcGluZy5mbGlnaHRPZmZlcnMudXBzZWxsaW5nLnBvc3QoYm9keSk7XG4gICAqIGBgYFxuICAgKi9cbiAgcG9zdChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KCcvdjEvc2hvcHBpbmcvZmxpZ2h0LW9mZmVycy91cHNlbGxpbmcnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVwc2VsbGluZzsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsU0FBUztFQUNiLFNBQUFBLFVBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFNBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFURSxPQUFBRSxZQUFBLENBQUFILFNBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBVUEsU0FBQUMsS0FBQSxFQUFrQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2QsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLHNDQUFzQyxFQUFFQyxNQUFNLENBQUM7SUFDekU7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLFNBQVM7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL2ZsaWdodF9vZmZlcnMvdXBzZWxsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLGtDQUFrQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxlQUFlLGtCQUFrQjtBQUNqQztBQUNBLDJDQUEyQyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdHJhdmVsLWFnZW5jeS8uL25vZGVfbW9kdWxlcy9hbWFkZXVzL2xpYi9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvZmxpZ2h0X29mZmVycy91cHNlbGxpbmcuanM/NmYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvZmxpZ2h0LW9mZmVycy91cHNlbGxpbmdgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5mbGlnaHRPZmZlcnMudXBzZWxsaW5nO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG52YXIgVXBzZWxsaW5nID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVXBzZWxsaW5nKGNsaWVudCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVcHNlbGxpbmcpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhdmFpbGFibGUgc2VhdHMgaW4gZGlmZmVyZW50IGZhcmUgY2xhc3Nlc1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zaG9wcGluZy5mbGlnaHRPZmZlcnMudXBzZWxsaW5nLnBvc3QoYm9keSk7XG4gICAqIGBgYFxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhVcHNlbGxpbmcsIFt7XG4gICAga2V5OiBcInBvc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zdCgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoJy92MS9zaG9wcGluZy9mbGlnaHQtb2ZmZXJzL3Vwc2VsbGluZycsIHBhcmFtcyk7XG4gICAgfVxuICB9XSk7XG59KCk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IFVwc2VsbGluZztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpWY0hObGJHeHBibWNpTENKamJHbGxiblFpTENKZlkyeGhjM05EWVd4c1EyaGxZMnNpTENKZlkzSmxZWFJsUTJ4aGMzTWlMQ0pyWlhraUxDSjJZV3gxWlNJc0luQnZjM1FpTENKd1lYSmhiWE1pTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaUxDSjFibVJsWm1sdVpXUWlMQ0pmWkdWbVlYVnNkQ0lzSW1WNGNHOXlkSE1pTENKdGIyUjFiR1VpTENKa1pXWmhkV3gwSWwwc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZMaTR2TGk0dmMzSmpMMkZ0WVdSbGRYTXZibUZ0WlhOd1lXTmxjeTl6YUc5d2NHbHVaeTltYkdsbmFIUmZiMlptWlhKekwzVndjMlZzYkdsdVp5NXFjeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVFZ2JtRnRaWE53WVdObFpDQmpiR2xsYm5RZ1ptOXlJSFJvWlZ4dUlDb2dZQzkyTVM5emFHOXdjR2x1Wnk5bWJHbG5hSFF0YjJabVpYSnpMM1Z3YzJWc2JHbHVaMkFnWlc1a2NHOXBiblJ6WEc0Z0tseHVJQ29nUVdOalpYTnpJSFpwWVNCMGFHVWdlMEJzYVc1cklFRnRZV1JsZFhOOUlHOWlhbVZqZEZ4dUlDcGNiaUFxSUdCZ1lHcHpYRzRnS2lCc1pYUWdZVzFoWkdWMWN5QTlJRzVsZHlCQmJXRmtaWFZ6S0NrN1hHNGdLaUJoYldGa1pYVnpMbk5vYjNCd2FXNW5MbVpzYVdkb2RFOW1abVZ5Y3k1MWNITmxiR3hwYm1jN1hHNGdLaUJnWUdCY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBOc2FXVnVkSDBnWTJ4cFpXNTBYRzRnS2k5Y2JtTnNZWE56SUZWd2MyVnNiR2x1WnlCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0dOc2FXVnVkQ2tnZTF4dUlDQWdJSFJvYVhNdVkyeHBaVzUwSUQwZ1kyeHBaVzUwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0JoZG1GcGJHRmliR1VnYzJWaGRITWdhVzRnWkdsbVptVnlaVzUwSUdaaGNtVWdZMnhoYzNObGMxeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjR0Z5WVcxelhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlV1UEZKbGMzQnZibk5sTEZKbGMzQnZibk5sUlhKeWIzSStmU0JoSUZCeWIyMXBjMlZjYmlBZ0lDcGNiaUFnSUNvZ1lHQmdhbk5jYmlBZ0lDb2dZVzFoWkdWMWN5NXphRzl3Y0dsdVp5NW1iR2xuYUhSUFptWmxjbk11ZFhCelpXeHNhVzVuTG5CdmMzUW9ZbTlrZVNrN1hHNGdJQ0FxSUdCZ1lGeHVJQ0FnS2k5Y2JpQWdjRzl6ZENod1lYSmhiWE1nUFNCN2ZTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5zYVdWdWRDNXdiM04wS0NjdmRqRXZjMmh2Y0hCcGJtY3ZabXhwWjJoMExXOW1abVZ5Y3k5MWNITmxiR3hwYm1jbkxDQndZWEpoYlhNcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGVndjMlZzYkdsdVp6c2lYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096dEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCV2tFc1NVRmhUVUVzVTBGQlV6dEZRVU5pTEZOQlFVRkJMRlZCUVZsRExFMUJRVTBzUlVGQlJUdEpRVUZCUXl4bFFVRkJMRTlCUVVGR0xGTkJRVUU3U1VGRGJFSXNTVUZCU1N4RFFVRkRReXhOUVVGTkxFZEJRVWRCTEUxQlFVMDdSVUZEZEVJN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGVVJTeFBRVUZCUlN4WlFVRkJMRU5CUVVGSUxGTkJRVUU3U1VGQlFVa3NSMEZCUVR0SlFVRkJReXhMUVVGQkxFVkJWVUVzVTBGQlFVTXNTMEZCUVN4RlFVRnJRanROUVVGQkxFbEJRV0pETEUxQlFVMHNSMEZCUVVNc1UwRkJRU3hEUVVGQlF5eE5RVUZCTEZGQlFVRkVMRk5CUVVFc1VVRkJRVVVzVTBGQlFTeEhRVUZCUml4VFFVRkJMRTFCUVVjc1EwRkJReXhEUVVGRE8wMUJRMlFzVDBGQlR5eEpRVUZKTEVOQlFVTlFMRTFCUVUwc1EwRkJRMHNzU1VGQlNTeERRVUZETEhORFFVRnpReXhGUVVGRlF5eE5RVUZOTEVOQlFVTTdTVUZEZWtVN1JVRkJRenRCUVVGQk8wRkJRVUVzU1VGQlFVa3NVVUZCUVN4SFFVRkJReXhQUVVGQkxHTkJSMWxhTEZOQlFWTTdRVUZCUVdFc1RVRkJRU3hEUVVGQlJDeFBRVUZCTEVkQlFVRkJMRTlCUVVFc1EwRkJRVVVzVDBGQlFTSXNJbWxuYm05eVpVeHBjM1FpT2x0ZGZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers/upselling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers_search.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers_search.js ***!
  \**************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v2/shopping/flight-offers` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.flightOffersSeach;\n * ```\n *\n * @param {Client} client\n */\nvar FlightOffersSearch = /*#__PURE__*/function () {\n  function FlightOffersSearch(client) {\n    _classCallCheck(this, FlightOffersSearch);\n    this.client = client;\n  }\n\n  /**\n   * Get cheapest flight recommendations and prices on a given journey.\n   *\n   * @param {Object} params\n   * @param {string} params.originLocationCode city/airport IATA code from which the traveler will depart, e.g. BOS for Boston\n   * @param {string} params.destinationLocationCode city/airport IATA code to which the traveler is going, e.g. PAR for Paris\n   * @param {string} params.departureDate the date on which the traveler will depart\n   * from the origin to go to the destination. Dates are specified in the ISO 8601 YYYY-MM-DD format, e.g. 2017-12-25\n   * @param {string} params.adults the number of adult travelers (age 12 or older on date of departure)\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Get cheapest flight recommendations and prices for SYD-BKK on 2020-08-01 for 2 adults\n   *\n   * ```js\n   * amadeus.shopping.flightOffers.get({\n   *    originLocationCode: 'SYD',\n   *    destinationLocationCode: 'BKK',\n   *    departureDate: '2020-08-01',\n   *    adults: '2'\n   * });\n   * ```\n   */\n  return _createClass(FlightOffersSearch, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v2/shopping/flight-offers', params);\n    }\n\n    /**\n     * To do a customized search with every option available.\n     *\n     * @param {Object} params\n     * @param {Double} params.getFlightOffersBody list of criteria to retrieve a list of flight offers\n     * @return {Promise.<Response,ResponseError>} a Promise\n     *\n     * To do a customized search with given options.\n     *\n     * ```js\n     * amadeus.shopping.flightOffersSearch.post (JSON.stringify({\n          \"currencyCode\": \"USD\",\n          \"originDestinations\": [\n            {\n              \"id\": \"1\",\n              \"originLocationCode\": \"RIO\",\n              \"destinationLocationCode\": \"MAD\",\n              \"departureDateTimeRange\": {\n                \"date\": \"2020-03-01\",\n                \"time\": \"10:00:00\"\n              }\n            },\n            {\n              \"id\": \"2\",\n              \"originLocationCode\": \"MAD\",\n              \"destinationLocationCode\": \"RIO\",\n              \"departureDateTimeRange\": {\n                \"date\": \"2020-03-05\",\n                \"time\": \"17:00:00\"\n              }\n            }\n          ],\n          \"travelers\": [\n            {\n              \"id\": \"1\",\n              \"travelerType\": \"ADULT\",\n              \"fareOptions\": [\n                \"STANDARD\"\n              ]\n            },\n            {\n              \"id\": \"2\",\n              \"travelerType\": \"CHILD\",\n              \"fareOptions\": [\n                \"STANDARD\"\n              ]\n            }\n          ],\n          \"sources\": [\n            \"GDS\"\n          ],\n          \"searchCriteria\": {\n            \"maxFlightOffers\": 50,\n            \"flightFilters\": {\n              \"cabinRestrictions\": [\n                {\n                  \"cabin\": \"BUSINESS\",\n                  \"coverage\": \"MOST_SEGMENTS\",\n                  \"originDestinationIds\": [\n                    \"1\"\n                  ]\n                }\n              ],\n              \"carrierRestrictions\": {\n                \"excludedCarrierCodes\": [\n                  \"AA\",\n                  \"TP\",\n                  \"AZ\"\n                ]\n              }\n            }\n          }\n        }))\n      * ```\n      */\n  }, {\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v2/shopping/flight-offers', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = FlightOffersSearch;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHRPZmZlcnNTZWFyY2giLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInBvc3QiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy9zaG9wcGluZy9mbGlnaHRfb2ZmZXJzX3NlYXJjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92Mi9zaG9wcGluZy9mbGlnaHQtb2ZmZXJzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzU2VhY2g7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbmNsYXNzIEZsaWdodE9mZmVyc1NlYXJjaCB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjaGVhcGVzdCBmbGlnaHQgcmVjb21tZW5kYXRpb25zIGFuZCBwcmljZXMgb24gYSBnaXZlbiBqb3VybmV5LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMub3JpZ2luTG9jYXRpb25Db2RlIGNpdHkvYWlycG9ydCBJQVRBIGNvZGUgZnJvbSB3aGljaCB0aGUgdHJhdmVsZXIgd2lsbCBkZXBhcnQsIGUuZy4gQk9TIGZvciBCb3N0b25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5kZXN0aW5hdGlvbkxvY2F0aW9uQ29kZSBjaXR5L2FpcnBvcnQgSUFUQSBjb2RlIHRvIHdoaWNoIHRoZSB0cmF2ZWxlciBpcyBnb2luZywgZS5nLiBQQVIgZm9yIFBhcmlzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGVwYXJ0dXJlRGF0ZSB0aGUgZGF0ZSBvbiB3aGljaCB0aGUgdHJhdmVsZXIgd2lsbCBkZXBhcnRcbiAgICogZnJvbSB0aGUgb3JpZ2luIHRvIGdvIHRvIHRoZSBkZXN0aW5hdGlvbi4gRGF0ZXMgYXJlIHNwZWNpZmllZCBpbiB0aGUgSVNPIDg2MDEgWVlZWS1NTS1ERCBmb3JtYXQsIGUuZy4gMjAxNy0xMi0yNVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmFkdWx0cyB0aGUgbnVtYmVyIG9mIGFkdWx0IHRyYXZlbGVycyAoYWdlIDEyIG9yIG9sZGVyIG9uIGRhdGUgb2YgZGVwYXJ0dXJlKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIEdldCBjaGVhcGVzdCBmbGlnaHQgcmVjb21tZW5kYXRpb25zIGFuZCBwcmljZXMgZm9yIFNZRC1CS0sgb24gMjAyMC0wOC0wMSBmb3IgMiBhZHVsdHNcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zaG9wcGluZy5mbGlnaHRPZmZlcnMuZ2V0KHtcbiAgICogICAgb3JpZ2luTG9jYXRpb25Db2RlOiAnU1lEJyxcbiAgICogICAgZGVzdGluYXRpb25Mb2NhdGlvbkNvZGU6ICdCS0snLFxuICAgKiAgICBkZXBhcnR1cmVEYXRlOiAnMjAyMC0wOC0wMScsXG4gICAqICAgIGFkdWx0czogJzInXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92Mi9zaG9wcGluZy9mbGlnaHQtb2ZmZXJzJywgcGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBkbyBhIGN1c3RvbWl6ZWQgc2VhcmNoIHdpdGggZXZlcnkgb3B0aW9uIGF2YWlsYWJsZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge0RvdWJsZX0gcGFyYW1zLmdldEZsaWdodE9mZmVyc0JvZHkgbGlzdCBvZiBjcml0ZXJpYSB0byByZXRyaWV2ZSBhIGxpc3Qgb2YgZmxpZ2h0IG9mZmVyc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIFRvIGRvIGEgY3VzdG9taXplZCBzZWFyY2ggd2l0aCBnaXZlbiBvcHRpb25zLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnNob3BwaW5nLmZsaWdodE9mZmVyc1NlYXJjaC5wb3N0IChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIFwiY3VycmVuY3lDb2RlXCI6IFwiVVNEXCIsXG4gICAgICAgIFwib3JpZ2luRGVzdGluYXRpb25zXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImlkXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJvcmlnaW5Mb2NhdGlvbkNvZGVcIjogXCJSSU9cIixcbiAgICAgICAgICAgIFwiZGVzdGluYXRpb25Mb2NhdGlvbkNvZGVcIjogXCJNQURcIixcbiAgICAgICAgICAgIFwiZGVwYXJ0dXJlRGF0ZVRpbWVSYW5nZVwiOiB7XG4gICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjIwMjAtMDMtMDFcIixcbiAgICAgICAgICAgICAgXCJ0aW1lXCI6IFwiMTA6MDA6MDBcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJpZFwiOiBcIjJcIixcbiAgICAgICAgICAgIFwib3JpZ2luTG9jYXRpb25Db2RlXCI6IFwiTUFEXCIsXG4gICAgICAgICAgICBcImRlc3RpbmF0aW9uTG9jYXRpb25Db2RlXCI6IFwiUklPXCIsXG4gICAgICAgICAgICBcImRlcGFydHVyZURhdGVUaW1lUmFuZ2VcIjoge1xuICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDIwLTAzLTA1XCIsXG4gICAgICAgICAgICAgIFwidGltZVwiOiBcIjE3OjAwOjAwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwidHJhdmVsZXJzXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImlkXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ0cmF2ZWxlclR5cGVcIjogXCJBRFVMVFwiLFxuICAgICAgICAgICAgXCJmYXJlT3B0aW9uc1wiOiBbXG4gICAgICAgICAgICAgIFwiU1RBTkRBUkRcIlxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJpZFwiOiBcIjJcIixcbiAgICAgICAgICAgIFwidHJhdmVsZXJUeXBlXCI6IFwiQ0hJTERcIixcbiAgICAgICAgICAgIFwiZmFyZU9wdGlvbnNcIjogW1xuICAgICAgICAgICAgICBcIlNUQU5EQVJEXCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwic291cmNlc1wiOiBbXG4gICAgICAgICAgXCJHRFNcIlxuICAgICAgICBdLFxuICAgICAgICBcInNlYXJjaENyaXRlcmlhXCI6IHtcbiAgICAgICAgICBcIm1heEZsaWdodE9mZmVyc1wiOiA1MCxcbiAgICAgICAgICBcImZsaWdodEZpbHRlcnNcIjoge1xuICAgICAgICAgICAgXCJjYWJpblJlc3RyaWN0aW9uc1wiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNhYmluXCI6IFwiQlVTSU5FU1NcIixcbiAgICAgICAgICAgICAgICBcImNvdmVyYWdlXCI6IFwiTU9TVF9TRUdNRU5UU1wiLFxuICAgICAgICAgICAgICAgIFwib3JpZ2luRGVzdGluYXRpb25JZHNcIjogW1xuICAgICAgICAgICAgICAgICAgXCIxXCJcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNhcnJpZXJSZXN0cmljdGlvbnNcIjoge1xuICAgICAgICAgICAgICBcImV4Y2x1ZGVkQ2FycmllckNvZGVzXCI6IFtcbiAgICAgICAgICAgICAgICBcIkFBXCIsXG4gICAgICAgICAgICAgICAgXCJUUFwiLFxuICAgICAgICAgICAgICAgIFwiQVpcIlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSlcbiAgICAqIGBgYFxuICAgICovXG4gIHBvc3QocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdCgnL3YyL3Nob3BwaW5nL2ZsaWdodC1vZmZlcnMnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZsaWdodE9mZmVyc1NlYXJjaDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxrQkFBa0I7RUFDdEIsU0FBQUEsbUJBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLGtCQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBckJFLE9BQUFFLFlBQUEsQ0FBQUgsa0JBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBc0JBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRUMsTUFBTSxDQUFDO0lBQzlEOztJQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQTFFRTtJQUFBSCxHQUFBO0lBQUFDLEtBQUEsRUEyRUEsU0FBQU0sS0FBQSxFQUFrQjtNQUFBLElBQWJKLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2QsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ1UsSUFBSSxDQUFDLDRCQUE0QixFQUFFSixNQUFNLENBQUM7SUFDL0Q7RUFBQztBQUFBO0FBQUEsSUFBQUssUUFBQSxHQUFBQyxPQUFBLGNBR1liLGtCQUFrQjtBQUFBYyxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/flight_offers_search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/hotel_offer_search.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/hotel_offer_search.js ***!
  \************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v3/shopping/hotel-offers/:offer_id` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.hotelOfferSearch('XXX');\n * ```\n *\n * @param {Client} client\n * @property {number} offerId\n */\nvar HotelOfferSearch = /*#__PURE__*/function () {\n  function HotelOfferSearch(client, offerId) {\n    _classCallCheck(this, HotelOfferSearch);\n    this.client = client;\n    this.offerId = offerId;\n  }\n\n  /**\n   * Returns details for a specific offer\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Find details for the offer with ID 'XXX'\n   *\n   * ```js\n   *  amadeus.shopping.hotelOfferSearch('XXX').get();\n   * ```\n   */\n  return _createClass(HotelOfferSearch, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get(\"/v3/shopping/hotel-offers/\".concat(this.offerId), params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = HotelOfferSearch;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIb3RlbE9mZmVyU2VhcmNoIiwiY2xpZW50Iiwib2ZmZXJJZCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiY29uY2F0IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvaG90ZWxfb2ZmZXJfc2VhcmNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YzL3Nob3BwaW5nL2hvdGVsLW9mZmVycy86b2ZmZXJfaWRgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5ob3RlbE9mZmVyU2VhcmNoKCdYWFgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBvZmZlcklkXG4gKi9cbmNsYXNzIEhvdGVsT2ZmZXJTZWFyY2gge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG9mZmVySWQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLm9mZmVySWQgPSBvZmZlcklkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZGV0YWlscyBmb3IgYSBzcGVjaWZpYyBvZmZlclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogRmluZCBkZXRhaWxzIGZvciB0aGUgb2ZmZXIgd2l0aCBJRCAnWFhYJ1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgYW1hZGV1cy5zaG9wcGluZy5ob3RlbE9mZmVyU2VhcmNoKCdYWFgnKS5nZXQoKTtcbiAgICogYGBgXG4gICAqL1xuICBnZXQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KFxuICAgICAgYC92My9zaG9wcGluZy9ob3RlbC1vZmZlcnMvJHt0aGlzLm9mZmVySWR9YCwgcGFyYW1zXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb3RlbE9mZmVyU2VhcmNoOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWJBLElBY01BLGdCQUFnQjtFQUNwQixTQUFBQSxpQkFBWUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7SUFBQUMsZUFBQSxPQUFBSCxnQkFBQTtJQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTztFQUN4Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFYRSxPQUFBRSxZQUFBLENBQUFKLGdCQUFBO0lBQUFLLEdBQUE7SUFBQUMsS0FBQSxFQVlBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUixNQUFNLENBQUNNLEdBQUcsOEJBQUFLLE1BQUEsQ0FDUyxJQUFJLENBQUNWLE9BQU8sR0FBSU0sTUFDL0MsQ0FBQztJQUNIO0VBQUM7QUFBQTtBQUFBLElBQUFLLFFBQUEsR0FBQUMsT0FBQSxjQUdZZCxnQkFBZ0I7QUFBQWUsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL2hvdGVsX29mZmVyX3NlYXJjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxrQ0FBa0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsMkNBQTJDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10cmF2ZWwtYWdlbmN5Ly4vbm9kZV9tb2R1bGVzL2FtYWRldXMvbGliL2FtYWRldXMvbmFtZXNwYWNlcy9zaG9wcGluZy9ob3RlbF9vZmZlcl9zZWFyY2guanM/M2Q5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjMvc2hvcHBpbmcvaG90ZWwtb2ZmZXJzLzpvZmZlcl9pZGAgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnNob3BwaW5nLmhvdGVsT2ZmZXJTZWFyY2goJ1hYWCcpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQHByb3BlcnR5IHtudW1iZXJ9IG9mZmVySWRcbiAqL1xudmFyIEhvdGVsT2ZmZXJTZWFyY2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBIb3RlbE9mZmVyU2VhcmNoKGNsaWVudCwgb2ZmZXJJZCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb3RlbE9mZmVyU2VhcmNoKTtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLm9mZmVySWQgPSBvZmZlcklkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZGV0YWlscyBmb3IgYSBzcGVjaWZpYyBvZmZlclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogRmluZCBkZXRhaWxzIGZvciB0aGUgb2ZmZXIgd2l0aCBJRCAnWFhYJ1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgYW1hZGV1cy5zaG9wcGluZy5ob3RlbE9mZmVyU2VhcmNoKCdYWFgnKS5nZXQoKTtcbiAgICogYGBgXG4gICAqL1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKEhvdGVsT2ZmZXJTZWFyY2gsIFt7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoXCIvdjMvc2hvcHBpbmcvaG90ZWwtb2ZmZXJzL1wiLmNvbmNhdCh0aGlzLm9mZmVySWQpLCBwYXJhbXMpO1xuICAgIH1cbiAgfV0pO1xufSgpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBIb3RlbE9mZmVyU2VhcmNoO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SkliM1JsYkU5bVptVnlVMlZoY21Ob0lpd2lZMnhwWlc1MElpd2liMlptWlhKSlpDSXNJbDlqYkdGemMwTmhiR3hEYUdWamF5SXNJbDlqY21WaGRHVkRiR0Z6Y3lJc0ltdGxlU0lzSW5aaGJIVmxJaXdpWjJWMElpd2ljR0Z5WVcxeklpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpZFc1a1pXWnBibVZrSWl3aVkyOXVZMkYwSWl3aVgyUmxabUYxYkhRaUxDSmxlSEJ2Y25Seklpd2liVzlrZFd4bElpd2laR1ZtWVhWc2RDSmRMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwzTnlZeTloYldGa1pYVnpMMjVoYldWemNHRmpaWE12YzJodmNIQnBibWN2YUc5MFpXeGZiMlptWlhKZmMyVmhjbU5vTG1weklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRU0J1WVcxbGMzQmhZMlZrSUdOc2FXVnVkQ0JtYjNJZ2RHaGxYRzRnS2lCZ0wzWXpMM05vYjNCd2FXNW5MMmh2ZEdWc0xXOW1abVZ5Y3k4NmIyWm1aWEpmYVdSZ0lHVnVaSEJ2YVc1MGMxeHVJQ3BjYmlBcUlFRmpZMlZ6Y3lCMmFXRWdkR2hsSUh0QWJHbHVheUJCYldGa1pYVnpmU0J2WW1wbFkzUmNiaUFxWEc0Z0tpQmdZR0JxYzF4dUlDb2diR1YwSUdGdFlXUmxkWE1nUFNCdVpYY2dRVzFoWkdWMWN5Z3BPMXh1SUNvZ1lXMWhaR1YxY3k1emFHOXdjR2x1Wnk1b2IzUmxiRTltWm1WeVUyVmhjbU5vS0NkWVdGZ25LVHRjYmlBcUlHQmdZRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdRMnhwWlc1MGZTQmpiR2xsYm5SY2JpQXFJRUJ3Y205d1pYSjBlU0I3Ym5WdFltVnlmU0J2Wm1abGNrbGtYRzRnS2k5Y2JtTnNZWE56SUVodmRHVnNUMlptWlhKVFpXRnlZMmdnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhqYkdsbGJuUXNJRzltWm1WeVNXUXBJSHRjYmlBZ0lDQjBhR2x6TG1Oc2FXVnVkQ0E5SUdOc2FXVnVkRHRjYmlBZ0lDQjBhR2x6TG05bVptVnlTV1FnUFNCdlptWmxja2xrTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1pHVjBZV2xzY3lCbWIzSWdZU0J6Y0dWamFXWnBZeUJ2Wm1abGNseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjR0Z5WVcxelhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlV1UEZKbGMzQnZibk5sTEZKbGMzQnZibk5sUlhKeWIzSStmU0JoSUZCeWIyMXBjMlZjYmlBZ0lDcGNiaUFnSUNvZ1JtbHVaQ0JrWlhSaGFXeHpJR1p2Y2lCMGFHVWdiMlptWlhJZ2QybDBhQ0JKUkNBbldGaFlKMXh1SUNBZ0tseHVJQ0FnS2lCZ1lHQnFjMXh1SUNBZ0tpQWdZVzFoWkdWMWN5NXphRzl3Y0dsdVp5NW9iM1JsYkU5bVptVnlVMlZoY21Ob0tDZFlXRmduS1M1blpYUW9LVHRjYmlBZ0lDb2dZR0JnWEc0Z0lDQXFMMXh1SUNCblpYUW9jR0Z5WVcxeklEMGdlMzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHbGxiblF1WjJWMEtGeHVJQ0FnSUNBZ1lDOTJNeTl6YUc5d2NHbHVaeTlvYjNSbGJDMXZabVpsY25NdkpIdDBhR2x6TG05bVptVnlTV1I5WUN3Z2NHRnlZVzF6WEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JJYjNSbGJFOW1abVZ5VTJWaGNtTm9PeUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRV0pCTEVsQlkwMUJMR2RDUVVGblFqdEZRVU53UWl4VFFVRkJRU3hwUWtGQldVTXNUVUZCVFN4RlFVRkZReXhQUVVGUExFVkJRVVU3U1VGQlFVTXNaVUZCUVN4UFFVRkJTQ3huUWtGQlFUdEpRVU16UWl4SlFVRkpMRU5CUVVORExFMUJRVTBzUjBGQlIwRXNUVUZCVFR0SlFVTndRaXhKUVVGSkxFTkJRVU5ETEU5QlFVOHNSMEZCUjBFc1QwRkJUenRGUVVONFFqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRllSU3hQUVVGQlJTeFpRVUZCTEVOQlFVRktMR2RDUVVGQk8wbEJRVUZMTEVkQlFVRTdTVUZCUVVNc1MwRkJRU3hGUVZsQkxGTkJRVUZETEVsQlFVRXNSVUZCYVVJN1RVRkJRU3hKUVVGaVF5eE5RVUZOTEVkQlFVRkRMRk5CUVVFc1EwRkJRVU1zVFVGQlFTeFJRVUZCUkN4VFFVRkJMRkZCUVVGRkxGTkJRVUVzUjBGQlFVWXNVMEZCUVN4TlFVRkhMRU5CUVVNc1EwRkJRenROUVVOaUxFOUJRVThzU1VGQlNTeERRVUZEVWl4TlFVRk5MRU5CUVVOTkxFZEJRVWNzT0VKQlFVRkxMRTFCUVVFc1EwRkRVeXhKUVVGSkxFTkJRVU5XTEU5QlFVOHNSMEZCU1Uwc1RVRkRMME1zUTBGQlF6dEpRVU5JTzBWQlFVTTdRVUZCUVR0QlFVRkJMRWxCUVVGTExGRkJRVUVzUjBGQlFVTXNUMEZCUVN4alFVZFpaQ3huUWtGQlowSTdRVUZCUVdVc1RVRkJRU3hEUVVGQlJDeFBRVUZCTEVkQlFVRkJMRTlCUVVFc1EwRkJRVVVzVDBGQlFTSXNJbWxuYm05eVpVeHBjM1FpT2x0ZGZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/hotel_offer_search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/hotel_offers_search.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/hotel_offers_search.js ***!
  \*************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v3/shopping/hotel-offers` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.hotelOffersSearch;\n * ```\n *\n * @param {Client} client\n */\nvar HotelOffersSearch = /*#__PURE__*/function () {\n  function HotelOffersSearch(client) {\n    _classCallCheck(this, HotelOffersSearch);\n    this.client = client;\n  }\n\n  /**\n   * Find the list of available offers in the specific hotels\n   *\n   * @param {Object} params\n   * @param {string} params.hotelIds Comma separated list of Amadeus hotel\n   * codes to request. Example: RTPAR001\n   * @param {string} params.adults Number of adult guests (1-9) per room.\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Search for available offers in Novotel Paris for 2 adults\n   *\n   * ```js\n   * amadeus.shopping.hotelOffersSearch.get({\n   *   hotelIds: 'RTPAR001',\n   *   adults: '2'\n   * })\n   * ```\n   */\n  return _createClass(HotelOffersSearch, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v3/shopping/hotel-offers', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = HotelOffersSearch;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIb3RlbE9mZmVyc1NlYXJjaCIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvaG90ZWxfb2ZmZXJzX3NlYXJjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92My9zaG9wcGluZy9ob3RlbC1vZmZlcnNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5ob3RlbE9mZmVyc1NlYXJjaDtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgSG90ZWxPZmZlcnNTZWFyY2gge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBvZmZlcnMgaW4gdGhlIHNwZWNpZmljIGhvdGVsc1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuaG90ZWxJZHMgQ29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgQW1hZGV1cyBob3RlbFxuICAgKiBjb2RlcyB0byByZXF1ZXN0LiBFeGFtcGxlOiBSVFBBUjAwMVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmFkdWx0cyBOdW1iZXIgb2YgYWR1bHQgZ3Vlc3RzICgxLTkpIHBlciByb29tLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIFNlYXJjaCBmb3IgYXZhaWxhYmxlIG9mZmVycyBpbiBOb3ZvdGVsIFBhcmlzIGZvciAyIGFkdWx0c1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnNob3BwaW5nLmhvdGVsT2ZmZXJzU2VhcmNoLmdldCh7XG4gICAqICAgaG90ZWxJZHM6ICdSVFBBUjAwMScsXG4gICAqICAgYWR1bHRzOiAnMidcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBnZXQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KCcvdjMvc2hvcHBpbmcvaG90ZWwtb2ZmZXJzJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb3RlbE9mZmVyc1NlYXJjaDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxpQkFBaUI7RUFDckIsU0FBQUEsa0JBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLGlCQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQWpCRSxPQUFBRSxZQUFBLENBQUFILGlCQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQWtCQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMsMkJBQTJCLEVBQUVDLE1BQU0sQ0FBQztJQUM3RDtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosaUJBQWlCO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/hotel_offers_search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/seatmaps.js":
/*!**************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/seatmaps.js ***!
  \**************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/seatmaps` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.seatmaps;\n * ```\n *\n * @param {Client} client\n */\nvar Seatmaps = /*#__PURE__*/function () {\n  function Seatmaps(client) {\n    _classCallCheck(this, Seatmaps);\n    this.client = client;\n  }\n\n  /**\n   * To retrieve the seat map of each flight present in an order.\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Retrieve the seat map for flight order with ID 'XXX'\n   *\n   * ```js\n   * amadeus.shopping.seatmaps.get({\n   *    'flight-orderId': 'XXX'}\n   * );\n   * ```\n   */\n  return _createClass(Seatmaps, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/shopping/seatmaps', params);\n    }\n\n    /**\n     * To retrieve the seat map of each flight included in a flight offer.\n     *\n     * @param {Object} params\n     * @return {Promise.<Response,ResponseError>} a Promise\n     *\n     * To retrieve the seat map of each flight included in flight offers\n     * for MAD-NYC flight on 2020-08-01.\n     *\n     * ```js\n     * amadeus.shopping.flightOffers.get({\n     *    origin: 'MAD',\n     *    destination: 'NYC',\n     *    departureDate: '2020-08-01'\n     * }).then(function(response){\n     *    return amadeus.shopping.flightOffers.seatmaps.post(\n     *        JSON.stringify({\n     *            'data': response.data\n     *        })\n     *    );\n     * });\n     * ```\n    */\n  }, {\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v1/shopping/seatmaps', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Seatmaps;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZWF0bWFwcyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwicG9zdCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL3NlYXRtYXBzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvc2VhdG1hcHNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5zZWF0bWFwcztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgU2VhdG1hcHMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyByZXRyaWV2ZSB0aGUgc2VhdCBtYXAgb2YgZWFjaCBmbGlnaHQgcHJlc2VudCBpbiBhbiBvcmRlci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIFJldHJpZXZlIHRoZSBzZWF0IG1hcCBmb3IgZmxpZ2h0IG9yZGVyIHdpdGggSUQgJ1hYWCdcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zaG9wcGluZy5zZWF0bWFwcy5nZXQoe1xuICAgKiAgICAnZmxpZ2h0LW9yZGVySWQnOiAnWFhYJ31cbiAgICogKTtcbiAgICogYGBgXG4gICAqL1xuICBnZXQocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KCcvdjEvc2hvcHBpbmcvc2VhdG1hcHMnLCBwYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIHJldHJpZXZlIHRoZSBzZWF0IG1hcCBvZiBlYWNoIGZsaWdodCBpbmNsdWRlZCBpbiBhIGZsaWdodCBvZmZlci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIFRvIHJldHJpZXZlIHRoZSBzZWF0IG1hcCBvZiBlYWNoIGZsaWdodCBpbmNsdWRlZCBpbiBmbGlnaHQgb2ZmZXJzXG4gICAqIGZvciBNQUQtTllDIGZsaWdodCBvbiAyMDIwLTA4LTAxLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnNob3BwaW5nLmZsaWdodE9mZmVycy5nZXQoe1xuICAgKiAgICBvcmlnaW46ICdNQUQnLFxuICAgKiAgICBkZXN0aW5hdGlvbjogJ05ZQycsXG4gICAqICAgIGRlcGFydHVyZURhdGU6ICcyMDIwLTA4LTAxJ1xuICAgKiB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICogICAgcmV0dXJuIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzLnNlYXRtYXBzLnBvc3QoXG4gICAqICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAqICAgICAgICAgICAgJ2RhdGEnOiByZXNwb25zZS5kYXRhXG4gICAqICAgICAgICB9KVxuICAgKiAgICApO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICovXG4gIHBvc3QocGFyYW1zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdCgnL3YxL3Nob3BwaW5nL3NlYXRtYXBzJywgcGFyYW1zKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXRtYXBzOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxRQUFRO0VBQ1osU0FBQUEsU0FBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsUUFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBYkUsT0FBQUUsWUFBQSxDQUFBSCxRQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQWNBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRUMsTUFBTSxDQUFDO0lBQ3pEOztJQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUF0QkU7SUFBQUgsR0FBQTtJQUFBQyxLQUFBLEVBdUJBLFNBQUFNLEtBQUEsRUFBa0I7TUFBQSxJQUFiSixNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNkLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNVLElBQUksQ0FBQyx1QkFBdUIsRUFBRUosTUFBTSxDQUFDO0lBQzFEO0VBQUM7QUFBQTtBQUFBLElBQUFLLFFBQUEsR0FBQUMsT0FBQSxjQUlZYixRQUFRO0FBQUFjLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL3NlYXRtYXBzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLGtDQUFrQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGdCQUFnQixrQ0FBa0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsMkNBQTJDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10cmF2ZWwtYWdlbmN5Ly4vbm9kZV9tb2R1bGVzL2FtYWRldXMvbGliL2FtYWRldXMvbmFtZXNwYWNlcy9zaG9wcGluZy9zZWF0bWFwcy5qcz84NzAyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS9zaG9wcGluZy9zZWF0bWFwc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnNob3BwaW5nLnNlYXRtYXBzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG52YXIgU2VhdG1hcHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZWF0bWFwcyhjbGllbnQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VhdG1hcHMpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIHJldHJpZXZlIHRoZSBzZWF0IG1hcCBvZiBlYWNoIGZsaWdodCBwcmVzZW50IGluIGFuIG9yZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogUmV0cmlldmUgdGhlIHNlYXQgbWFwIGZvciBmbGlnaHQgb3JkZXIgd2l0aCBJRCAnWFhYJ1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnNob3BwaW5nLnNlYXRtYXBzLmdldCh7XG4gICAqICAgICdmbGlnaHQtb3JkZXJJZCc6ICdYWFgnfVxuICAgKiApO1xuICAgKiBgYGBcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoU2VhdG1hcHMsIFt7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS9zaG9wcGluZy9zZWF0bWFwcycsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG8gcmV0cmlldmUgdGhlIHNlYXQgbWFwIG9mIGVhY2ggZmxpZ2h0IGluY2x1ZGVkIGluIGEgZmxpZ2h0IG9mZmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICAgKlxuICAgICAqIFRvIHJldHJpZXZlIHRoZSBzZWF0IG1hcCBvZiBlYWNoIGZsaWdodCBpbmNsdWRlZCBpbiBmbGlnaHQgb2ZmZXJzXG4gICAgICogZm9yIE1BRC1OWUMgZmxpZ2h0IG9uIDIwMjAtMDgtMDEuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzLmdldCh7XG4gICAgICogICAgb3JpZ2luOiAnTUFEJyxcbiAgICAgKiAgICBkZXN0aW5hdGlvbjogJ05ZQycsXG4gICAgICogICAgZGVwYXJ0dXJlRGF0ZTogJzIwMjAtMDgtMDEnXG4gICAgICogfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICogICAgcmV0dXJuIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzLnNlYXRtYXBzLnBvc3QoXG4gICAgICogICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgKiAgICAgICAgICAgICdkYXRhJzogcmVzcG9uc2UuZGF0YVxuICAgICAqICAgICAgICB9KVxuICAgICAqICAgICk7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJwb3N0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3QoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KCcvdjEvc2hvcHBpbmcvc2VhdG1hcHMnLCBwYXJhbXMpO1xuICAgIH1cbiAgfV0pO1xufSgpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTZWF0bWFwcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpUWldGMGJXRndjeUlzSW1Oc2FXVnVkQ0lzSWw5amJHRnpjME5oYkd4RGFHVmpheUlzSWw5amNtVmhkR1ZEYkdGemN5SXNJbXRsZVNJc0luWmhiSFZsSWl3aVoyVjBJaXdpY0dGeVlXMXpJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aWRXNWtaV1pwYm1Wa0lpd2ljRzl6ZENJc0lsOWtaV1poZFd4MElpd2laWGh3YjNKMGN5SXNJbTF2WkhWc1pTSXNJbVJsWm1GMWJIUWlYU3dpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOXpjbU12WVcxaFpHVjFjeTl1WVcxbGMzQmhZMlZ6TDNOb2IzQndhVzVuTDNObFlYUnRZWEJ6TG1weklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbHh1THlvcVhHNGdLaUJCSUc1aGJXVnpjR0ZqWldRZ1kyeHBaVzUwSUdadmNpQjBhR1ZjYmlBcUlHQXZkakV2YzJodmNIQnBibWN2YzJWaGRHMWhjSE5nSUdWdVpIQnZhVzUwYzF4dUlDcGNiaUFxSUVGalkyVnpjeUIyYVdFZ2RHaGxJSHRBYkdsdWF5QkJiV0ZrWlhWemZTQnZZbXBsWTNSY2JpQXFYRzRnS2lCZ1lHQnFjMXh1SUNvZ2JHVjBJR0Z0WVdSbGRYTWdQU0J1WlhjZ1FXMWhaR1YxY3lncE8xeHVJQ29nWVcxaFpHVjFjeTV6YUc5d2NHbHVaeTV6WldGMGJXRndjenRjYmlBcUlHQmdZRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdRMnhwWlc1MGZTQmpiR2xsYm5SY2JpQXFMMXh1WTJ4aGMzTWdVMlZoZEcxaGNITWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaGpiR2xsYm5RcElIdGNiaUFnSUNCMGFHbHpMbU5zYVdWdWRDQTlJR05zYVdWdWREdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYnlCeVpYUnlhV1YyWlNCMGFHVWdjMlZoZENCdFlYQWdiMllnWldGamFDQm1iR2xuYUhRZ2NISmxjMlZ1ZENCcGJpQmhiaUJ2Y21SbGNpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSEJoY21GdGMxeHVJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sTGp4U1pYTndiMjV6WlN4U1pYTndiMjV6WlVWeWNtOXlQbjBnWVNCUWNtOXRhWE5sWEc0Z0lDQXFYRzRnSUNBcUlGSmxkSEpwWlhabElIUm9aU0J6WldGMElHMWhjQ0JtYjNJZ1pteHBaMmgwSUc5eVpHVnlJSGRwZEdnZ1NVUWdKMWhZV0NkY2JpQWdJQ3BjYmlBZ0lDb2dZR0JnYW5OY2JpQWdJQ29nWVcxaFpHVjFjeTV6YUc5d2NHbHVaeTV6WldGMGJXRndjeTVuWlhRb2UxeHVJQ0FnS2lBZ0lDQW5abXhwWjJoMExXOXlaR1Z5U1dRbk9pQW5XRmhZSjMxY2JpQWdJQ29nS1R0Y2JpQWdJQ29nWUdCZ1hHNGdJQ0FxTDF4dUlDQm5aWFFvY0dGeVlXMXpJRDBnZTMwcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiR2xsYm5RdVoyVjBLQ2N2ZGpFdmMyaHZjSEJwYm1jdmMyVmhkRzFoY0hNbkxDQndZWEpoYlhNcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJ2SUhKbGRISnBaWFpsSUhSb1pTQnpaV0YwSUcxaGNDQnZaaUJsWVdOb0lHWnNhV2RvZENCcGJtTnNkV1JsWkNCcGJpQmhJR1pzYVdkb2RDQnZabVpsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIQmhjbUZ0YzF4dUlDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxManhTWlhOd2IyNXpaU3hTWlhOd2IyNXpaVVZ5Y205eVBuMGdZU0JRY205dGFYTmxYRzRnSUNBcVhHNGdJQ0FxSUZSdklISmxkSEpwWlhabElIUm9aU0J6WldGMElHMWhjQ0J2WmlCbFlXTm9JR1pzYVdkb2RDQnBibU5zZFdSbFpDQnBiaUJtYkdsbmFIUWdiMlptWlhKelhHNGdJQ0FxSUdadmNpQk5RVVF0VGxsRElHWnNhV2RvZENCdmJpQXlNREl3TFRBNExUQXhMbHh1SUNBZ0tseHVJQ0FnS2lCZ1lHQnFjMXh1SUNBZ0tpQmhiV0ZrWlhWekxuTm9iM0J3YVc1bkxtWnNhV2RvZEU5bVptVnljeTVuWlhRb2UxeHVJQ0FnS2lBZ0lDQnZjbWxuYVc0NklDZE5RVVFuTEZ4dUlDQWdLaUFnSUNCa1pYTjBhVzVoZEdsdmJqb2dKMDVaUXljc1hHNGdJQ0FxSUNBZ0lHUmxjR0Z5ZEhWeVpVUmhkR1U2SUNjeU1ESXdMVEE0TFRBeEoxeHVJQ0FnS2lCOUtTNTBhR1Z1S0daMWJtTjBhVzl1S0hKbGMzQnZibk5sS1h0Y2JpQWdJQ29nSUNBZ2NtVjBkWEp1SUdGdFlXUmxkWE11YzJodmNIQnBibWN1Wm14cFoyaDBUMlptWlhKekxuTmxZWFJ0WVhCekxuQnZjM1FvWEc0Z0lDQXFJQ0FnSUNBZ0lDQktVMDlPTG5OMGNtbHVaMmxtZVNoN1hHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0oyUmhkR0VuT2lCeVpYTndiMjV6WlM1a1lYUmhYRzRnSUNBcUlDQWdJQ0FnSUNCOUtWeHVJQ0FnS2lBZ0lDQXBPMXh1SUNBZ0tpQjlLVHRjYmlBZ0lDb2dZR0JnWEc0Z0lDb3ZYRzRnSUhCdmMzUW9jR0Z5WVcxeklEMGdlMzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHbGxiblF1Y0c5emRDZ25MM1l4TDNOb2IzQndhVzVuTDNObFlYUnRZWEJ6Snl3Z2NHRnlZVzF6S1R0Y2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGTmxZWFJ0WVhCek95SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZhUVN4SlFXRk5RU3hSUVVGUk8wVkJRMW9zVTBGQlFVRXNVMEZCV1VNc1RVRkJUU3hGUVVGRk8wbEJRVUZETEdWQlFVRXNUMEZCUVVZc1VVRkJRVHRKUVVOc1FpeEpRVUZKTEVOQlFVTkRMRTFCUVUwc1IwRkJSMEVzVFVGQlRUdEZRVU4wUWpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQllrVXNUMEZCUVVVc1dVRkJRU3hEUVVGQlNDeFJRVUZCTzBsQlFVRkpMRWRCUVVFN1NVRkJRVU1zUzBGQlFTeEZRV05CTEZOQlFVRkRMRWxCUVVFc1JVRkJhVUk3VFVGQlFTeEpRVUZpUXl4TlFVRk5MRWRCUVVGRExGTkJRVUVzUTBGQlFVTXNUVUZCUVN4UlFVRkJSQ3hUUVVGQkxGRkJRVUZGTEZOQlFVRXNSMEZCUVVZc1UwRkJRU3hOUVVGSExFTkJRVU1zUTBGQlF6dE5RVU5pTEU5QlFVOHNTVUZCU1N4RFFVRkRVQ3hOUVVGTkxFTkJRVU5MTEVkQlFVY3NRMEZCUXl4MVFrRkJkVUlzUlVGQlJVTXNUVUZCVFN4RFFVRkRPMGxCUTNwRU96dEpRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRjBRa1U3U1VGQlFVZ3NSMEZCUVR0SlFVRkJReXhMUVVGQkxFVkJkVUpCTEZOQlFVRk5MRXRCUVVFc1JVRkJhMEk3VFVGQlFTeEpRVUZpU2l4TlFVRk5MRWRCUVVGRExGTkJRVUVzUTBGQlFVTXNUVUZCUVN4UlFVRkJSQ3hUUVVGQkxGRkJRVUZGTEZOQlFVRXNSMEZCUVVZc1UwRkJRU3hOUVVGSExFTkJRVU1zUTBGQlF6dE5RVU5rTEU5QlFVOHNTVUZCU1N4RFFVRkRVQ3hOUVVGTkxFTkJRVU5WTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUlVGQlJVb3NUVUZCVFN4RFFVRkRPMGxCUXpGRU8wVkJRVU03UVVGQlFUdEJRVUZCTEVsQlFVRkxMRkZCUVVFc1IwRkJRVU1zVDBGQlFTeGpRVWxaWWl4UlFVRlJPMEZCUVVGakxFMUJRVUVzUTBGQlFVUXNUMEZCUVN4SFFVRkJRU3hQUVVGQkxFTkJRVUZGTEU5QlFVRWlMQ0pwWjI1dmNtVk1hWE4wSWpwYlhYMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/seatmaps.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/transfer_offers.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/shopping/transfer_offers.js ***!
  \*********************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/shopping/transfer-offers` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.shopping.transferOffers;\n * ```\n *\n * @param {Client} client\n */\nvar TransferOffers = /*#__PURE__*/function () {\n  function TransferOffers(client) {\n    _classCallCheck(this, TransferOffers);\n    this.client = client;\n  }\n\n  /**\n   * To search the list of transfer offers.\n   *\n   * @param {Object} params\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * To search the list of transfer offers\n   *\n   * ```js\n   * amadeus.shopping.transferOffers.post(body)\n    * ```\n  */\n  return _createClass(TransferOffers, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v1/shopping/transfer-offers', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = TransferOffers;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUcmFuc2Zlck9mZmVycyIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwicG9zdCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL3RyYW5zZmVyX29mZmVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3Nob3BwaW5nL3RyYW5zZmVyLW9mZmVyc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnNob3BwaW5nLnRyYW5zZmVyT2ZmZXJzO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBUcmFuc2Zlck9mZmVycyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIHNlYXJjaCB0aGUgbGlzdCBvZiB0cmFuc2ZlciBvZmZlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBUbyBzZWFyY2ggdGhlIGxpc3Qgb2YgdHJhbnNmZXIgb2ZmZXJzXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuc2hvcHBpbmcudHJhbnNmZXJPZmZlcnMucG9zdChib2R5KVxuXG4gICAqIGBgYFxuICAqL1xuICBwb3N0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoJy92MS9zaG9wcGluZy90cmFuc2Zlci1vZmZlcnMnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyYW5zZmVyT2ZmZXJzOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNQSxjQUFjO0VBQ2xCLFNBQUFBLGVBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLGNBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBWEUsT0FBQUUsWUFBQSxDQUFBSCxjQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQWFBLFNBQUFDLEtBQUEsRUFBa0I7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNkLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLElBQUksQ0FBQyw4QkFBOEIsRUFBRUMsTUFBTSxDQUFDO0lBQ2pFO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixjQUFjO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nL3RyYW5zZmVyX29mZmVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxrQ0FBa0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsMkNBQTJDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10cmF2ZWwtYWdlbmN5Ly4vbm9kZV9tb2R1bGVzL2FtYWRldXMvbGliL2FtYWRldXMvbmFtZXNwYWNlcy9zaG9wcGluZy90cmFuc2Zlcl9vZmZlcnMuanM/Y2MyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvc2hvcHBpbmcvdHJhbnNmZXItb2ZmZXJzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMuc2hvcHBpbmcudHJhbnNmZXJPZmZlcnM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKi9cbnZhciBUcmFuc2Zlck9mZmVycyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRyYW5zZmVyT2ZmZXJzKGNsaWVudCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2Zlck9mZmVycyk7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogVG8gc2VhcmNoIHRoZSBsaXN0IG9mIHRyYW5zZmVyIG9mZmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIFRvIHNlYXJjaCB0aGUgbGlzdCBvZiB0cmFuc2ZlciBvZmZlcnNcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5zaG9wcGluZy50cmFuc2Zlck9mZmVycy5wb3N0KGJvZHkpXG4gICAgKiBgYGBcbiAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhUcmFuc2Zlck9mZmVycywgW3tcbiAgICBrZXk6IFwicG9zdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0KCkge1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdCgnL3YxL3Nob3BwaW5nL3RyYW5zZmVyLW9mZmVycycsIHBhcmFtcyk7XG4gICAgfVxuICB9XSk7XG59KCk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IFRyYW5zZmVyT2ZmZXJzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SlVjbUZ1YzJabGNrOW1abVZ5Y3lJc0ltTnNhV1Z1ZENJc0lsOWpiR0Z6YzBOaGJHeERhR1ZqYXlJc0lsOWpjbVZoZEdWRGJHRnpjeUlzSW10bGVTSXNJblpoYkhWbElpd2ljRzl6ZENJc0luQmhjbUZ0Y3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJblZ1WkdWbWFXNWxaQ0lzSWw5a1pXWmhkV3gwSWl3aVpYaHdiM0owY3lJc0ltMXZaSFZzWlNJc0ltUmxabUYxYkhRaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5emNtTXZZVzFoWkdWMWN5OXVZVzFsYzNCaFkyVnpMM05vYjNCd2FXNW5MM1J5WVc1elptVnlYMjltWm1WeWN5NXFjeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY2JpOHFLbHh1SUNvZ1FTQnVZVzFsYzNCaFkyVmtJR05zYVdWdWRDQm1iM0lnZEdobFhHNGdLaUJnTDNZeEwzTm9iM0J3YVc1bkwzUnlZVzV6Wm1WeUxXOW1abVZ5YzJBZ1pXNWtjRzlwYm5SelhHNGdLbHh1SUNvZ1FXTmpaWE56SUhacFlTQjBhR1VnZTBCc2FXNXJJRUZ0WVdSbGRYTjlJRzlpYW1WamRGeHVJQ3BjYmlBcUlHQmdZR3B6WEc0Z0tpQnNaWFFnWVcxaFpHVjFjeUE5SUc1bGR5QkJiV0ZrWlhWektDazdYRzRnS2lCaGJXRmtaWFZ6TG5Ob2IzQndhVzVuTG5SeVlXNXpabVZ5VDJabVpYSnpPMXh1SUNvZ1lHQmdYRzRnS2x4dUlDb2dRSEJoY21GdElIdERiR2xsYm5SOUlHTnNhV1Z1ZEZ4dUlDb3ZYRzVqYkdGemN5QlVjbUZ1YzJabGNrOW1abVZ5Y3lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0dOc2FXVnVkQ2tnZTF4dUlDQWdJSFJvYVhNdVkyeHBaVzUwSUQwZ1kyeHBaVzUwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUnZJSE5sWVhKamFDQjBhR1VnYkdsemRDQnZaaUIwY21GdWMyWmxjaUJ2Wm1abGNuTXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J3WVhKaGJYTmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlM0OFVtVnpjRzl1YzJVc1VtVnpjRzl1YzJWRmNuSnZjajU5SUdFZ1VISnZiV2x6WlZ4dUlDQWdLbHh1SUNBZ0tpQlVieUJ6WldGeVkyZ2dkR2hsSUd4cGMzUWdiMllnZEhKaGJuTm1aWElnYjJabVpYSnpYRzRnSUNBcVhHNGdJQ0FxSUdCZ1lHcHpYRzRnSUNBcUlHRnRZV1JsZFhNdWMyaHZjSEJwYm1jdWRISmhibk5tWlhKUFptWmxjbk11Y0c5emRDaGliMlI1S1Z4dVhHNGdJQ0FxSUdCZ1lGeHVJQ0FxTDF4dUlDQndiM04wS0hCaGNtRnRjeUE5SUh0OUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMnhwWlc1MExuQnZjM1FvSnk5Mk1TOXphRzl3Y0dsdVp5OTBjbUZ1YzJabGNpMXZabVpsY25NbkxDQndZWEpoYlhNcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGUnlZVzV6Wm1WeVQyWm1aWEp6T3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRmFRU3hKUVdGTlFTeGpRVUZqTzBWQlEyeENMRk5CUVVGQkxHVkJRVmxETEUxQlFVMHNSVUZCUlR0SlFVRkJReXhsUVVGQkxFOUJRVUZHTEdOQlFVRTdTVUZEYkVJc1NVRkJTU3hEUVVGRFF5eE5RVUZOTEVkQlFVZEJMRTFCUVUwN1JVRkRkRUk3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCV0VVc1QwRkJRVVVzV1VGQlFTeERRVUZCU0N4alFVRkJPMGxCUVVGSkxFZEJRVUU3U1VGQlFVTXNTMEZCUVN4RlFXRkJMRk5CUVVGRExFdEJRVUVzUlVGQmEwSTdUVUZCUVN4SlFVRmlReXhOUVVGTkxFZEJRVUZETEZOQlFVRXNRMEZCUVVNc1RVRkJRU3hSUVVGQlJDeFRRVUZCTEZGQlFVRkZMRk5CUVVFc1IwRkJRVVlzVTBGQlFTeE5RVUZITEVOQlFVTXNRMEZCUXp0TlFVTmtMRTlCUVU4c1NVRkJTU3hEUVVGRFVDeE5RVUZOTEVOQlFVTkxMRWxCUVVrc1EwRkJReXc0UWtGQk9FSXNSVUZCUlVNc1RVRkJUU3hEUVVGRE8wbEJRMnBGTzBWQlFVTTdRVUZCUVR0QlFVRkJMRWxCUVVGSkxGRkJRVUVzUjBGQlFVTXNUMEZCUVN4alFVZFpXaXhqUVVGak8wRkJRVUZoTEUxQlFVRXNRMEZCUVVRc1QwRkJRU3hIUVVGQlFTeFBRVUZCTEVOQlFVRkZMRTlCUVVFaUxDSnBaMjV2Y21WTWFYTjBJanBiWFgwPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/shopping/transfer_offers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel.js":
/*!***************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _analytics = _interopRequireDefault(__webpack_require__(/*! ./travel/analytics */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics.js\"));\nvar _predictions = _interopRequireDefault(__webpack_require__(/*! ./travel/predictions */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions.js\"));\nvar _trip_parser = _interopRequireDefault(__webpack_require__(/*! ./travel/trip_parser */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/trip_parser.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/travel` & `/v2/travel` & `/v3/travel` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel;\n * ```\n *\n * @param {Client} client\n * @property {Analytics} analytics\n * @property {Predictions} predictions\n * @property {TripParser} tripParser\n * @protected\n */\nvar Travel = /*#__PURE__*/_createClass(function Travel(client) {\n  _classCallCheck(this, Travel);\n  this.client = client;\n  this.analytics = new _analytics[\"default\"](client);\n  this.predictions = new _predictions[\"default\"](client);\n  this.tripParser = new _trip_parser[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Travel;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYW5hbHl0aWNzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcHJlZGljdGlvbnMiLCJfdHJpcF9wYXJzZXIiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJUcmF2ZWwiLCJjbGllbnQiLCJhbmFseXRpY3MiLCJBbmFseXRpY3MiLCJwcmVkaWN0aW9ucyIsIlByZWRpY3Rpb25zIiwidHJpcFBhcnNlciIsIlRyaXBQYXJzZXIiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy90cmF2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFuYWx5dGljcyBmcm9tICcuL3RyYXZlbC9hbmFseXRpY3MnO1xuaW1wb3J0IFByZWRpY3Rpb25zIGZyb20gJy4vdHJhdmVsL3ByZWRpY3Rpb25zJztcbmltcG9ydCBUcmlwUGFyc2VyIGZyb20gJy4vdHJhdmVsL3RyaXBfcGFyc2VyJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvdHJhdmVsYCAmIGAvdjIvdHJhdmVsYCAmIGAvdjMvdHJhdmVsYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMudHJhdmVsO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICogQHByb3BlcnR5IHtBbmFseXRpY3N9IGFuYWx5dGljc1xuICogQHByb3BlcnR5IHtQcmVkaWN0aW9uc30gcHJlZGljdGlvbnNcbiAqIEBwcm9wZXJ0eSB7VHJpcFBhcnNlcn0gdHJpcFBhcnNlclxuICogQHByb3RlY3RlZFxuICovXG5jbGFzcyBUcmF2ZWwge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCAgICA9IGNsaWVudDtcbiAgICB0aGlzLmFuYWx5dGljcyA9IG5ldyBBbmFseXRpY3MoY2xpZW50KTtcbiAgICB0aGlzLnByZWRpY3Rpb25zID0gbmV3IFByZWRpY3Rpb25zKGNsaWVudCk7XG4gICAgdGhpcy50cmlwUGFyc2VyID0gbmV3IFRyaXBQYXJzZXIoY2xpZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmF2ZWw7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBOEMsU0FBQUQsdUJBQUFJLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhCQSxJQWlCTU0sTUFBTSxnQkFBQWQsWUFBQSxDQUNWLFNBQUFjLE9BQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLE1BQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQU1BLE1BQU07RUFDdkIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUMscUJBQVMsQ0FBQ0YsTUFBTSxDQUFDO0VBQ3RDLElBQUksQ0FBQ0csV0FBVyxHQUFHLElBQUlDLHVCQUFXLENBQUNKLE1BQU0sQ0FBQztFQUMxQyxJQUFJLENBQUNLLFVBQVUsR0FBRyxJQUFJQyx1QkFBVSxDQUFDTixNQUFNLENBQUM7QUFDMUMsQ0FBQztBQUFBLElBQUFPLFFBQUEsR0FBQUMsT0FBQSxjQUdZVCxNQUFNO0FBQUFVLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics.js":
/*!*************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _air_traffic = _interopRequireDefault(__webpack_require__(/*! ./analytics/air_traffic */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v2/travel/analytics` endpoints\n *\n * Access via the {Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.analytics;\n * ```\n *\n * @param {Client} client\n * @property {Urls} urls\n * @protected\n */\nvar Analytics = /*#__PURE__*/_createClass(function Analytics(client) {\n  _classCallCheck(this, Analytics);\n  this.client = client;\n  this.airTraffic = new _air_traffic[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Analytics;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYWlyX3RyYWZmaWMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJyIiwidCIsImxlbmd0aCIsIm8iLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG90eXBlIiwiaSIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJhIiwibiIsIkFuYWx5dGljcyIsImNsaWVudCIsImFpclRyYWZmaWMiLCJBaXJUcmFmZmljIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvdHJhdmVsL2FuYWx5dGljcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQWlyVHJhZmZpYyAgZnJvbSAnLi9hbmFseXRpY3MvYWlyX3RyYWZmaWMnO1xuXG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92Mi90cmF2ZWwvYW5hbHl0aWNzYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMudHJhdmVsLmFuYWx5dGljcztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqIEBwcm9wZXJ0eSB7VXJsc30gdXJsc1xuICogQHByb3RlY3RlZFxuICovXG5jbGFzcyBBbmFseXRpY3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCAgICAgICAgPSBjbGllbnQ7XG4gICAgdGhpcy5haXJUcmFmZmljICAgID0gbmV3IEFpclRyYWZmaWMoY2xpZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBbmFseXRpY3M7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBa0QsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEEsSUFlTU0sU0FBUyxnQkFBQWQsWUFBQSxDQUNiLFNBQUFjLFVBQVlDLE1BQU0sRUFBRTtFQUFBSixlQUFBLE9BQUFHLFNBQUE7RUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQVVBLE1BQU07RUFDM0IsSUFBSSxDQUFDQyxVQUFVLEdBQU0sSUFBSUMsdUJBQVUsQ0FBQ0YsTUFBTSxDQUFDO0FBQzdDLENBQUM7QUFBQSxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsY0FHWUwsU0FBUztBQUFBTSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1hZGV1cy9saWIvYW1hZGV1cy9uYW1lc3BhY2VzL3RyYXZlbC9hbmFseXRpY3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCLDBDQUEwQyxtQkFBTyxDQUFDLG9IQUF5QjtBQUMzRSxxQ0FBcUMsaUNBQWlDO0FBQ3RFLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsMkNBQTJDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10cmF2ZWwtYWdlbmN5Ly4vbm9kZV9tb2R1bGVzL2FtYWRldXMvbGliL2FtYWRldXMvbmFtZXNwYWNlcy90cmF2ZWwvYW5hbHl0aWNzLmpzPzc5MTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfYWlyX3RyYWZmaWMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2FuYWx5dGljcy9haXJfdHJhZmZpY1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjIvdHJhdmVsL2FuYWx5dGljc2AgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0FtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnRyYXZlbC5hbmFseXRpY3M7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge1VybHN9IHVybHNcbiAqIEBwcm90ZWN0ZWRcbiAqL1xudmFyIEFuYWx5dGljcyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlQ2xhc3MoZnVuY3Rpb24gQW5hbHl0aWNzKGNsaWVudCkge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5hbHl0aWNzKTtcbiAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIHRoaXMuYWlyVHJhZmZpYyA9IG5ldyBfYWlyX3RyYWZmaWNbXCJkZWZhdWx0XCJdKGNsaWVudCk7XG59KTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQW5hbHl0aWNzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZZV2x5WDNSeVlXWm1hV01pTENKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1VaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWDJSbFptbHVaVkJ5YjNCbGNuUnBaWE1pTENKeUlpd2lkQ0lzSW14bGJtZDBhQ0lzSW04aUxDSmxiblZ0WlhKaFlteGxJaXdpWTI5dVptbG5kWEpoWW14bElpd2lkM0pwZEdGaWJHVWlMQ0pQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbDkwYjFCeWIzQmxjblI1UzJWNUlpd2lhMlY1SWl3aVgyTnlaV0YwWlVOc1lYTnpJaXdpY0hKdmRHOTBlWEJsSWl3aWFTSXNJbDkwYjFCeWFXMXBkR2wyWlNJc0lsOTBlWEJsYjJZaUxDSlRlVzFpYjJ3aUxDSjBiMUJ5YVcxcGRHbDJaU0lzSW1OaGJHd2lMQ0pVZVhCbFJYSnliM0lpTENKVGRISnBibWNpTENKT2RXMWlaWElpTENKZlkyeGhjM05EWVd4c1EyaGxZMnNpTENKaElpd2liaUlzSWtGdVlXeDVkR2xqY3lJc0ltTnNhV1Z1ZENJc0ltRnBjbFJ5WVdabWFXTWlMQ0pCYVhKVWNtRm1abWxqSWl3aVgyUmxabUYxYkhRaUxDSmxlSEJ2Y25Seklpd2liVzlrZFd4bElpd2laR1ZtWVhWc2RDSmRMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwzTnlZeTloYldGa1pYVnpMMjVoYldWemNHRmpaWE12ZEhKaGRtVnNMMkZ1WVd4NWRHbGpjeTVxY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1FXbHlWSEpoWm1acFl5QWdabkp2YlNBbkxpOWhibUZzZVhScFkzTXZZV2x5WDNSeVlXWm1hV01uTzF4dVhHNHZLaXBjYmlBcUlFRWdibUZ0WlhOd1lXTmxaQ0JqYkdsbGJuUWdabTl5SUhSb1pWeHVJQ29nWUM5Mk1pOTBjbUYyWld3dllXNWhiSGwwYVdOellDQmxibVJ3YjJsdWRITmNiaUFxWEc0Z0tpQkJZMk5sYzNNZ2RtbGhJSFJvWlNCN1FXMWhaR1YxYzMwZ2IySnFaV04wWEc0Z0tseHVJQ29nWUdCZ2FuTmNiaUFxSUd4bGRDQmhiV0ZrWlhWeklEMGdibVYzSUVGdFlXUmxkWE1vS1R0Y2JpQXFJR0Z0WVdSbGRYTXVkSEpoZG1Wc0xtRnVZV3g1ZEdsamN6dGNiaUFxSUdCZ1lGeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1EyeHBaVzUwZlNCamJHbGxiblJjYmlBcUlFQndjbTl3WlhKMGVTQjdWWEpzYzMwZ2RYSnNjMXh1SUNvZ1FIQnliM1JsWTNSbFpGeHVJQ292WEc1amJHRnpjeUJCYm1Gc2VYUnBZM01nZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhqYkdsbGJuUXBJSHRjYmlBZ0lDQjBhR2x6TG1Oc2FXVnVkQ0FnSUNBZ0lDQWdQU0JqYkdsbGJuUTdYRzRnSUNBZ2RHaHBjeTVoYVhKVWNtRm1abWxqSUNBZ0lEMGdibVYzSUVGcGNsUnlZV1ptYVdNb1kyeHBaVzUwS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCQmJtRnNlWFJwWTNNN1hHNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQlFTeEpRVUZCUVN4WlFVRkJMRWRCUVVGRExITkNRVUZCTEVOQlFVRkRMRTlCUVVFN1FVRkJhMFFzVTBGQlFVUXNkVUpCUVVGRkxFTkJRVUVzVjBGQlFVRXNRMEZCUVN4SlFVRkJRU3hEUVVGQkxFTkJRVUZETEZWQlFVRXNSMEZCUVVRc1EwRkJRU3huUWtGQlFVRXNRMEZCUVR0QlFVRkJMRk5CUVVGRkxHdENRVUZCUml4RFFVRkJMRVZCUVVGSExFTkJRVUVzWVVGQlFVTXNRMEZCUVN4TlFVRkJRU3hEUVVGQkxFZEJRVUZFTEVOQlFVRXNRMEZCUVVVc1RVRkJRU3hGUVVGQlJDeERRVUZCTEZWQlFVRkZMRU5CUVVFc1IwRkJRVWdzUTBGQlFTeERRVUZCUXl4RFFVRkJMRWRCUVVGRkxFTkJRVUVzUTBGQlFVTXNWVUZCUVN4SFFVRkJSQ3hEUVVGQkxFTkJRVUZETEZWQlFVRXNVVUZCUVVRc1EwRkJRU3hEUVVGQlJTeFpRVUZCTEd0Q1FVRkJSaXhEUVVGQkxFdEJRVUZCTEVOQlFVRXNRMEZCUVVjc1VVRkJRU3hSUVVGQlF5eE5RVUZCTEVOQlFVRkRMR05CUVVFc1EwRkJRVmdzUTBGQlFTeEZRVUZCV1N4alFVRkJMRU5CUVVGT0xFTkJRVUVzUTBGQlFVOHNSMEZCUVN4SFFVRkJVQ3hEUVVGQk8wRkJRVUVzVTBGQlFWRXNZVUZCUVdRc1EwRkJRU3hGUVVGQlJ5eERRVUZCTEVWQlFVRkRMRU5CUVVFc1YwRkJRVVFzUTBGQlFTeEpRVUZCUkN4cFFrRkJRU3hEUVVGQlJpeERRVUZCTEVOQlFVRmxMRk5CUVVFc1JVRkJRVm9zUTBGQlFTeEhRVUZCUXl4RFFVRkJMRWxCUVVGR0xHbENRVUZCTEVOQlFVRkdMRU5CUVVFc1JVRkJRVWtzUTBGQlFTeEhRVUZCVFN4TlFVRkJMRU5CUVVGRExHTkJRVUVzUTBGQlFWZ3NRMEZCUVN4cFFrRkJRVk1zVVVGQlFTeFRRVUZCVkN4RFFVRkJPMEZCUVVFc1UwRkJRVmtzWlVGQlFWSXNRMEZCUVN4UlFVRkJXU3hEUVVGQkxFZEJRVUZETEZsQlFVRXNRMEZCUVdJc1EwRkJRU3huUTBGQlFXTXNUMEZCUVN4RFFVRkJSaXhEUVVGQkxFbEJRVUZCTEVOQlFVRXNSMEZCUVVFc1EwRkJRVHRCUVVGQkxGTkJRVUZETEdGQlFVRmlMRU5CUVVFc1JVRkJRVVFzUTBGQlFTeHZRa0ZCUVdVc1QwRkJRU3hEUVVGQlpDeERRVUZCTEUxQlFVRkJMRU5CUVVFc1UwRkJRVUVzUTBGQlFTeE5RVUZCU2l4RFFVRkJMRWRCUVVGSkxFTkJRVUVzUTBGQlFXVXNUVUZCUVN4RFFVRkJReXhYUVVGQkxHdENRVUZCY0VJc1EwRkJRU3hSUVVGQlowSXNRMEZCUVN4SFFVRkJhRUlzUTBGQlFTeERRVUZCY1VJc1NVRkJRU3hEUVVGQmFrSXNRMEZCUVN4RlFVRkJSQ3hEUVVGQkxHZERRVUZCWlN4UFFVRkJMRU5CUVVGR0xFTkJRVUVzVlVGQlFVRXNRMEZCUVN4WlFVRkJUU3hUUVVGQkxIbEZRVUZCYmtJc1EwRkJRU3hIUVVGQmIwSXNUVUZCUVN4SFFVRkJReXhOUVVGQkxFVkJRVUZ3UWl4RFFVRkJPMEZCUVVFc1UwRkJRWEZDTEdkQ1FVRkJReXhEUVVGQkxFVkJRVUZETEVOQlFVRXNWVUZCUVVRc1EwRkJRU3haUVVGQlF5eERRVUZCTEdGQlFVRk1MRk5CUVVFN1FVRkZiRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCWkVFc1NVRmxUVTBzVTBGQlV5eG5Ra0ZCUVdRc1dVRkJRU3hEUVVOaUxGTkJRVUZqTEZWQlFWbERMRTFCUVUwc1JVRkJSVHRGUVVGQlNpeGxRVUZCTEU5QlFVRkhMRk5CUVVFN1JVRkRiRUlzU1VGQlNTeERRVUZEUXl4TlFVRk5MRWRCUVZWQkxFMUJRVTA3UlVGRE0wSXNTVUZCU1N4RFFVRkRReXhWUVVGVkxFZEJRVTBzU1VGQlNVTXNkVUpCUVZVc1EwRkJRMFlzVFVGQlRTeERRVUZETzBGQlF6ZERMRU5CUVVNN1FVRkJRU3hKUVVGQlJ5eFJRVUZCTEVkQlFVRkRMRTlCUVVFc1kwRkhXVXdzVTBGQlV6dEJRVUZCVFN4TlFVRkJMRU5CUVVGRUxFOUJRVUVzUjBGQlFVRXNUMEZCUVN4RFFVRkJSU3hQUVVGQklpd2lhV2R1YjNKbFRHbHpkQ0k2VzExOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _traveled = _interopRequireDefault(__webpack_require__(/*! ./air_traffic/traveled.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/traveled.js\"));\nvar _booked = _interopRequireDefault(__webpack_require__(/*! ./air_traffic/booked.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/booked.js\"));\nvar _busiest_period = _interopRequireDefault(__webpack_require__(/*! ./air_traffic/busiest_period.js */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/busiest_period.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/travel/analytics/air-traffic` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.analytics.airTraffic;\n * ```\n *\n * @param {Client} client\n */\nvar AirTraffic = /*#__PURE__*/_createClass(function AirTraffic(client) {\n  _classCallCheck(this, AirTraffic);\n  this.client = client;\n  this.traveled = new _traveled[\"default\"](client);\n  this.booked = new _booked[\"default\"](client);\n  this.busiestPeriod = new _busiest_period[\"default\"](client);\n});\nvar _default = exports[\"default\"] = AirTraffic;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHJhdmVsZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9ib29rZWQiLCJfYnVzaWVzdF9wZXJpb2QiLCJlIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvdHlwZSIsImkiLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJBaXJUcmFmZmljIiwiY2xpZW50IiwidHJhdmVsZWQiLCJUcmF2ZWxlZCIsImJvb2tlZCIsIkJvb2tlZCIsImJ1c2llc3RQZXJpb2QiLCJCdXNpZXN0UGVyaW9kIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvdHJhdmVsL2FuYWx5dGljcy9haXJfdHJhZmZpYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVHJhdmVsZWQgZnJvbSAnLi9haXJfdHJhZmZpYy90cmF2ZWxlZC5qcyc7XG5pbXBvcnQgQm9va2VkIGZyb20gJy4vYWlyX3RyYWZmaWMvYm9va2VkLmpzJztcbmltcG9ydCBCdXNpZXN0UGVyaW9kIGZyb20gJy4vYWlyX3RyYWZmaWMvYnVzaWVzdF9wZXJpb2QuanMnO1xuXG4vKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS90cmF2ZWwvYW5hbHl0aWNzL2Fpci10cmFmZmljYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMudHJhdmVsLmFuYWx5dGljcy5haXJUcmFmZmljO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBBaXJUcmFmZmljIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgICA9IGNsaWVudDtcbiAgICB0aGlzLnRyYXZlbGVkID0gbmV3IFRyYXZlbGVkKGNsaWVudCk7XG4gICAgdGhpcy5ib29rZWQgPSBuZXcgQm9va2VkKGNsaWVudCk7XG4gICAgdGhpcy5idXNpZXN0UGVyaW9kID0gbmV3IEJ1c2llc3RQZXJpb2QoY2xpZW50KTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFpclRyYWZmaWM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxlQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBNEQsU0FBQUQsdUJBQUFJLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGtCQUFBRixDQUFBLEVBQUFHLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLENBQUEsR0FBQUgsQ0FBQSxDQUFBQyxDQUFBLEdBQUFFLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLENBQUFDLFVBQUEsUUFBQUQsQ0FBQSxDQUFBRSxZQUFBLGtCQUFBRixDQUFBLEtBQUFBLENBQUEsQ0FBQUcsUUFBQSxRQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxFQUFBWSxjQUFBLENBQUFOLENBQUEsQ0FBQU8sR0FBQSxHQUFBUCxDQUFBO0FBQUEsU0FBQVEsYUFBQWQsQ0FBQSxFQUFBRyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxJQUFBRCxpQkFBQSxDQUFBRixDQUFBLENBQUFlLFNBQUEsRUFBQVosQ0FBQSxHQUFBQyxDQUFBLElBQUFGLGlCQUFBLENBQUFGLENBQUEsRUFBQUksQ0FBQSxHQUFBTSxNQUFBLENBQUFDLGNBQUEsQ0FBQVgsQ0FBQSxpQkFBQVMsUUFBQSxTQUFBVCxDQUFBO0FBQUEsU0FBQVksZUFBQVIsQ0FBQSxRQUFBWSxDQUFBLEdBQUFDLFlBQUEsQ0FBQWIsQ0FBQSxnQ0FBQWMsT0FBQSxDQUFBRixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFiLENBQUEsRUFBQUQsQ0FBQSxvQkFBQWUsT0FBQSxDQUFBZCxDQUFBLE1BQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQWUsTUFBQSxDQUFBQyxXQUFBLGtCQUFBcEIsQ0FBQSxRQUFBZ0IsQ0FBQSxHQUFBaEIsQ0FBQSxDQUFBcUIsSUFBQSxDQUFBakIsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBZSxPQUFBLENBQUFGLENBQUEsVUFBQUEsQ0FBQSxZQUFBTSxTQUFBLHlFQUFBbkIsQ0FBQSxHQUFBb0IsTUFBQSxHQUFBQyxNQUFBLEVBQUFwQixDQUFBO0FBQUEsU0FBQXFCLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFMLFNBQUE7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQSxJQWFNTSxVQUFVLGdCQUFBZCxZQUFBLENBQ2QsU0FBQWMsV0FBWUMsTUFBTSxFQUFFO0VBQUFKLGVBQUEsT0FBQUcsVUFBQTtFQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBS0EsTUFBTTtFQUN0QixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJQyxvQkFBUSxDQUFDRixNQUFNLENBQUM7RUFDcEMsSUFBSSxDQUFDRyxNQUFNLEdBQUcsSUFBSUMsa0JBQU0sQ0FBQ0osTUFBTSxDQUFDO0VBQ2hDLElBQUksQ0FBQ0ssYUFBYSxHQUFHLElBQUlDLDBCQUFhLENBQUNOLE1BQU0sQ0FBQztBQUNoRCxDQUFDO0FBQUEsSUFBQU8sUUFBQSxHQUFBQyxPQUFBLGNBSVlULFVBQVU7QUFBQVUsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/booked.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/booked.js ***!
  \********************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/travel/analytics/air-traffic/booked` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.analytics.AirTraffic.Booked;\n * ```\n *\n * @param {Client} client\n */\nvar Booked = /*#__PURE__*/function () {\n  function Booked(client) {\n    _classCallCheck(this, Booked);\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of air traffic reports based on the number of bookings.\n   *\n   * @param {Object} params\n   * @param {string} params.originCityCode IATA code of the origin city - e.g. MAD for\n   *   Madrid - required\n   * @param {string} params.period period when consumers are travelling in\n   *   YYYY-MM format\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Where were people flying to from Madrid in the August 2017?\n   *\n   * ```js\n   * amadeus.travel.analytics.AirTraffic.Booked.get({\n   *   originCityCode: 'MAD',\n   *   period: '2017-08'\n   * });\n   * ```\n   */\n  return _createClass(Booked, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/travel/analytics/air-traffic/booked', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Booked;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29rZWQiLCJjbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImdldCIsInBhcmFtcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3RyYXZlbC9hbmFseXRpY3MvYWlyX3RyYWZmaWMvYm9va2VkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3RyYXZlbC9hbmFseXRpY3MvYWlyLXRyYWZmaWMvYm9va2VkYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMudHJhdmVsLmFuYWx5dGljcy5BaXJUcmFmZmljLkJvb2tlZDtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgQm9va2Vke1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhaXIgdHJhZmZpYyByZXBvcnRzIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgYm9va2luZ3MuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5vcmlnaW5DaXR5Q29kZSBJQVRBIGNvZGUgb2YgdGhlIG9yaWdpbiBjaXR5IC0gZS5nLiBNQUQgZm9yXG4gICAqICAgTWFkcmlkIC0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5wZXJpb2QgcGVyaW9kIHdoZW4gY29uc3VtZXJzIGFyZSB0cmF2ZWxsaW5nIGluXG4gICAqICAgWVlZWS1NTSBmb3JtYXRcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBXaGVyZSB3ZXJlIHBlb3BsZSBmbHlpbmcgdG8gZnJvbSBNYWRyaWQgaW4gdGhlIEF1Z3VzdCAyMDE3P1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnRyYXZlbC5hbmFseXRpY3MuQWlyVHJhZmZpYy5Cb29rZWQuZ2V0KHtcbiAgICogICBvcmlnaW5DaXR5Q29kZTogJ01BRCcsXG4gICAqICAgcGVyaW9kOiAnMjAxNy0wOCdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3RyYXZlbC9hbmFseXRpY3MvYWlyLXRyYWZmaWMvYm9va2VkJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb29rZWQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsTUFBTTtFQUNWLFNBQUFBLE9BQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLE1BQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFsQkUsT0FBQUUsWUFBQSxDQUFBSCxNQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQW1CQSxTQUFBQyxJQUFBLEVBQWlCO01BQUEsSUFBYkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDYixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSyxHQUFHLENBQUMseUNBQXlDLEVBQUVDLE1BQU0sQ0FBQztJQUMzRTtFQUFDO0FBQUE7QUFBQSxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsY0FHWVosTUFBTTtBQUFBYSxNQUFBLENBQUFELE9BQUEsR0FBQUEsT0FBQSxDQUFBRSxPQUFBIiwiaWdub3JlTGlzdCI6W119//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/booked.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/busiest_period.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/busiest_period.js ***!
  \****************************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/travel/analytics/air-traffic/busiest-period` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.analytics.AirTraffic.BusiestPeriod;\n * ```\n *\n * @param {Client} client\n */\nvar BusiestPeriod = /*#__PURE__*/function () {\n  function BusiestPeriod(client) {\n    _classCallCheck(this, BusiestPeriod);\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of air traffic reports.\n   *\n   * @param {Object} params\n   * @param {string} params.cityCode IATA code of the origin city - e.g. MAD for\n   *   Madrid - required\n   * @param {string} params.period period when consumers are travelling in\n   *   YYYY-MM format\n   * @param {string} params.direction to select between arrivals and departures (default: arrivals)\n   *   YYYY-MM format\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * What were the busiest months for Madrid in 2017?\n   *\n   * ```js\n   * amadeus.travel.analytics.AirTraffic.BusiestPeriod.get({\n   *   cityCode: 'MAD',\n   *   period: '2017',\n   *   direction: Amadeus.direction.arriving\n   * });\n   * ```\n   */\n  return _createClass(BusiestPeriod, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/travel/analytics/air-traffic/busiest-period', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = BusiestPeriod;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCdXNpZXN0UGVyaW9kIiwiY2xpZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJnZXQiLCJwYXJhbXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy90cmF2ZWwvYW5hbHl0aWNzL2Fpcl90cmFmZmljL2J1c2llc3RfcGVyaW9kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YxL3RyYXZlbC9hbmFseXRpY3MvYWlyLXRyYWZmaWMvYnVzaWVzdC1wZXJpb2RgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy50cmF2ZWwuYW5hbHl0aWNzLkFpclRyYWZmaWMuQnVzaWVzdFBlcmlvZDtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgQnVzaWVzdFBlcmlvZHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgYWlyIHRyYWZmaWMgcmVwb3J0cy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmNpdHlDb2RlIElBVEEgY29kZSBvZiB0aGUgb3JpZ2luIGNpdHkgLSBlLmcuIE1BRCBmb3JcbiAgICogICBNYWRyaWQgLSByZXF1aXJlZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLnBlcmlvZCBwZXJpb2Qgd2hlbiBjb25zdW1lcnMgYXJlIHRyYXZlbGxpbmcgaW5cbiAgICogICBZWVlZLU1NIGZvcm1hdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmRpcmVjdGlvbiB0byBzZWxlY3QgYmV0d2VlbiBhcnJpdmFscyBhbmQgZGVwYXJ0dXJlcyAoZGVmYXVsdDogYXJyaXZhbHMpXG4gICAqICAgWVlZWS1NTSBmb3JtYXRcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBXaGF0IHdlcmUgdGhlIGJ1c2llc3QgbW9udGhzIGZvciBNYWRyaWQgaW4gMjAxNz9cbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy50cmF2ZWwuYW5hbHl0aWNzLkFpclRyYWZmaWMuQnVzaWVzdFBlcmlvZC5nZXQoe1xuICAgKiAgIGNpdHlDb2RlOiAnTUFEJyxcbiAgICogICBwZXJpb2Q6ICcyMDE3JyxcbiAgICogICBkaXJlY3Rpb246IEFtYWRldXMuZGlyZWN0aW9uLmFycml2aW5nXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS90cmF2ZWwvYW5hbHl0aWNzL2Fpci10cmFmZmljL2J1c2llc3QtcGVyaW9kJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCdXNpZXN0UGVyaW9kO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLGFBQWE7RUFDakIsU0FBQUEsY0FBWUMsTUFBTSxFQUFFO0lBQUFDLGVBQUEsT0FBQUYsYUFBQTtJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQXJCRSxPQUFBRSxZQUFBLENBQUFILGFBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBc0JBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxpREFBaUQsRUFBRUMsTUFBTSxDQUFDO0lBQ25GO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixhQUFhO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/busiest_period.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/traveled.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/traveled.js ***!
  \**********************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/travel/analytics/air-traffic/traveled` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.analytics.AirTraffic.Traveled;\n * ```\n *\n * @param {Client} client\n */\nvar Traveled = /*#__PURE__*/function () {\n  function Traveled(client) {\n    _classCallCheck(this, Traveled);\n    this.client = client;\n  }\n\n  /**\n   * Returns a list of air traffic reports based on the number of people traveling.\n   *\n   * @param {Object} params\n   * @param {string} params.originCityCode IATA code of the origin city - e.g. MAD for\n   *   Madrid - required\n   * @param {string} params.period period when consumers are travelling in\n   *   YYYY-MM format\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Where were people flying to from Madrid in the January 2017?\n   *\n   * ```js\n   * amadeus.travel.analytics.AirTraffic.Traveled.get({\n   *   originCityCode: 'MAD',\n   *   period: '2017-01'\n   * });\n   * ```\n   */\n  return _createClass(Traveled, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/travel/analytics/air-traffic/traveled', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = Traveled;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUcmF2ZWxlZCIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvdHJhdmVsL2FuYWx5dGljcy9haXJfdHJhZmZpYy90cmF2ZWxlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS90cmF2ZWwvYW5hbHl0aWNzL2Fpci10cmFmZmljL3RyYXZlbGVkYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMudHJhdmVsLmFuYWx5dGljcy5BaXJUcmFmZmljLlRyYXZlbGVkO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBUcmF2ZWxlZHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgYWlyIHRyYWZmaWMgcmVwb3J0cyBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIHBlb3BsZSB0cmF2ZWxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5vcmlnaW5DaXR5Q29kZSBJQVRBIGNvZGUgb2YgdGhlIG9yaWdpbiBjaXR5IC0gZS5nLiBNQUQgZm9yXG4gICAqICAgTWFkcmlkIC0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5wZXJpb2QgcGVyaW9kIHdoZW4gY29uc3VtZXJzIGFyZSB0cmF2ZWxsaW5nIGluXG4gICAqICAgWVlZWS1NTSBmb3JtYXRcbiAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgKlxuICAgKiBXaGVyZSB3ZXJlIHBlb3BsZSBmbHlpbmcgdG8gZnJvbSBNYWRyaWQgaW4gdGhlIEphbnVhcnkgMjAxNz9cbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy50cmF2ZWwuYW5hbHl0aWNzLkFpclRyYWZmaWMuVHJhdmVsZWQuZ2V0KHtcbiAgICogICBvcmlnaW5DaXR5Q29kZTogJ01BRCcsXG4gICAqICAgcGVyaW9kOiAnMjAxNy0wMSdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3RyYXZlbC9hbmFseXRpY3MvYWlyLXRyYWZmaWMvdHJhdmVsZWQnLCBwYXJhbXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyYXZlbGVkO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBLElBYU1BLFFBQVE7RUFDWixTQUFBQSxTQUFZQyxNQUFNLEVBQUU7SUFBQUMsZUFBQSxPQUFBRixRQUFBO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBbEJFLE9BQUFFLFlBQUEsQ0FBQUgsUUFBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFtQkEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLDJDQUEyQyxFQUFFQyxNQUFNLENBQUM7SUFDN0U7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLFFBQVE7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/analytics/air_traffic/traveled.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions.js":
/*!***************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _trip_purpose = _interopRequireDefault(__webpack_require__(/*! ./predictions/trip_purpose */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions/trip_purpose.js\"));\nvar _flight_delay = _interopRequireDefault(__webpack_require__(/*! ./predictions/flight_delay */ \"(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions/flight_delay.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n/**\n * A namespaced client for the\n * `/v1/travel/predictions/trip-purpose` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.predictions;\n * ```\n *\n * @param {Client} client\n * @property {TripPurpose} tripPurpose\n * @property {FlightDelay} flightDelay\n */\nvar Predictions = /*#__PURE__*/_createClass(function Predictions(client) {\n  _classCallCheck(this, Predictions);\n  this.client = client;\n  this.tripPurpose = new _trip_purpose[\"default\"](client);\n  this.flightDelay = new _flight_delay[\"default\"](client);\n});\nvar _default = exports[\"default\"] = Predictions;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHJpcF9wdXJwb3NlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZmxpZ2h0X2RlbGF5IiwiZSIsIl9fZXNNb2R1bGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwibyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b3R5cGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiX3R5cGVvZiIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiUHJlZGljdGlvbnMiLCJjbGllbnQiLCJ0cmlwUHVycG9zZSIsIlRyaXBQdXJwb3NlIiwiZmxpZ2h0RGVsYXkiLCJGbGlnaHREZWxheSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYW1hZGV1cy9uYW1lc3BhY2VzL3RyYXZlbC9wcmVkaWN0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVHJpcFB1cnBvc2UgZnJvbSAnLi9wcmVkaWN0aW9ucy90cmlwX3B1cnBvc2UnO1xuaW1wb3J0IEZsaWdodERlbGF5IGZyb20gJy4vcHJlZGljdGlvbnMvZmxpZ2h0X2RlbGF5JztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjEvdHJhdmVsL3ByZWRpY3Rpb25zL3RyaXAtcHVycG9zZWAgZW5kcG9pbnRzXG4gKlxuICogQWNjZXNzIHZpYSB0aGUge0BsaW5rIEFtYWRldXN9IG9iamVjdFxuICpcbiAqIGBgYGpzXG4gKiBsZXQgYW1hZGV1cyA9IG5ldyBBbWFkZXVzKCk7XG4gKiBhbWFkZXVzLnRyYXZlbC5wcmVkaWN0aW9ucztcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqIEBwcm9wZXJ0eSB7VHJpcFB1cnBvc2V9IHRyaXBQdXJwb3NlXG4gKiBAcHJvcGVydHkge0ZsaWdodERlbGF5fSBmbGlnaHREZWxheVxuICovXG5jbGFzcyBQcmVkaWN0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMudHJpcFB1cnBvc2UgPSBuZXcgVHJpcFB1cnBvc2UoY2xpZW50KTtcbiAgICB0aGlzLmZsaWdodERlbGF5ID0gbmV3IEZsaWdodERlbGF5KGNsaWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJlZGljdGlvbnM7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsYUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQXFELFNBQUFELHVCQUFBRyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxrQkFBQUYsQ0FBQSxFQUFBRyxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxDQUFBLEdBQUFILENBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxDQUFBQyxVQUFBLFFBQUFELENBQUEsQ0FBQUUsWUFBQSxrQkFBQUYsQ0FBQSxLQUFBQSxDQUFBLENBQUFHLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsRUFBQVksY0FBQSxDQUFBTixDQUFBLENBQUFPLEdBQUEsR0FBQVAsQ0FBQTtBQUFBLFNBQUFRLGFBQUFkLENBQUEsRUFBQUcsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQUYsQ0FBQSxDQUFBZSxTQUFBLEVBQUFaLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBRixDQUFBLEVBQUFJLENBQUEsR0FBQU0sTUFBQSxDQUFBQyxjQUFBLENBQUFYLENBQUEsaUJBQUFTLFFBQUEsU0FBQVQsQ0FBQTtBQUFBLFNBQUFZLGVBQUFSLENBQUEsUUFBQVksQ0FBQSxHQUFBQyxZQUFBLENBQUFiLENBQUEsZ0NBQUFjLE9BQUEsQ0FBQUYsQ0FBQSxJQUFBQSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBQyxhQUFBYixDQUFBLEVBQUFELENBQUEsb0JBQUFlLE9BQUEsQ0FBQWQsQ0FBQSxNQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUosQ0FBQSxHQUFBSSxDQUFBLENBQUFlLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQXBCLENBQUEsUUFBQWdCLENBQUEsR0FBQWhCLENBQUEsQ0FBQXFCLElBQUEsQ0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxnQ0FBQWUsT0FBQSxDQUFBRixDQUFBLFVBQUFBLENBQUEsWUFBQU0sU0FBQSx5RUFBQW5CLENBQUEsR0FBQW9CLE1BQUEsR0FBQUMsTUFBQSxFQUFBcEIsQ0FBQTtBQUFBLFNBQUFxQixnQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFVBQUFELENBQUEsWUFBQUMsQ0FBQSxhQUFBTCxTQUFBO0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWRBLElBZU1NLFdBQVcsZ0JBQUFkLFlBQUEsQ0FDZixTQUFBYyxZQUFZQyxNQUFNLEVBQUU7RUFBQUosZUFBQSxPQUFBRyxXQUFBO0VBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3BCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlDLHdCQUFXLENBQUNGLE1BQU0sQ0FBQztFQUMxQyxJQUFJLENBQUNHLFdBQVcsR0FBRyxJQUFJQyx3QkFBVyxDQUFDSixNQUFNLENBQUM7QUFDNUMsQ0FBQztBQUFBLElBQUFLLFFBQUEsR0FBQUMsT0FBQSxjQUdZUCxXQUFXO0FBQUFRLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions/flight_delay.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions/flight_delay.js ***!
  \****************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/travel/predictions/flight-delay` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.predictions.flightDelay;\n * ```\n *\n * @param {Client} client\n */\nvar FlightDelay = /*#__PURE__*/function () {\n  function FlightDelay(client) {\n    _classCallCheck(this, FlightDelay);\n    this.client = client;\n  }\n\n  /**\n   * This machine learning API is based on a prediction model that takes the input of\n   * the user -time, carrier, airport and aircraft information- and\n   * predict the segment where the flight is likely to lay.\n   *\n   * @param {Object} params\n   * @param {string} params.originLocationCode city/airport IATA code to which the traveler is departing, e.g. PAR for Paris\n   * @param {string} params.destinationLocationCode city/airport IATA code to which the traveler is departing, e.g. PAR for Paris\n   * @param {string} params.departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the ISO 8601 YYYY-MM-DD format, e.g. 2019-12-25\n   * @param {string} params.departureTime local time relative to originLocationCode on which the traveler will depart from the origin. Time respects ISO 8601 standard. e.g. 13:22:00\n   * @param {string} params.arrivalDate the date on which the traveler will arrive to the destination from the origin. Dates are specified in the ISO 8601 YYYY-MM-DD format, e.g. 2019-12-25\n   * @param {string} params.arrivalTime local time relative to destinationLocationCode on which the traveler will arrive to destination. Time respects ISO 8601 standard. e.g. 13:22:00\n   * @param {string} params.aircraftCode IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)\n   * @param {string} params.carrierCode airline / carrier code\n   * @param {string} params.flightNumber flight number as assigned by the carrier\n   * @param {string} params.duration flight duration in ISO8601 PnYnMnDTnHnMnS format, e.g. PT2H10M\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Predict the segment where LH1009 (BRU-FRA) is likely to lay on 2020-01-14\n   *\n   * ```js\n   * amadeus.travel.predictions.flightDelay.get({\n   *    originLocationCode: 'BRU',\n   *    destinationLocationCode: 'FRA',\n   *    departureDate: '2020-01-14',\n   *    departureTime: '11:05:00',\n   *    arrivalDate: '2020-01-14',\n   *    arrivalTime: '12:10:00',\n   *    aircraftCode: '32A',\n   *    carrierCode: 'LH',\n   *    flightNumber: '1009',\n   *    duration: 'PT1H05M'\n   * })\n   * ```\n   */\n  return _createClass(FlightDelay, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/travel/predictions/flight-delay', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = FlightDelay;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlnaHREZWxheSIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvdHJhdmVsL3ByZWRpY3Rpb25zL2ZsaWdodF9kZWxheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS90cmF2ZWwvcHJlZGljdGlvbnMvZmxpZ2h0LWRlbGF5YCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMudHJhdmVsLnByZWRpY3Rpb25zLmZsaWdodERlbGF5O1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBGbGlnaHREZWxheSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWFjaGluZSBsZWFybmluZyBBUEkgaXMgYmFzZWQgb24gYSBwcmVkaWN0aW9uIG1vZGVsIHRoYXQgdGFrZXMgdGhlIGlucHV0IG9mXG4gICAqIHRoZSB1c2VyIC10aW1lLCBjYXJyaWVyLCBhaXJwb3J0IGFuZCBhaXJjcmFmdCBpbmZvcm1hdGlvbi0gYW5kXG4gICAqIHByZWRpY3QgdGhlIHNlZ21lbnQgd2hlcmUgdGhlIGZsaWdodCBpcyBsaWtlbHkgdG8gbGF5LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMub3JpZ2luTG9jYXRpb25Db2RlIGNpdHkvYWlycG9ydCBJQVRBIGNvZGUgdG8gd2hpY2ggdGhlIHRyYXZlbGVyIGlzIGRlcGFydGluZywgZS5nLiBQQVIgZm9yIFBhcmlzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGVzdGluYXRpb25Mb2NhdGlvbkNvZGUgY2l0eS9haXJwb3J0IElBVEEgY29kZSB0byB3aGljaCB0aGUgdHJhdmVsZXIgaXMgZGVwYXJ0aW5nLCBlLmcuIFBBUiBmb3IgUGFyaXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5kZXBhcnR1cmVEYXRlIHRoZSBkYXRlIG9uIHdoaWNoIHRoZSB0cmF2ZWxlciB3aWxsIGRlcGFydCBmcm9tIHRoZSBvcmlnaW4gdG8gZ28gdG8gdGhlIGRlc3RpbmF0aW9uLiBEYXRlcyBhcmUgc3BlY2lmaWVkIGluIHRoZSBJU08gODYwMSBZWVlZLU1NLUREIGZvcm1hdCwgZS5nLiAyMDE5LTEyLTI1XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGVwYXJ0dXJlVGltZSBsb2NhbCB0aW1lIHJlbGF0aXZlIHRvIG9yaWdpbkxvY2F0aW9uQ29kZSBvbiB3aGljaCB0aGUgdHJhdmVsZXIgd2lsbCBkZXBhcnQgZnJvbSB0aGUgb3JpZ2luLiBUaW1lIHJlc3BlY3RzIElTTyA4NjAxIHN0YW5kYXJkLiBlLmcuIDEzOjIyOjAwXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuYXJyaXZhbERhdGUgdGhlIGRhdGUgb24gd2hpY2ggdGhlIHRyYXZlbGVyIHdpbGwgYXJyaXZlIHRvIHRoZSBkZXN0aW5hdGlvbiBmcm9tIHRoZSBvcmlnaW4uIERhdGVzIGFyZSBzcGVjaWZpZWQgaW4gdGhlIElTTyA4NjAxIFlZWVktTU0tREQgZm9ybWF0LCBlLmcuIDIwMTktMTItMjVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5hcnJpdmFsVGltZSBsb2NhbCB0aW1lIHJlbGF0aXZlIHRvIGRlc3RpbmF0aW9uTG9jYXRpb25Db2RlIG9uIHdoaWNoIHRoZSB0cmF2ZWxlciB3aWxsIGFycml2ZSB0byBkZXN0aW5hdGlvbi4gVGltZSByZXNwZWN0cyBJU08gODYwMSBzdGFuZGFyZC4gZS5nLiAxMzoyMjowMFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmFpcmNyYWZ0Q29kZSBJQVRBIGFpcmNyYWZ0IGNvZGUgKGh0dHA6Ly93d3cuZmx1Z3pldWdpbmZvLm5ldC90YWJsZV9hY2NvZGVzX2lhdGFfZW4ucGhwKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmNhcnJpZXJDb2RlIGFpcmxpbmUgLyBjYXJyaWVyIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5mbGlnaHROdW1iZXIgZmxpZ2h0IG51bWJlciBhcyBhc3NpZ25lZCBieSB0aGUgY2FycmllclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmR1cmF0aW9uIGZsaWdodCBkdXJhdGlvbiBpbiBJU084NjAxIFBuWW5NbkRUbkhuTW5TIGZvcm1hdCwgZS5nLiBQVDJIMTBNXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogUHJlZGljdCB0aGUgc2VnbWVudCB3aGVyZSBMSDEwMDkgKEJSVS1GUkEpIGlzIGxpa2VseSB0byBsYXkgb24gMjAyMC0wMS0xNFxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnRyYXZlbC5wcmVkaWN0aW9ucy5mbGlnaHREZWxheS5nZXQoe1xuICAgKiAgICBvcmlnaW5Mb2NhdGlvbkNvZGU6ICdCUlUnLFxuICAgKiAgICBkZXN0aW5hdGlvbkxvY2F0aW9uQ29kZTogJ0ZSQScsXG4gICAqICAgIGRlcGFydHVyZURhdGU6ICcyMDIwLTAxLTE0JyxcbiAgICogICAgZGVwYXJ0dXJlVGltZTogJzExOjA1OjAwJyxcbiAgICogICAgYXJyaXZhbERhdGU6ICcyMDIwLTAxLTE0JyxcbiAgICogICAgYXJyaXZhbFRpbWU6ICcxMjoxMDowMCcsXG4gICAqICAgIGFpcmNyYWZ0Q29kZTogJzMyQScsXG4gICAqICAgIGNhcnJpZXJDb2RlOiAnTEgnLFxuICAgKiAgICBmbGlnaHROdW1iZXI6ICcxMDA5JyxcbiAgICogICAgZHVyYXRpb246ICdQVDFIMDVNJ1xuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS90cmF2ZWwvcHJlZGljdGlvbnMvZmxpZ2h0LWRlbGF5JywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbGlnaHREZWxheTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsV0FBVztFQUNmLFNBQUFBLFlBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFdBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQWxDRSxPQUFBRSxZQUFBLENBQUFILFdBQUE7SUFBQUksR0FBQTtJQUFBQyxLQUFBLEVBbUNBLFNBQUFDLElBQUEsRUFBaUI7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxxQ0FBcUMsRUFBRUMsTUFBTSxDQUFDO0lBQ3ZFO0VBQUM7QUFBQTtBQUFBLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxjQUdZWixXQUFXO0FBQUFhLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFFLE9BQUEiLCJpZ25vcmVMaXN0IjpbXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions/flight_delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions/trip_purpose.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions/trip_purpose.js ***!
  \****************************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v1/travel/predictions/trip-purpose` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.travel.predictions.tripPurpose;\n * ```\n *\n * @param {Client} client\n */\nvar TripPurpose = /*#__PURE__*/function () {\n  function TripPurpose(client) {\n    _classCallCheck(this, TripPurpose);\n    this.client = client;\n  }\n\n  /**\n   * Forecast traveler purpose, Business or Leisure, together with the probability in the context of search & shopping.\n   *\n   * @param {Object} params\n   * @param {string} params.originLocationCode city/airport IATA code from which the traveler will depart, e.g. BOS for Boston\n   * @param {string} params.destinationLocationCode city/airport IATA code to which the traveler is going, e.g. PAR for Paris\n   * @param {string} params.departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the ISO 8601 YYYY-MM-DD format, e.g. 2017-12-25\n   * @param {string} params.returnDate the date on which the traveler will depart from the destination to return to the origin. Dates are specified in the ISO 8601 YYYY-MM-DD format, e.g. 2018-02-28\n   * @return {Promise.<Response,ResponseError>} a Promise\n   *\n   * Forecast traveler purpose for a NYC-MAD round-trip between 2020-08-01 & 2020-08-12.\n   *\n   * ```js\n   * amadeus.travel.predictions.tripPurpose.get({\n   *    originLocationCode: 'NYC',\n   *    destinationLocationCode: 'MAD',\n   *    departureDate: '2020-08-01',\n   *    returnDate: '2020-08-12'\n   * })\n   * ```\n   */\n  return _createClass(TripPurpose, [{\n    key: \"get\",\n    value: function get() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.get('/v1/travel/predictions/trip-purpose', params);\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = TripPurpose;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUcmlwUHVycG9zZSIsImNsaWVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiZ2V0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvdHJhdmVsL3ByZWRpY3Rpb25zL3RyaXBfcHVycG9zZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbmFtZXNwYWNlZCBjbGllbnQgZm9yIHRoZVxuICogYC92MS90cmF2ZWwvcHJlZGljdGlvbnMvdHJpcC1wdXJwb3NlYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMudHJhdmVsLnByZWRpY3Rpb25zLnRyaXBQdXJwb3NlO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudFxuICovXG5jbGFzcyBUcmlwUHVycG9zZSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmVjYXN0IHRyYXZlbGVyIHB1cnBvc2UsIEJ1c2luZXNzIG9yIExlaXN1cmUsIHRvZ2V0aGVyIHdpdGggdGhlIHByb2JhYmlsaXR5IGluIHRoZSBjb250ZXh0IG9mIHNlYXJjaCAmIHNob3BwaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMub3JpZ2luTG9jYXRpb25Db2RlIGNpdHkvYWlycG9ydCBJQVRBIGNvZGUgZnJvbSB3aGljaCB0aGUgdHJhdmVsZXIgd2lsbCBkZXBhcnQsIGUuZy4gQk9TIGZvciBCb3N0b25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5kZXN0aW5hdGlvbkxvY2F0aW9uQ29kZSBjaXR5L2FpcnBvcnQgSUFUQSBjb2RlIHRvIHdoaWNoIHRoZSB0cmF2ZWxlciBpcyBnb2luZywgZS5nLiBQQVIgZm9yIFBhcmlzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuZGVwYXJ0dXJlRGF0ZSB0aGUgZGF0ZSBvbiB3aGljaCB0aGUgdHJhdmVsZXIgd2lsbCBkZXBhcnQgZnJvbSB0aGUgb3JpZ2luIHRvIGdvIHRvIHRoZSBkZXN0aW5hdGlvbi4gRGF0ZXMgYXJlIHNwZWNpZmllZCBpbiB0aGUgSVNPIDg2MDEgWVlZWS1NTS1ERCBmb3JtYXQsIGUuZy4gMjAxNy0xMi0yNVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLnJldHVybkRhdGUgdGhlIGRhdGUgb24gd2hpY2ggdGhlIHRyYXZlbGVyIHdpbGwgZGVwYXJ0IGZyb20gdGhlIGRlc3RpbmF0aW9uIHRvIHJldHVybiB0byB0aGUgb3JpZ2luLiBEYXRlcyBhcmUgc3BlY2lmaWVkIGluIHRoZSBJU08gODYwMSBZWVlZLU1NLUREIGZvcm1hdCwgZS5nLiAyMDE4LTAyLTI4XG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogRm9yZWNhc3QgdHJhdmVsZXIgcHVycG9zZSBmb3IgYSBOWUMtTUFEIHJvdW5kLXRyaXAgYmV0d2VlbiAyMDIwLTA4LTAxICYgMjAyMC0wOC0xMi5cbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy50cmF2ZWwucHJlZGljdGlvbnMudHJpcFB1cnBvc2UuZ2V0KHtcbiAgICogICAgb3JpZ2luTG9jYXRpb25Db2RlOiAnTllDJyxcbiAgICogICAgZGVzdGluYXRpb25Mb2NhdGlvbkNvZGU6ICdNQUQnLFxuICAgKiAgICBkZXBhcnR1cmVEYXRlOiAnMjAyMC0wOC0wMScsXG4gICAqICAgIHJldHVybkRhdGU6ICcyMDIwLTA4LTEyJ1xuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIGdldChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoJy92MS90cmF2ZWwvcHJlZGljdGlvbnMvdHJpcC1wdXJwb3NlJywgcGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmlwUHVycG9zZTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsV0FBVztFQUNmLFNBQUFBLFlBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFdBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBcEJFLE9BQUFFLFlBQUEsQ0FBQUgsV0FBQTtJQUFBSSxHQUFBO0lBQUFDLEtBQUEsRUFxQkEsU0FBQUMsSUFBQSxFQUFpQjtNQUFBLElBQWJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLHFDQUFxQyxFQUFFQyxNQUFNLENBQUM7SUFDdkU7RUFBQztBQUFBO0FBQUEsSUFBQUksUUFBQSxHQUFBQyxPQUFBLGNBR1laLFdBQVc7QUFBQWEsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/predictions/trip_purpose.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/trip_parser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/amadeus/lib/amadeus/namespaces/travel/trip_parser.js ***!
  \***************************************************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A namespaced client for the\n * `/v3/travel/trip-parser` endpoints\n *\n * Access via the {@link Amadeus} object\n *\n * ```js\n * let amadeus = new Amadeus();\n * amadeus.tripParser;\n * ```\n *\n * @param {Client} client\n */\nvar TripParser = /*#__PURE__*/function () {\n  function TripParser(client) {\n    _classCallCheck(this, TripParser);\n    this.client = client;\n  }\n\n  /**\n     * parse information from flight, hotel, rail, and rental car confirmation emails\n     *\n     * @param {Object} params\n     * @return {Promise.<Response,ResponseError>} a Promise\n     *\n     * \"How can I show travelers their full itinerary in one place?\"\n     *\n     * ```js\n     * amadeus.tripParser.post(body);\n     * ```\n     */\n  return _createClass(TripParser, [{\n    key: \"post\",\n    value: function post() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.client.post('/v3/travel/trip-parser', params);\n    }\n    /**\n    * Helper method to convert file contents in UTF-8 encoded string\n    * into Base64 encoded string\n    */\n  }, {\n    key: \"fromFile\",\n    value: function fromFile(fileContentsInUTF8Format) {\n      return new Buffer.from(fileContentsInUTF8Format).toString('base64');\n    }\n  }]);\n}();\nvar _default = exports[\"default\"] = TripParser;\nmodule.exports = exports.default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUcmlwUGFyc2VyIiwiY2xpZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJwb3N0IiwicGFyYW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZnJvbUZpbGUiLCJmaWxlQ29udGVudHNJblVURjhGb3JtYXQiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FtYWRldXMvbmFtZXNwYWNlcy90cmF2ZWwvdHJpcF9wYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjMvdHJhdmVsL3RyaXAtcGFyc2VyYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMudHJpcFBhcnNlcjtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgVHJpcFBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICB9XG5cbiAgLyoqXG4gICAgICogcGFyc2UgaW5mb3JtYXRpb24gZnJvbSBmbGlnaHQsIGhvdGVsLCByYWlsLCBhbmQgcmVudGFsIGNhciBjb25maXJtYXRpb24gZW1haWxzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAgICogQHJldHVybiB7UHJvbWlzZS48UmVzcG9uc2UsUmVzcG9uc2VFcnJvcj59IGEgUHJvbWlzZVxuICAgICAqXG4gICAgICogXCJIb3cgY2FuIEkgc2hvdyB0cmF2ZWxlcnMgdGhlaXIgZnVsbCBpdGluZXJhcnkgaW4gb25lIHBsYWNlP1wiXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGFtYWRldXMudHJpcFBhcnNlci5wb3N0KGJvZHkpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICBwb3N0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoJy92My90cmF2ZWwvdHJpcC1wYXJzZXInLCBwYXJhbXMpO1xuICB9XG4gIC8qKlxuICAqIEhlbHBlciBtZXRob2QgdG8gY29udmVydCBmaWxlIGNvbnRlbnRzIGluIFVURi04IGVuY29kZWQgc3RyaW5nXG4gICogaW50byBCYXNlNjQgZW5jb2RlZCBzdHJpbmdcbiAgKi9cbiAgZnJvbUZpbGUoZmlsZUNvbnRlbnRzSW5VVEY4Rm9ybWF0KSB7XG4gICAgcmV0dXJuIChuZXcgQnVmZmVyLmZyb20oZmlsZUNvbnRlbnRzSW5VVEY4Rm9ybWF0KSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyaXBQYXJzZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsSUFhTUEsVUFBVTtFQUNkLFNBQUFBLFdBQVlDLE1BQU0sRUFBRTtJQUFBQyxlQUFBLE9BQUFGLFVBQUE7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBWEUsT0FBQUUsWUFBQSxDQUFBSCxVQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQVlBLFNBQUFDLEtBQUEsRUFBa0I7TUFBQSxJQUFiQyxNQUFNLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztNQUNkLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNLLElBQUksQ0FBQyx3QkFBd0IsRUFBRUMsTUFBTSxDQUFDO0lBQzNEO0lBQ0E7QUFDRjtBQUNBO0FBQ0E7RUFIRTtJQUFBSCxHQUFBO0lBQUFDLEtBQUEsRUFJQSxTQUFBTSxTQUFTQyx3QkFBd0IsRUFBRTtNQUNqQyxPQUFRLElBQUlDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDRix3QkFBd0IsQ0FBQyxDQUFFRyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ3ZFO0VBQUM7QUFBQTtBQUFBLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxjQUdZakIsVUFBVTtBQUFBa0IsTUFBQSxDQUFBRCxPQUFBLEdBQUFBLE9BQUEsQ0FBQUUsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amadeus/lib/amadeus/namespaces/travel/trip_parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amadeus/package.json":
/*!*******************************************!*\
  !*** ./node_modules/amadeus/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"amadeus","version":"10.1.0","description":"Node library for the Amadeus travel APIs","main":"lib/amadeus.js","scripts":{"prebuild":"npm run lint:src & npm run docs","build":"babel -d lib src/ -s inline","build:watch":"watch \'npm run build\' src","prepublishOnly":"babel -d lib src/ -s inline","pretest":"eslint spec","test":"jest spec --coverage --collectCoverageFrom=src/**/*.js","test:watch":"watch \'npm test\' src spec","predocs":"npm run lint:docs","docs":"documentation build src/** -f html -o docs -a undefined -a public","docs:watch":"watch \'npm run docs\' src","docs:serve":"open docs/","docs:dev":"npm run docs:serve && npm run docs:watch","lint:src":"eslint src","lint:docs":"documentation lint src/**","console":"node -r ./lib/amadeus.js"},"jest":{"verbose":true,"testEnvironment":"node"},"repository":{"type":"git","url":"git+https://github.com/amadeus4dev/amadeus-node.git"},"keywords":["amadeus","travel","api","apis","hotels","flights"],"author":"amadeus-developer","license":"MIT","bugs":{"url":"https://github.com/amadeus4dev/amadeus-node/issues"},"homepage":"https://developers.amadeus.com","contributors":["cbetta","Anthony Roux","Alvaro Navarro","Akshit Singla","Anna Tsolakou","Minji Kim","Gustavo Giunco Bertoldi"],"devDependencies":{"@babel/cli":"^7.18.6","@babel/core":"^7.18.6","@babel/preset-env":"^7.18.6","babel-plugin-add-module-exports":"^1.0.4","babel-preset-env":"^1.7.0","documentation":"^13.2.5","eslint":"^4.16.0","jest":"^24.8.0","merge":"^2.1.1","watch":"^1.0.2"},"dependencies":{"qs":"^6.11.0"}}');

/***/ })

};
;